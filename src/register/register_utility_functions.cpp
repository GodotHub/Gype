#include "register/register_utility_functions.h"

#include <godot_cpp/variant/utility_functions.hpp>

#include "qjspp.hpp"
#include "qjspp/utils.h"

using namespace godot;

void register_utility_functions() {
	qjs::Value gd = context->newObject();
	qjs::Value math = context->newObject();
	math.add("sin", UtilityFunctions::sin);
	math.add("cos", UtilityFunctions::cos);
	math.add("tan", UtilityFunctions::tan);
	math.add("sinh", UtilityFunctions::sinh);
	math.add("cosh", UtilityFunctions::cosh);
	math.add("tanh", UtilityFunctions::tanh);
	math.add("asin", UtilityFunctions::asin);
	math.add("acos", UtilityFunctions::acos);
	math.add("atan", UtilityFunctions::atan);
	math.add("atan2", UtilityFunctions::atan2);
	math.add("asinh", UtilityFunctions::asinh);
	math.add("acosh", UtilityFunctions::acosh);
	math.add("atanh", UtilityFunctions::atanh);
	math.add("sqrt", UtilityFunctions::sqrt);
	math.add("fmod", UtilityFunctions::fmod);
	math.add("fposmod", UtilityFunctions::fposmod);
	math.add("posmod", UtilityFunctions::posmod);
	math.add("floor", UtilityFunctions::floor);
	math.add("floorf", UtilityFunctions::floorf);
	math.add("floori", UtilityFunctions::floori);
	math.add("ceil", UtilityFunctions::ceil);
	math.add("ceilf", UtilityFunctions::ceilf);
	math.add("ceili", UtilityFunctions::ceili);
	math.add("round", UtilityFunctions::round);
	math.add("roundf", UtilityFunctions::roundf);
	math.add("roundi", UtilityFunctions::roundi);
	math.add("abs", UtilityFunctions::abs);
	math.add("absf", UtilityFunctions::absf);
	math.add("absi", UtilityFunctions::absi);
	math.add("sign", UtilityFunctions::sign);
	math.add("signf", UtilityFunctions::signf);
	math.add("signi", UtilityFunctions::signi);
	math.add("snapped", UtilityFunctions::snapped);
	math.add("snappedf", UtilityFunctions::snappedf);
	math.add("snappedi", UtilityFunctions::snappedi);
	math.add("pow", UtilityFunctions::pow);
	math.add("log", UtilityFunctions::log);
	math.add("exp", UtilityFunctions::exp);
	math.add("is_nan", UtilityFunctions::is_nan);
	math.add("is_inf", UtilityFunctions::is_inf);
	math.add("is_equal_approx", UtilityFunctions::is_equal_approx);
	math.add("is_zero_approx", UtilityFunctions::is_zero_approx);
	math.add("is_finite", UtilityFunctions::is_finite);
	math.add("ease", UtilityFunctions::ease);
	math.add("step_decimals", UtilityFunctions::step_decimals);
	math.add("lerp", UtilityFunctions::lerp);
	math.add("lerpf", UtilityFunctions::lerpf);
	math.add("cubic_interpolate", UtilityFunctions::cubic_interpolate);
	math.add("cubic_interpolate_angle", UtilityFunctions::cubic_interpolate_angle);
	math.add("cubic_interpolate_in_time", UtilityFunctions::cubic_interpolate_in_time);
	math.add("cubic_interpolate_angle_in_time", UtilityFunctions::cubic_interpolate_angle_in_time);
	math.add("bezier_interpolate", UtilityFunctions::bezier_interpolate);
	math.add("bezier_derivative", UtilityFunctions::bezier_derivative);
	math.add("angle_difference", UtilityFunctions::angle_difference);
	math.add("lerp_angle", UtilityFunctions::lerp_angle);
	math.add("inverse_lerp", UtilityFunctions::inverse_lerp);
	math.add("remap", UtilityFunctions::remap);
	math.add("smoothstep", UtilityFunctions::smoothstep);
	math.add("move_toward", UtilityFunctions::move_toward);
	math.add("rotate_toward", UtilityFunctions::rotate_toward);
	math.add("deg_to_rad", UtilityFunctions::deg_to_rad);
	math.add("rad_to_deg", UtilityFunctions::rad_to_deg);
	math.add("linear_to_db", UtilityFunctions::linear_to_db);
	math.add("db_to_linear", UtilityFunctions::db_to_linear);
	math.add("wrap", UtilityFunctions::wrap);
	math.add("wrapi", UtilityFunctions::wrapi);
	math.add("wrapf", UtilityFunctions::wrapf);
	math.add("max", UtilityFunctions::max);
	math.add("maxi", UtilityFunctions::maxi);
	math.add("maxf", UtilityFunctions::maxf);
	math.add("min", UtilityFunctions::min);
	math.add("mini", UtilityFunctions::mini);
	math.add("minf", UtilityFunctions::minf);
	math.add("clamp", UtilityFunctions::clamp);
	math.add("clampi", UtilityFunctions::clampi);
	math.add("clampf", UtilityFunctions::clampf);
	math.add("nearest_po2", UtilityFunctions::nearest_po2);
	math.add("pingpong", UtilityFunctions::pingpong);
	gd.add("weakref", UtilityFunctions::weakref);
	gd.add("type_convert", UtilityFunctions::type_convert);
	gd.add("str", UtilityFunctions::str);
	gd.add("error_string", UtilityFunctions::error_string);
	gd.add("type_string", UtilityFunctions::type_string);
	gd.add("print", UtilityFunctions::print);
	gd.add("print_rich", UtilityFunctions::print_rich);
	gd.add("printerr", UtilityFunctions::printerr);
	gd.add("printt", UtilityFunctions::printt);
	gd.add("prints", UtilityFunctions::prints);
	gd.add("printraw", UtilityFunctions::printraw);
	gd.add("print_verbose", UtilityFunctions::print_verbose);
	gd.add("push_error", UtilityFunctions::push_error);
	gd.add("push_warning", UtilityFunctions::push_warning);
	gd.add("var_to_str", UtilityFunctions::var_to_str);
	gd.add("str_to_var", UtilityFunctions::str_to_var);
	gd.add("var_to_bytes", UtilityFunctions::var_to_bytes);
	gd.add("bytes_to_var", UtilityFunctions::bytes_to_var);
	gd.add("var_to_bytes_with_objects", UtilityFunctions::var_to_bytes_with_objects);
	gd.add("bytes_to_var_with_objects", UtilityFunctions::bytes_to_var_with_objects);
	gd.add("hash", UtilityFunctions::hash);
	gd.add("instance_from_id", UtilityFunctions::instance_from_id);
	gd.add("is_instance_id_valid", UtilityFunctions::is_instance_id_valid);
	gd.add("is_instance_valid", UtilityFunctions::is_instance_valid);
	gd.add("rid_allocate_id", UtilityFunctions::rid_allocate_id);
	gd.add("rid_from_int64", UtilityFunctions::rid_from_int64);
	gd.add("is_same", UtilityFunctions::is_same);
	context->global()[(new std::string("GD"))->c_str()] = gd;
	context->global()[(new std::string("Math"))->c_str()] = math;
}