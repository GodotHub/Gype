#include <godot_cpp/classes/display_server.hpp>
#include <godot_cpp/classes/ref.hpp>
#include <godot_cpp/core/type_info.hpp>
#include <godot_cpp/variant/color.hpp>
#include <godot_cpp/variant/rect2.hpp>
#include <godot_cpp/variant/rect2i.hpp>
#include <godot_cpp/variant/typed_array.hpp>
#include <godot_cpp/variant/variant.hpp>
#include <godot_cpp/variant/vector2.hpp>
#include <godot_cpp/variant/vector2i.hpp>
#include <godot_cpp/variant/vector3i.hpp>
#include <godot_cpp/classes/global_constants.hpp>
#include <godot_cpp/classes/image.hpp>
#include <godot_cpp/classes/resource.hpp>
#include <godot_cpp/classes/texture2d.hpp>
#include <godot_cpp/variant/callable.hpp>
#include <godot_cpp/variant/dictionary.hpp>
#include <godot_cpp/variant/packed_int32_array.hpp>
#include <godot_cpp/variant/packed_string_array.hpp>
#include <godot_cpp/variant/packed_vector2_array.hpp>
#include <godot_cpp/variant/rid.hpp>
#include <godot_cpp/variant/string.hpp>
#include <stdint.h>

#include "register/register_classes.h"
#include "qjspp/utils.h"
#include "qjspp.hpp"

using namespace godot;

void register_singletons_DisplayServer() {
	qjs::Value js_singleton = context->newObject();
    DisplayServer *singleton = DisplayServer::get_singleton();
    js_singleton.add("has_feature", [singleton](DisplayServer::Feature feature)->bool{return singleton->has_feature(feature);});
    js_singleton.add("get_name", [singleton]()->String{return singleton->get_name();});
    js_singleton.add("help_set_search_callbacks", [singleton](const Callable & search_callback,const Callable & action_callback)->void{singleton->help_set_search_callbacks(search_callback,action_callback);});
    js_singleton.add("global_menu_set_popup_callbacks", [singleton](const String & menu_root,const Callable & open_callback,const Callable & close_callback)->void{singleton->global_menu_set_popup_callbacks(menu_root,open_callback,close_callback);});
    js_singleton.add("global_menu_add_submenu_item", [singleton](const String & menu_root,const String & label,const String & submenu,int32_t index)->int64_t{return singleton->global_menu_add_submenu_item(menu_root,label,submenu,index);});
    js_singleton.add("global_menu_add_item", [singleton](const String & menu_root,const String & label,const Callable & callback,const Callable & key_callback,const Variant & tag,Key accelerator,int32_t index)->int64_t{return singleton->global_menu_add_item(menu_root,label,callback,key_callback,tag,accelerator,index);});
    js_singleton.add("global_menu_add_check_item", [singleton](const String & menu_root,const String & label,const Callable & callback,const Callable & key_callback,const Variant & tag,Key accelerator,int32_t index)->int64_t{return singleton->global_menu_add_check_item(menu_root,label,callback,key_callback,tag,accelerator,index);});
    js_singleton.add("global_menu_add_icon_item", [singleton](const String & menu_root,const Ref<Texture2D> & icon,const String & label,const Callable & callback,const Callable & key_callback,const Variant & tag,Key accelerator,int32_t index)->int64_t{return singleton->global_menu_add_icon_item(menu_root,icon,label,callback,key_callback,tag,accelerator,index);});
    js_singleton.add("global_menu_add_icon_check_item", [singleton](const String & menu_root,const Ref<Texture2D> & icon,const String & label,const Callable & callback,const Callable & key_callback,const Variant & tag,Key accelerator,int32_t index)->int64_t{return singleton->global_menu_add_icon_check_item(menu_root,icon,label,callback,key_callback,tag,accelerator,index);});
    js_singleton.add("global_menu_add_radio_check_item", [singleton](const String & menu_root,const String & label,const Callable & callback,const Callable & key_callback,const Variant & tag,Key accelerator,int32_t index)->int64_t{return singleton->global_menu_add_radio_check_item(menu_root,label,callback,key_callback,tag,accelerator,index);});
    js_singleton.add("global_menu_add_icon_radio_check_item", [singleton](const String & menu_root,const Ref<Texture2D> & icon,const String & label,const Callable & callback,const Callable & key_callback,const Variant & tag,Key accelerator,int32_t index)->int64_t{return singleton->global_menu_add_icon_radio_check_item(menu_root,icon,label,callback,key_callback,tag,accelerator,index);});
    js_singleton.add("global_menu_add_multistate_item", [singleton](const String & menu_root,const String & label,int32_t max_states,int32_t default_state,const Callable & callback,const Callable & key_callback,const Variant & tag,Key accelerator,int32_t index)->int64_t{return singleton->global_menu_add_multistate_item(menu_root,label,max_states,default_state,callback,key_callback,tag,accelerator,index);});
    js_singleton.add("global_menu_add_separator", [singleton](const String & menu_root,int32_t index)->int64_t{return singleton->global_menu_add_separator(menu_root,index);});
    js_singleton.add("global_menu_get_item_index_from_text", [singleton](const String & menu_root,const String & text)->int64_t{return singleton->global_menu_get_item_index_from_text(menu_root,text);});
    js_singleton.add("global_menu_get_item_index_from_tag", [singleton](const String & menu_root,const Variant & tag)->int64_t{return singleton->global_menu_get_item_index_from_tag(menu_root,tag);});
    js_singleton.add("global_menu_is_item_checked", [singleton](const String & menu_root,int32_t idx)->bool{return singleton->global_menu_is_item_checked(menu_root,idx);});
    js_singleton.add("global_menu_is_item_checkable", [singleton](const String & menu_root,int32_t idx)->bool{return singleton->global_menu_is_item_checkable(menu_root,idx);});
    js_singleton.add("global_menu_is_item_radio_checkable", [singleton](const String & menu_root,int32_t idx)->bool{return singleton->global_menu_is_item_radio_checkable(menu_root,idx);});
    js_singleton.add("global_menu_get_item_callback", [singleton](const String & menu_root,int32_t idx)->Callable{return singleton->global_menu_get_item_callback(menu_root,idx);});
    js_singleton.add("global_menu_get_item_key_callback", [singleton](const String & menu_root,int32_t idx)->Callable{return singleton->global_menu_get_item_key_callback(menu_root,idx);});
    js_singleton.add("global_menu_get_item_tag", [singleton](const String & menu_root,int32_t idx)->Variant{return singleton->global_menu_get_item_tag(menu_root,idx);});
    js_singleton.add("global_menu_get_item_text", [singleton](const String & menu_root,int32_t idx)->String{return singleton->global_menu_get_item_text(menu_root,idx);});
    js_singleton.add("global_menu_get_item_submenu", [singleton](const String & menu_root,int32_t idx)->String{return singleton->global_menu_get_item_submenu(menu_root,idx);});
    js_singleton.add("global_menu_get_item_accelerator", [singleton](const String & menu_root,int32_t idx)->Key{return singleton->global_menu_get_item_accelerator(menu_root,idx);});
    js_singleton.add("global_menu_is_item_disabled", [singleton](const String & menu_root,int32_t idx)->bool{return singleton->global_menu_is_item_disabled(menu_root,idx);});
    js_singleton.add("global_menu_is_item_hidden", [singleton](const String & menu_root,int32_t idx)->bool{return singleton->global_menu_is_item_hidden(menu_root,idx);});
    js_singleton.add("global_menu_get_item_tooltip", [singleton](const String & menu_root,int32_t idx)->String{return singleton->global_menu_get_item_tooltip(menu_root,idx);});
    js_singleton.add("global_menu_get_item_state", [singleton](const String & menu_root,int32_t idx)->int64_t{return singleton->global_menu_get_item_state(menu_root,idx);});
    js_singleton.add("global_menu_get_item_max_states", [singleton](const String & menu_root,int32_t idx)->int64_t{return singleton->global_menu_get_item_max_states(menu_root,idx);});
    js_singleton.add("global_menu_get_item_icon", [singleton](const String & menu_root,int32_t idx)->Ref<Texture2D>{return singleton->global_menu_get_item_icon(menu_root,idx);});
    js_singleton.add("global_menu_get_item_indentation_level", [singleton](const String & menu_root,int32_t idx)->int64_t{return singleton->global_menu_get_item_indentation_level(menu_root,idx);});
    js_singleton.add("global_menu_set_item_checked", [singleton](const String & menu_root,int32_t idx,bool checked)->void{singleton->global_menu_set_item_checked(menu_root,idx,checked);});
    js_singleton.add("global_menu_set_item_checkable", [singleton](const String & menu_root,int32_t idx,bool checkable)->void{singleton->global_menu_set_item_checkable(menu_root,idx,checkable);});
    js_singleton.add("global_menu_set_item_radio_checkable", [singleton](const String & menu_root,int32_t idx,bool checkable)->void{singleton->global_menu_set_item_radio_checkable(menu_root,idx,checkable);});
    js_singleton.add("global_menu_set_item_callback", [singleton](const String & menu_root,int32_t idx,const Callable & callback)->void{singleton->global_menu_set_item_callback(menu_root,idx,callback);});
    js_singleton.add("global_menu_set_item_hover_callbacks", [singleton](const String & menu_root,int32_t idx,const Callable & callback)->void{singleton->global_menu_set_item_hover_callbacks(menu_root,idx,callback);});
    js_singleton.add("global_menu_set_item_key_callback", [singleton](const String & menu_root,int32_t idx,const Callable & key_callback)->void{singleton->global_menu_set_item_key_callback(menu_root,idx,key_callback);});
    js_singleton.add("global_menu_set_item_tag", [singleton](const String & menu_root,int32_t idx,const Variant & tag)->void{singleton->global_menu_set_item_tag(menu_root,idx,tag);});
    js_singleton.add("global_menu_set_item_text", [singleton](const String & menu_root,int32_t idx,const String & text)->void{singleton->global_menu_set_item_text(menu_root,idx,text);});
    js_singleton.add("global_menu_set_item_submenu", [singleton](const String & menu_root,int32_t idx,const String & submenu)->void{singleton->global_menu_set_item_submenu(menu_root,idx,submenu);});
    js_singleton.add("global_menu_set_item_accelerator", [singleton](const String & menu_root,int32_t idx,Key keycode)->void{singleton->global_menu_set_item_accelerator(menu_root,idx,keycode);});
    js_singleton.add("global_menu_set_item_disabled", [singleton](const String & menu_root,int32_t idx,bool disabled)->void{singleton->global_menu_set_item_disabled(menu_root,idx,disabled);});
    js_singleton.add("global_menu_set_item_hidden", [singleton](const String & menu_root,int32_t idx,bool hidden)->void{singleton->global_menu_set_item_hidden(menu_root,idx,hidden);});
    js_singleton.add("global_menu_set_item_tooltip", [singleton](const String & menu_root,int32_t idx,const String & tooltip)->void{singleton->global_menu_set_item_tooltip(menu_root,idx,tooltip);});
    js_singleton.add("global_menu_set_item_state", [singleton](const String & menu_root,int32_t idx,int32_t state)->void{singleton->global_menu_set_item_state(menu_root,idx,state);});
    js_singleton.add("global_menu_set_item_max_states", [singleton](const String & menu_root,int32_t idx,int32_t max_states)->void{singleton->global_menu_set_item_max_states(menu_root,idx,max_states);});
    js_singleton.add("global_menu_set_item_icon", [singleton](const String & menu_root,int32_t idx,const Ref<Texture2D> & icon)->void{singleton->global_menu_set_item_icon(menu_root,idx,icon);});
    js_singleton.add("global_menu_set_item_indentation_level", [singleton](const String & menu_root,int32_t idx,int32_t level)->void{singleton->global_menu_set_item_indentation_level(menu_root,idx,level);});
    js_singleton.add("global_menu_get_item_count", [singleton](const String & menu_root)->int64_t{return singleton->global_menu_get_item_count(menu_root);});
    js_singleton.add("global_menu_remove_item", [singleton](const String & menu_root,int32_t idx)->void{singleton->global_menu_remove_item(menu_root,idx);});
    js_singleton.add("global_menu_clear", [singleton](const String & menu_root)->void{singleton->global_menu_clear(menu_root);});
    js_singleton.add("global_menu_get_system_menu_roots", [singleton]()->Dictionary{return singleton->global_menu_get_system_menu_roots();});
    js_singleton.add("tts_is_speaking", [singleton]()->bool{return singleton->tts_is_speaking();});
    js_singleton.add("tts_is_paused", [singleton]()->bool{return singleton->tts_is_paused();});
    js_singleton.add("tts_get_voices", [singleton]()->TypedArray<Dictionary>{return singleton->tts_get_voices();});
    js_singleton.add("tts_get_voices_for_language", [singleton](const String & language)->PackedStringArray{return singleton->tts_get_voices_for_language(language);});
    js_singleton.add("tts_speak", [singleton](const String & text,const String & voice,int32_t volume,double pitch,double rate,int32_t utterance_id,bool interrupt)->void{singleton->tts_speak(text,voice,volume,pitch,rate,utterance_id,interrupt);});
    js_singleton.add("tts_pause", [singleton]()->void{singleton->tts_pause();});
    js_singleton.add("tts_resume", [singleton]()->void{singleton->tts_resume();});
    js_singleton.add("tts_stop", [singleton]()->void{singleton->tts_stop();});
    js_singleton.add("tts_set_utterance_callback", [singleton](DisplayServer::TTSUtteranceEvent event,const Callable & callable)->void{singleton->tts_set_utterance_callback(event,callable);});
    js_singleton.add("is_dark_mode_supported", [singleton]()->bool{return singleton->is_dark_mode_supported();});
    js_singleton.add("is_dark_mode", [singleton]()->bool{return singleton->is_dark_mode();});
    js_singleton.add("get_accent_color", [singleton]()->Color{return singleton->get_accent_color();});
    js_singleton.add("get_base_color", [singleton]()->Color{return singleton->get_base_color();});
    js_singleton.add("set_system_theme_change_callback", [singleton](const Callable & callable)->void{singleton->set_system_theme_change_callback(callable);});
    js_singleton.add("mouse_set_mode", [singleton](DisplayServer::MouseMode mouse_mode)->void{singleton->mouse_set_mode(mouse_mode);});
    js_singleton.add("mouse_get_mode", [singleton]()->DisplayServer::MouseMode{return singleton->mouse_get_mode();});
    js_singleton.add("warp_mouse", [singleton](const Vector2i & position)->void{singleton->warp_mouse(position);});
    js_singleton.add("mouse_get_position", [singleton]()->Vector2i{return singleton->mouse_get_position();});
    js_singleton.add("mouse_get_button_state", [singleton]()->BitField<MouseButtonMask>{return singleton->mouse_get_button_state();});
    js_singleton.add("clipboard_set", [singleton](const String & clipboard)->void{singleton->clipboard_set(clipboard);});
    js_singleton.add("clipboard_get", [singleton]()->String{return singleton->clipboard_get();});
    js_singleton.add("clipboard_get_image", [singleton]()->Ref<Image>{return singleton->clipboard_get_image();});
    js_singleton.add("clipboard_has", [singleton]()->bool{return singleton->clipboard_has();});
    js_singleton.add("clipboard_has_image", [singleton]()->bool{return singleton->clipboard_has_image();});
    js_singleton.add("clipboard_set_primary", [singleton](const String & clipboard_primary)->void{singleton->clipboard_set_primary(clipboard_primary);});
    js_singleton.add("clipboard_get_primary", [singleton]()->String{return singleton->clipboard_get_primary();});
    js_singleton.add("get_display_cutouts", [singleton]()->TypedArray<Rect2>{return singleton->get_display_cutouts();});
    js_singleton.add("get_display_safe_area", [singleton]()->Rect2i{return singleton->get_display_safe_area();});
    js_singleton.add("get_screen_count", [singleton]()->int64_t{return singleton->get_screen_count();});
    js_singleton.add("get_primary_screen", [singleton]()->int64_t{return singleton->get_primary_screen();});
    js_singleton.add("get_keyboard_focus_screen", [singleton]()->int64_t{return singleton->get_keyboard_focus_screen();});
    js_singleton.add("get_screen_from_rect", [singleton](const Rect2 & rect)->int64_t{return singleton->get_screen_from_rect(rect);});
    js_singleton.add("screen_get_position", [singleton](int32_t screen)->Vector2i{return singleton->screen_get_position(screen);});
    js_singleton.add("screen_get_size", [singleton](int32_t screen)->Vector2i{return singleton->screen_get_size(screen);});
    js_singleton.add("screen_get_usable_rect", [singleton](int32_t screen)->Rect2i{return singleton->screen_get_usable_rect(screen);});
    js_singleton.add("screen_get_dpi", [singleton](int32_t screen)->int64_t{return singleton->screen_get_dpi(screen);});
    js_singleton.add("screen_get_scale", [singleton](int32_t screen)->double{return singleton->screen_get_scale(screen);});
    js_singleton.add("is_touchscreen_available", [singleton]()->bool{return singleton->is_touchscreen_available();});
    js_singleton.add("screen_get_max_scale", [singleton]()->double{return singleton->screen_get_max_scale();});
    js_singleton.add("screen_get_refresh_rate", [singleton](int32_t screen)->double{return singleton->screen_get_refresh_rate(screen);});
    js_singleton.add("screen_get_pixel", [singleton](const Vector2i & position)->Color{return singleton->screen_get_pixel(position);});
    js_singleton.add("screen_get_image", [singleton](int32_t screen)->Ref<Image>{return singleton->screen_get_image(screen);});
    js_singleton.add("screen_set_orientation", [singleton](DisplayServer::ScreenOrientation orientation,int32_t screen)->void{singleton->screen_set_orientation(orientation,screen);});
    js_singleton.add("screen_get_orientation", [singleton](int32_t screen)->DisplayServer::ScreenOrientation{return singleton->screen_get_orientation(screen);});
    js_singleton.add("screen_set_keep_on", [singleton](bool enable)->void{singleton->screen_set_keep_on(enable);});
    js_singleton.add("screen_is_kept_on", [singleton]()->bool{return singleton->screen_is_kept_on();});
    js_singleton.add("get_window_list", [singleton]()->PackedInt32Array{return singleton->get_window_list();});
    js_singleton.add("get_window_at_screen_position", [singleton](const Vector2i & position)->int64_t{return singleton->get_window_at_screen_position(position);});
    js_singleton.add("window_get_native_handle", [singleton](DisplayServer::HandleType handle_type,int32_t window_id)->int64_t{return singleton->window_get_native_handle(handle_type,window_id);});
    js_singleton.add("window_get_active_popup", [singleton]()->int64_t{return singleton->window_get_active_popup();});
    js_singleton.add("window_set_popup_safe_rect", [singleton](int32_t window,const Rect2i & rect)->void{singleton->window_set_popup_safe_rect(window,rect);});
    js_singleton.add("window_get_popup_safe_rect", [singleton](int32_t window)->Rect2i{return singleton->window_get_popup_safe_rect(window);});
    js_singleton.add("window_set_title", [singleton](const String & title,int32_t window_id)->void{singleton->window_set_title(title,window_id);});
    js_singleton.add("window_get_title_size", [singleton](const String & title,int32_t window_id)->Vector2i{return singleton->window_get_title_size(title,window_id);});
    js_singleton.add("window_set_mouse_passthrough", [singleton](const PackedVector2Array & region,int32_t window_id)->void{singleton->window_set_mouse_passthrough(region,window_id);});
    js_singleton.add("window_get_current_screen", [singleton](int32_t window_id)->int64_t{return singleton->window_get_current_screen(window_id);});
    js_singleton.add("window_set_current_screen", [singleton](int32_t screen,int32_t window_id)->void{singleton->window_set_current_screen(screen,window_id);});
    js_singleton.add("window_get_position", [singleton](int32_t window_id)->Vector2i{return singleton->window_get_position(window_id);});
    js_singleton.add("window_get_position_with_decorations", [singleton](int32_t window_id)->Vector2i{return singleton->window_get_position_with_decorations(window_id);});
    js_singleton.add("window_set_position", [singleton](const Vector2i & position,int32_t window_id)->void{singleton->window_set_position(position,window_id);});
    js_singleton.add("window_get_size", [singleton](int32_t window_id)->Vector2i{return singleton->window_get_size(window_id);});
    js_singleton.add("window_set_size", [singleton](const Vector2i & size,int32_t window_id)->void{singleton->window_set_size(size,window_id);});
    js_singleton.add("window_set_rect_changed_callback", [singleton](const Callable & callback,int32_t window_id)->void{singleton->window_set_rect_changed_callback(callback,window_id);});
    js_singleton.add("window_set_window_event_callback", [singleton](const Callable & callback,int32_t window_id)->void{singleton->window_set_window_event_callback(callback,window_id);});
    js_singleton.add("window_set_input_event_callback", [singleton](const Callable & callback,int32_t window_id)->void{singleton->window_set_input_event_callback(callback,window_id);});
    js_singleton.add("window_set_input_text_callback", [singleton](const Callable & callback,int32_t window_id)->void{singleton->window_set_input_text_callback(callback,window_id);});
    js_singleton.add("window_set_drop_files_callback", [singleton](const Callable & callback,int32_t window_id)->void{singleton->window_set_drop_files_callback(callback,window_id);});
    js_singleton.add("window_get_attached_instance_id", [singleton](int32_t window_id)->int64_t{return singleton->window_get_attached_instance_id(window_id);});
    js_singleton.add("window_get_max_size", [singleton](int32_t window_id)->Vector2i{return singleton->window_get_max_size(window_id);});
    js_singleton.add("window_set_max_size", [singleton](const Vector2i & max_size,int32_t window_id)->void{singleton->window_set_max_size(max_size,window_id);});
    js_singleton.add("window_get_min_size", [singleton](int32_t window_id)->Vector2i{return singleton->window_get_min_size(window_id);});
    js_singleton.add("window_set_min_size", [singleton](const Vector2i & min_size,int32_t window_id)->void{singleton->window_set_min_size(min_size,window_id);});
    js_singleton.add("window_get_size_with_decorations", [singleton](int32_t window_id)->Vector2i{return singleton->window_get_size_with_decorations(window_id);});
    js_singleton.add("window_get_mode", [singleton](int32_t window_id)->DisplayServer::WindowMode{return singleton->window_get_mode(window_id);});
    js_singleton.add("window_set_mode", [singleton](DisplayServer::WindowMode mode,int32_t window_id)->void{singleton->window_set_mode(mode,window_id);});
    js_singleton.add("window_set_flag", [singleton](DisplayServer::WindowFlags flag,bool enabled,int32_t window_id)->void{singleton->window_set_flag(flag,enabled,window_id);});
    js_singleton.add("window_get_flag", [singleton](DisplayServer::WindowFlags flag,int32_t window_id)->bool{return singleton->window_get_flag(flag,window_id);});
    js_singleton.add("window_set_window_buttons_offset", [singleton](const Vector2i & offset,int32_t window_id)->void{singleton->window_set_window_buttons_offset(offset,window_id);});
    js_singleton.add("window_get_safe_title_margins", [singleton](int32_t window_id)->Vector3i{return singleton->window_get_safe_title_margins(window_id);});
    js_singleton.add("window_request_attention", [singleton](int32_t window_id)->void{singleton->window_request_attention(window_id);});
    js_singleton.add("window_move_to_foreground", [singleton](int32_t window_id)->void{singleton->window_move_to_foreground(window_id);});
    js_singleton.add("window_is_focused", [singleton](int32_t window_id)->bool{return singleton->window_is_focused(window_id);});
    js_singleton.add("window_can_draw", [singleton](int32_t window_id)->bool{return singleton->window_can_draw(window_id);});
    js_singleton.add("window_set_transient", [singleton](int32_t window_id,int32_t parent_window_id)->void{singleton->window_set_transient(window_id,parent_window_id);});
    js_singleton.add("window_set_exclusive", [singleton](int32_t window_id,bool exclusive)->void{singleton->window_set_exclusive(window_id,exclusive);});
    js_singleton.add("window_set_ime_active", [singleton](bool active,int32_t window_id)->void{singleton->window_set_ime_active(active,window_id);});
    js_singleton.add("window_set_ime_position", [singleton](const Vector2i & position,int32_t window_id)->void{singleton->window_set_ime_position(position,window_id);});
    js_singleton.add("window_set_vsync_mode", [singleton](DisplayServer::VSyncMode vsync_mode,int32_t window_id)->void{singleton->window_set_vsync_mode(vsync_mode,window_id);});
    js_singleton.add("window_get_vsync_mode", [singleton](int32_t window_id)->DisplayServer::VSyncMode{return singleton->window_get_vsync_mode(window_id);});
    js_singleton.add("window_is_maximize_allowed", [singleton](int32_t window_id)->bool{return singleton->window_is_maximize_allowed(window_id);});
    js_singleton.add("window_maximize_on_title_dbl_click", [singleton]()->bool{return singleton->window_maximize_on_title_dbl_click();});
    js_singleton.add("window_minimize_on_title_dbl_click", [singleton]()->bool{return singleton->window_minimize_on_title_dbl_click();});
    js_singleton.add("ime_get_selection", [singleton]()->Vector2i{return singleton->ime_get_selection();});
    js_singleton.add("ime_get_text", [singleton]()->String{return singleton->ime_get_text();});
    js_singleton.add("virtual_keyboard_show", [singleton](const String & existing_text,const Rect2 & position,DisplayServer::VirtualKeyboardType type,int32_t max_length,int32_t cursor_start,int32_t cursor_end)->void{singleton->virtual_keyboard_show(existing_text,position,type,max_length,cursor_start,cursor_end);});
    js_singleton.add("virtual_keyboard_hide", [singleton]()->void{singleton->virtual_keyboard_hide();});
    js_singleton.add("virtual_keyboard_get_height", [singleton]()->int64_t{return singleton->virtual_keyboard_get_height();});
    js_singleton.add("cursor_set_shape", [singleton](DisplayServer::CursorShape shape)->void{singleton->cursor_set_shape(shape);});
    js_singleton.add("cursor_get_shape", [singleton]()->DisplayServer::CursorShape{return singleton->cursor_get_shape();});
    js_singleton.add("cursor_set_custom_image", [singleton](const Ref<Resource> & cursor,DisplayServer::CursorShape shape,const Vector2 & hotspot)->void{singleton->cursor_set_custom_image(cursor,shape,hotspot);});
    js_singleton.add("get_swap_cancel_ok", [singleton]()->bool{return singleton->get_swap_cancel_ok();});
    js_singleton.add("enable_for_stealing_focus", [singleton](int64_t process_id)->void{singleton->enable_for_stealing_focus(process_id);});
    js_singleton.add("dialog_show", [singleton](const String & title,const String & description,const PackedStringArray & buttons,const Callable & callback)->Error{return singleton->dialog_show(title,description,buttons,callback);});
    js_singleton.add("dialog_input_text", [singleton](const String & title,const String & description,const String & existing_text,const Callable & callback)->Error{return singleton->dialog_input_text(title,description,existing_text,callback);});
    js_singleton.add("file_dialog_show", [singleton](const String & title,const String & current_directory,const String & filename,bool show_hidden,DisplayServer::FileDialogMode mode,const PackedStringArray & filters,const Callable & callback)->Error{return singleton->file_dialog_show(title,current_directory,filename,show_hidden,mode,filters,callback);});
    js_singleton.add("file_dialog_with_options_show", [singleton](const String & title,const String & current_directory,const String & root,const String & filename,bool show_hidden,DisplayServer::FileDialogMode mode,const PackedStringArray & filters,const TypedArray<Dictionary> & options,const Callable & callback)->Error{return singleton->file_dialog_with_options_show(title,current_directory,root,filename,show_hidden,mode,filters,options,callback);});
    js_singleton.add("keyboard_get_layout_count", [singleton]()->int64_t{return singleton->keyboard_get_layout_count();});
    js_singleton.add("keyboard_get_current_layout", [singleton]()->int64_t{return singleton->keyboard_get_current_layout();});
    js_singleton.add("keyboard_set_current_layout", [singleton](int32_t index)->void{singleton->keyboard_set_current_layout(index);});
    js_singleton.add("keyboard_get_layout_language", [singleton](int32_t index)->String{return singleton->keyboard_get_layout_language(index);});
    js_singleton.add("keyboard_get_layout_name", [singleton](int32_t index)->String{return singleton->keyboard_get_layout_name(index);});
    js_singleton.add("keyboard_get_keycode_from_physical", [singleton](Key keycode)->Key{return singleton->keyboard_get_keycode_from_physical(keycode);});
    js_singleton.add("keyboard_get_label_from_physical", [singleton](Key keycode)->Key{return singleton->keyboard_get_label_from_physical(keycode);});
    js_singleton.add("process_events", [singleton]()->void{singleton->process_events();});
    js_singleton.add("force_process_and_drop_events", [singleton]()->void{singleton->force_process_and_drop_events();});
    js_singleton.add("set_native_icon", [singleton](const String & filename)->void{singleton->set_native_icon(filename);});
    js_singleton.add("set_icon", [singleton](const Ref<Image> & image)->void{singleton->set_icon(image);});
    js_singleton.add("create_status_indicator", [singleton](const Ref<Texture2D> & icon,const String & tooltip,const Callable & callback)->int64_t{return singleton->create_status_indicator(icon,tooltip,callback);});
    js_singleton.add("status_indicator_set_icon", [singleton](int32_t id,const Ref<Texture2D> & icon)->void{singleton->status_indicator_set_icon(id,icon);});
    js_singleton.add("status_indicator_set_tooltip", [singleton](int32_t id,const String & tooltip)->void{singleton->status_indicator_set_tooltip(id,tooltip);});
    js_singleton.add("status_indicator_set_menu", [singleton](int32_t id,const RID & menu_rid)->void{singleton->status_indicator_set_menu(id,menu_rid);});
    js_singleton.add("status_indicator_set_callback", [singleton](int32_t id,const Callable & callback)->void{singleton->status_indicator_set_callback(id,callback);});
    js_singleton.add("status_indicator_get_rect", [singleton](int32_t id)->Rect2{return singleton->status_indicator_get_rect(id);});
    js_singleton.add("delete_status_indicator", [singleton](int32_t id)->void{singleton->delete_status_indicator(id);});
    js_singleton.add("tablet_get_driver_count", [singleton]()->int64_t{return singleton->tablet_get_driver_count();});
    js_singleton.add("tablet_get_driver_name", [singleton](int32_t idx)->String{return singleton->tablet_get_driver_name(idx);});
    js_singleton.add("tablet_get_current_driver", [singleton]()->String{return singleton->tablet_get_current_driver();});
    js_singleton.add("tablet_set_current_driver", [singleton](const String & name)->void{singleton->tablet_set_current_driver(name);});
    js_singleton.add("is_window_transparency_available", [singleton]()->bool{return singleton->is_window_transparency_available();});
    context->global()["DisplayServer"] = js_singleton;

    qjs::Value _Feature = context->newObject();
    _Feature["FEATURE_GLOBAL_MENU"] = DisplayServer::Feature::FEATURE_GLOBAL_MENU;
    _Feature["FEATURE_SUBWINDOWS"] = DisplayServer::Feature::FEATURE_SUBWINDOWS;
    _Feature["FEATURE_TOUCHSCREEN"] = DisplayServer::Feature::FEATURE_TOUCHSCREEN;
    _Feature["FEATURE_MOUSE"] = DisplayServer::Feature::FEATURE_MOUSE;
    _Feature["FEATURE_MOUSE_WARP"] = DisplayServer::Feature::FEATURE_MOUSE_WARP;
    _Feature["FEATURE_CLIPBOARD"] = DisplayServer::Feature::FEATURE_CLIPBOARD;
    _Feature["FEATURE_VIRTUAL_KEYBOARD"] = DisplayServer::Feature::FEATURE_VIRTUAL_KEYBOARD;
    _Feature["FEATURE_CURSOR_SHAPE"] = DisplayServer::Feature::FEATURE_CURSOR_SHAPE;
    _Feature["FEATURE_CUSTOM_CURSOR_SHAPE"] = DisplayServer::Feature::FEATURE_CUSTOM_CURSOR_SHAPE;
    _Feature["FEATURE_NATIVE_DIALOG"] = DisplayServer::Feature::FEATURE_NATIVE_DIALOG;
    _Feature["FEATURE_IME"] = DisplayServer::Feature::FEATURE_IME;
    _Feature["FEATURE_WINDOW_TRANSPARENCY"] = DisplayServer::Feature::FEATURE_WINDOW_TRANSPARENCY;
    _Feature["FEATURE_HIDPI"] = DisplayServer::Feature::FEATURE_HIDPI;
    _Feature["FEATURE_ICON"] = DisplayServer::Feature::FEATURE_ICON;
    _Feature["FEATURE_NATIVE_ICON"] = DisplayServer::Feature::FEATURE_NATIVE_ICON;
    _Feature["FEATURE_ORIENTATION"] = DisplayServer::Feature::FEATURE_ORIENTATION;
    _Feature["FEATURE_SWAP_BUFFERS"] = DisplayServer::Feature::FEATURE_SWAP_BUFFERS;
    _Feature["FEATURE_CLIPBOARD_PRIMARY"] = DisplayServer::Feature::FEATURE_CLIPBOARD_PRIMARY;
    _Feature["FEATURE_TEXT_TO_SPEECH"] = DisplayServer::Feature::FEATURE_TEXT_TO_SPEECH;
    _Feature["FEATURE_EXTEND_TO_TITLE"] = DisplayServer::Feature::FEATURE_EXTEND_TO_TITLE;
    _Feature["FEATURE_SCREEN_CAPTURE"] = DisplayServer::Feature::FEATURE_SCREEN_CAPTURE;
    _Feature["FEATURE_STATUS_INDICATOR"] = DisplayServer::Feature::FEATURE_STATUS_INDICATOR;
    _Feature["FEATURE_NATIVE_HELP"] = DisplayServer::Feature::FEATURE_NATIVE_HELP;
    _Feature["FEATURE_NATIVE_DIALOG_INPUT"] = DisplayServer::Feature::FEATURE_NATIVE_DIALOG_INPUT;
    _Feature["FEATURE_NATIVE_DIALOG_FILE"] = DisplayServer::Feature::FEATURE_NATIVE_DIALOG_FILE;
    js_singleton["Feature"] = _Feature;
    qjs::Value _MouseMode = context->newObject();
    _MouseMode["MOUSE_MODE_VISIBLE"] = DisplayServer::MouseMode::MOUSE_MODE_VISIBLE;
    _MouseMode["MOUSE_MODE_HIDDEN"] = DisplayServer::MouseMode::MOUSE_MODE_HIDDEN;
    _MouseMode["MOUSE_MODE_CAPTURED"] = DisplayServer::MouseMode::MOUSE_MODE_CAPTURED;
    _MouseMode["MOUSE_MODE_CONFINED"] = DisplayServer::MouseMode::MOUSE_MODE_CONFINED;
    _MouseMode["MOUSE_MODE_CONFINED_HIDDEN"] = DisplayServer::MouseMode::MOUSE_MODE_CONFINED_HIDDEN;
    js_singleton["MouseMode"] = _MouseMode;
    qjs::Value _ScreenOrientation = context->newObject();
    _ScreenOrientation["SCREEN_LANDSCAPE"] = DisplayServer::ScreenOrientation::SCREEN_LANDSCAPE;
    _ScreenOrientation["SCREEN_PORTRAIT"] = DisplayServer::ScreenOrientation::SCREEN_PORTRAIT;
    _ScreenOrientation["SCREEN_REVERSE_LANDSCAPE"] = DisplayServer::ScreenOrientation::SCREEN_REVERSE_LANDSCAPE;
    _ScreenOrientation["SCREEN_REVERSE_PORTRAIT"] = DisplayServer::ScreenOrientation::SCREEN_REVERSE_PORTRAIT;
    _ScreenOrientation["SCREEN_SENSOR_LANDSCAPE"] = DisplayServer::ScreenOrientation::SCREEN_SENSOR_LANDSCAPE;
    _ScreenOrientation["SCREEN_SENSOR_PORTRAIT"] = DisplayServer::ScreenOrientation::SCREEN_SENSOR_PORTRAIT;
    _ScreenOrientation["SCREEN_SENSOR"] = DisplayServer::ScreenOrientation::SCREEN_SENSOR;
    js_singleton["ScreenOrientation"] = _ScreenOrientation;
    qjs::Value _VirtualKeyboardType = context->newObject();
    _VirtualKeyboardType["KEYBOARD_TYPE_DEFAULT"] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_DEFAULT;
    _VirtualKeyboardType["KEYBOARD_TYPE_MULTILINE"] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_MULTILINE;
    _VirtualKeyboardType["KEYBOARD_TYPE_NUMBER"] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_NUMBER;
    _VirtualKeyboardType["KEYBOARD_TYPE_NUMBER_DECIMAL"] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_NUMBER_DECIMAL;
    _VirtualKeyboardType["KEYBOARD_TYPE_PHONE"] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_PHONE;
    _VirtualKeyboardType["KEYBOARD_TYPE_EMAIL_ADDRESS"] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_EMAIL_ADDRESS;
    _VirtualKeyboardType["KEYBOARD_TYPE_PASSWORD"] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_PASSWORD;
    _VirtualKeyboardType["KEYBOARD_TYPE_URL"] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_URL;
    js_singleton["VirtualKeyboardType"] = _VirtualKeyboardType;
    qjs::Value _CursorShape = context->newObject();
    _CursorShape["CURSOR_ARROW"] = DisplayServer::CursorShape::CURSOR_ARROW;
    _CursorShape["CURSOR_IBEAM"] = DisplayServer::CursorShape::CURSOR_IBEAM;
    _CursorShape["CURSOR_POINTING_HAND"] = DisplayServer::CursorShape::CURSOR_POINTING_HAND;
    _CursorShape["CURSOR_CROSS"] = DisplayServer::CursorShape::CURSOR_CROSS;
    _CursorShape["CURSOR_WAIT"] = DisplayServer::CursorShape::CURSOR_WAIT;
    _CursorShape["CURSOR_BUSY"] = DisplayServer::CursorShape::CURSOR_BUSY;
    _CursorShape["CURSOR_DRAG"] = DisplayServer::CursorShape::CURSOR_DRAG;
    _CursorShape["CURSOR_CAN_DROP"] = DisplayServer::CursorShape::CURSOR_CAN_DROP;
    _CursorShape["CURSOR_FORBIDDEN"] = DisplayServer::CursorShape::CURSOR_FORBIDDEN;
    _CursorShape["CURSOR_VSIZE"] = DisplayServer::CursorShape::CURSOR_VSIZE;
    _CursorShape["CURSOR_HSIZE"] = DisplayServer::CursorShape::CURSOR_HSIZE;
    _CursorShape["CURSOR_BDIAGSIZE"] = DisplayServer::CursorShape::CURSOR_BDIAGSIZE;
    _CursorShape["CURSOR_FDIAGSIZE"] = DisplayServer::CursorShape::CURSOR_FDIAGSIZE;
    _CursorShape["CURSOR_MOVE"] = DisplayServer::CursorShape::CURSOR_MOVE;
    _CursorShape["CURSOR_VSPLIT"] = DisplayServer::CursorShape::CURSOR_VSPLIT;
    _CursorShape["CURSOR_HSPLIT"] = DisplayServer::CursorShape::CURSOR_HSPLIT;
    _CursorShape["CURSOR_HELP"] = DisplayServer::CursorShape::CURSOR_HELP;
    _CursorShape["CURSOR_MAX"] = DisplayServer::CursorShape::CURSOR_MAX;
    js_singleton["CursorShape"] = _CursorShape;
    qjs::Value _FileDialogMode = context->newObject();
    _FileDialogMode["FILE_DIALOG_MODE_OPEN_FILE"] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_OPEN_FILE;
    _FileDialogMode["FILE_DIALOG_MODE_OPEN_FILES"] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_OPEN_FILES;
    _FileDialogMode["FILE_DIALOG_MODE_OPEN_DIR"] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_OPEN_DIR;
    _FileDialogMode["FILE_DIALOG_MODE_OPEN_ANY"] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_OPEN_ANY;
    _FileDialogMode["FILE_DIALOG_MODE_SAVE_FILE"] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_SAVE_FILE;
    js_singleton["FileDialogMode"] = _FileDialogMode;
    qjs::Value _WindowMode = context->newObject();
    _WindowMode["WINDOW_MODE_WINDOWED"] = DisplayServer::WindowMode::WINDOW_MODE_WINDOWED;
    _WindowMode["WINDOW_MODE_MINIMIZED"] = DisplayServer::WindowMode::WINDOW_MODE_MINIMIZED;
    _WindowMode["WINDOW_MODE_MAXIMIZED"] = DisplayServer::WindowMode::WINDOW_MODE_MAXIMIZED;
    _WindowMode["WINDOW_MODE_FULLSCREEN"] = DisplayServer::WindowMode::WINDOW_MODE_FULLSCREEN;
    _WindowMode["WINDOW_MODE_EXCLUSIVE_FULLSCREEN"] = DisplayServer::WindowMode::WINDOW_MODE_EXCLUSIVE_FULLSCREEN;
    js_singleton["WindowMode"] = _WindowMode;
    qjs::Value _WindowFlags = context->newObject();
    _WindowFlags["WINDOW_FLAG_RESIZE_DISABLED"] = DisplayServer::WindowFlags::WINDOW_FLAG_RESIZE_DISABLED;
    _WindowFlags["WINDOW_FLAG_BORDERLESS"] = DisplayServer::WindowFlags::WINDOW_FLAG_BORDERLESS;
    _WindowFlags["WINDOW_FLAG_ALWAYS_ON_TOP"] = DisplayServer::WindowFlags::WINDOW_FLAG_ALWAYS_ON_TOP;
    _WindowFlags["WINDOW_FLAG_TRANSPARENT"] = DisplayServer::WindowFlags::WINDOW_FLAG_TRANSPARENT;
    _WindowFlags["WINDOW_FLAG_NO_FOCUS"] = DisplayServer::WindowFlags::WINDOW_FLAG_NO_FOCUS;
    _WindowFlags["WINDOW_FLAG_POPUP"] = DisplayServer::WindowFlags::WINDOW_FLAG_POPUP;
    _WindowFlags["WINDOW_FLAG_EXTEND_TO_TITLE"] = DisplayServer::WindowFlags::WINDOW_FLAG_EXTEND_TO_TITLE;
    _WindowFlags["WINDOW_FLAG_MOUSE_PASSTHROUGH"] = DisplayServer::WindowFlags::WINDOW_FLAG_MOUSE_PASSTHROUGH;
    _WindowFlags["WINDOW_FLAG_MAX"] = DisplayServer::WindowFlags::WINDOW_FLAG_MAX;
    js_singleton["WindowFlags"] = _WindowFlags;
    qjs::Value _WindowEvent = context->newObject();
    _WindowEvent["WINDOW_EVENT_MOUSE_ENTER"] = DisplayServer::WindowEvent::WINDOW_EVENT_MOUSE_ENTER;
    _WindowEvent["WINDOW_EVENT_MOUSE_EXIT"] = DisplayServer::WindowEvent::WINDOW_EVENT_MOUSE_EXIT;
    _WindowEvent["WINDOW_EVENT_FOCUS_IN"] = DisplayServer::WindowEvent::WINDOW_EVENT_FOCUS_IN;
    _WindowEvent["WINDOW_EVENT_FOCUS_OUT"] = DisplayServer::WindowEvent::WINDOW_EVENT_FOCUS_OUT;
    _WindowEvent["WINDOW_EVENT_CLOSE_REQUEST"] = DisplayServer::WindowEvent::WINDOW_EVENT_CLOSE_REQUEST;
    _WindowEvent["WINDOW_EVENT_GO_BACK_REQUEST"] = DisplayServer::WindowEvent::WINDOW_EVENT_GO_BACK_REQUEST;
    _WindowEvent["WINDOW_EVENT_DPI_CHANGE"] = DisplayServer::WindowEvent::WINDOW_EVENT_DPI_CHANGE;
    _WindowEvent["WINDOW_EVENT_TITLEBAR_CHANGE"] = DisplayServer::WindowEvent::WINDOW_EVENT_TITLEBAR_CHANGE;
    js_singleton["WindowEvent"] = _WindowEvent;
    qjs::Value _VSyncMode = context->newObject();
    _VSyncMode["VSYNC_DISABLED"] = DisplayServer::VSyncMode::VSYNC_DISABLED;
    _VSyncMode["VSYNC_ENABLED"] = DisplayServer::VSyncMode::VSYNC_ENABLED;
    _VSyncMode["VSYNC_ADAPTIVE"] = DisplayServer::VSyncMode::VSYNC_ADAPTIVE;
    _VSyncMode["VSYNC_MAILBOX"] = DisplayServer::VSyncMode::VSYNC_MAILBOX;
    js_singleton["VSyncMode"] = _VSyncMode;
    qjs::Value _HandleType = context->newObject();
    _HandleType["DISPLAY_HANDLE"] = DisplayServer::HandleType::DISPLAY_HANDLE;
    _HandleType["WINDOW_HANDLE"] = DisplayServer::HandleType::WINDOW_HANDLE;
    _HandleType["WINDOW_VIEW"] = DisplayServer::HandleType::WINDOW_VIEW;
    _HandleType["OPENGL_CONTEXT"] = DisplayServer::HandleType::OPENGL_CONTEXT;
    js_singleton["HandleType"] = _HandleType;
    qjs::Value _TTSUtteranceEvent = context->newObject();
    _TTSUtteranceEvent["TTS_UTTERANCE_STARTED"] = DisplayServer::TTSUtteranceEvent::TTS_UTTERANCE_STARTED;
    _TTSUtteranceEvent["TTS_UTTERANCE_ENDED"] = DisplayServer::TTSUtteranceEvent::TTS_UTTERANCE_ENDED;
    _TTSUtteranceEvent["TTS_UTTERANCE_CANCELED"] = DisplayServer::TTSUtteranceEvent::TTS_UTTERANCE_CANCELED;
    _TTSUtteranceEvent["TTS_UTTERANCE_BOUNDARY"] = DisplayServer::TTSUtteranceEvent::TTS_UTTERANCE_BOUNDARY;
    js_singleton["TTSUtteranceEvent"] = _TTSUtteranceEvent;
}