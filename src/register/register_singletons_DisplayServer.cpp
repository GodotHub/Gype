
#include <godot_cpp/classes/display_server.hpp>
#include <godot_cpp/classes/global_constants.hpp>
#include <godot_cpp/classes/image.hpp>
#include <godot_cpp/classes/ref.hpp>
#include <godot_cpp/classes/resource.hpp>
#include <godot_cpp/classes/texture2d.hpp>
#include <godot_cpp/core/type_info.hpp>
#include <godot_cpp/variant/callable.hpp>
#include <godot_cpp/variant/color.hpp>
#include <godot_cpp/variant/dictionary.hpp>
#include <godot_cpp/variant/packed_int32_array.hpp>
#include <godot_cpp/variant/packed_string_array.hpp>
#include <godot_cpp/variant/packed_vector2_array.hpp>
#include <godot_cpp/variant/rect2.hpp>
#include <godot_cpp/variant/rect2i.hpp>
#include <godot_cpp/variant/rid.hpp>
#include <godot_cpp/variant/string.hpp>
#include <godot_cpp/variant/typed_array.hpp>
#include <godot_cpp/variant/variant.hpp>
#include <godot_cpp/variant/vector2.hpp>
#include <godot_cpp/variant/vector2i.hpp>
#include <godot_cpp/variant/vector3i.hpp>
#include <string>

#include "qjspp.hpp"
#include "qjspp/utils.h"
#include "register/register_classes.h"

using namespace godot;

void register_singletons_DisplayServer() {
	qjs::Value js_singleton = context->newObject();
	DisplayServer *singleton = DisplayServer::get_singleton();
	js_singleton.add((new std::string("has_feature"))->c_str(), [singleton](DisplayServer::Feature feature) -> bool { return singleton->has_feature(feature); });
	js_singleton.add((new std::string("get_name"))->c_str(), [singleton]() -> String { return singleton->get_name(); });
	js_singleton.add((new std::string("help_set_search_callbacks"))->c_str(), [singleton](const Callable &search_callback, const Callable &action_callback) -> void { singleton->help_set_search_callbacks(search_callback, action_callback); });
	js_singleton.add((new std::string("global_menu_set_popup_callbacks"))->c_str(), [singleton](const String &menu_root, const Callable &open_callback, const Callable &close_callback) -> void { singleton->global_menu_set_popup_callbacks(menu_root, open_callback, close_callback); });
	js_singleton.add((new std::string("global_menu_add_submenu_item"))->c_str(), [singleton](const String &menu_root, const String &label, const String &submenu, int32_t index) -> int64_t { return singleton->global_menu_add_submenu_item(menu_root, label, submenu, index); });
	js_singleton.add((new std::string("global_menu_add_item"))->c_str(), [singleton](const String &menu_root, const String &label, const Callable &callback, const Callable &key_callback, const Variant &tag, Key accelerator, int32_t index) -> int64_t { return singleton->global_menu_add_item(menu_root, label, callback, key_callback, tag, accelerator, index); });
	js_singleton.add((new std::string("global_menu_add_check_item"))->c_str(), [singleton](const String &menu_root, const String &label, const Callable &callback, const Callable &key_callback, const Variant &tag, Key accelerator, int32_t index) -> int64_t { return singleton->global_menu_add_check_item(menu_root, label, callback, key_callback, tag, accelerator, index); });
	js_singleton.add((new std::string("global_menu_add_icon_item"))->c_str(), [singleton](const String &menu_root, const Ref<Texture2D> &icon, const String &label, const Callable &callback, const Callable &key_callback, const Variant &tag, Key accelerator, int32_t index) -> int64_t { return singleton->global_menu_add_icon_item(menu_root, icon, label, callback, key_callback, tag, accelerator, index); });
	js_singleton.add((new std::string("global_menu_add_icon_check_item"))->c_str(), [singleton](const String &menu_root, const Ref<Texture2D> &icon, const String &label, const Callable &callback, const Callable &key_callback, const Variant &tag, Key accelerator, int32_t index) -> int64_t { return singleton->global_menu_add_icon_check_item(menu_root, icon, label, callback, key_callback, tag, accelerator, index); });
	js_singleton.add((new std::string("global_menu_add_radio_check_item"))->c_str(), [singleton](const String &menu_root, const String &label, const Callable &callback, const Callable &key_callback, const Variant &tag, Key accelerator, int32_t index) -> int64_t { return singleton->global_menu_add_radio_check_item(menu_root, label, callback, key_callback, tag, accelerator, index); });
	js_singleton.add((new std::string("global_menu_add_icon_radio_check_item"))->c_str(), [singleton](const String &menu_root, const Ref<Texture2D> &icon, const String &label, const Callable &callback, const Callable &key_callback, const Variant &tag, Key accelerator, int32_t index) -> int64_t { return singleton->global_menu_add_icon_radio_check_item(menu_root, icon, label, callback, key_callback, tag, accelerator, index); });
	js_singleton.add((new std::string("global_menu_add_multistate_item"))->c_str(), [singleton](const String &menu_root, const String &label, int32_t max_states, int32_t default_state, const Callable &callback, const Callable &key_callback, const Variant &tag, Key accelerator, int32_t index) -> int64_t { return singleton->global_menu_add_multistate_item(menu_root, label, max_states, default_state, callback, key_callback, tag, accelerator, index); });
	js_singleton.add((new std::string("global_menu_add_separator"))->c_str(), [singleton](const String &menu_root, int32_t index) -> int64_t { return singleton->global_menu_add_separator(menu_root, index); });
	js_singleton.add((new std::string("global_menu_get_item_index_from_text"))->c_str(), [singleton](const String &menu_root, const String &text) -> int64_t { return singleton->global_menu_get_item_index_from_text(menu_root, text); });
	js_singleton.add((new std::string("global_menu_get_item_index_from_tag"))->c_str(), [singleton](const String &menu_root, const Variant &tag) -> int64_t { return singleton->global_menu_get_item_index_from_tag(menu_root, tag); });
	js_singleton.add((new std::string("global_menu_is_item_checked"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> bool { return singleton->global_menu_is_item_checked(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_is_item_checkable"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> bool { return singleton->global_menu_is_item_checkable(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_is_item_radio_checkable"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> bool { return singleton->global_menu_is_item_radio_checkable(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_callback"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> Callable { return singleton->global_menu_get_item_callback(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_key_callback"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> Callable { return singleton->global_menu_get_item_key_callback(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_tag"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> Variant { return singleton->global_menu_get_item_tag(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_text"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> String { return singleton->global_menu_get_item_text(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_submenu"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> String { return singleton->global_menu_get_item_submenu(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_accelerator"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> Key { return singleton->global_menu_get_item_accelerator(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_is_item_disabled"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> bool { return singleton->global_menu_is_item_disabled(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_is_item_hidden"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> bool { return singleton->global_menu_is_item_hidden(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_tooltip"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> String { return singleton->global_menu_get_item_tooltip(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_state"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> int64_t { return singleton->global_menu_get_item_state(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_max_states"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> int64_t { return singleton->global_menu_get_item_max_states(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_icon"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> Ref<Texture2D> { return singleton->global_menu_get_item_icon(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_get_item_indentation_level"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> int64_t { return singleton->global_menu_get_item_indentation_level(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_set_item_checked"))->c_str(), [singleton](const String &menu_root, int32_t idx, bool checked) -> void { singleton->global_menu_set_item_checked(menu_root, idx, checked); });
	js_singleton.add((new std::string("global_menu_set_item_checkable"))->c_str(), [singleton](const String &menu_root, int32_t idx, bool checkable) -> void { singleton->global_menu_set_item_checkable(menu_root, idx, checkable); });
	js_singleton.add((new std::string("global_menu_set_item_radio_checkable"))->c_str(), [singleton](const String &menu_root, int32_t idx, bool checkable) -> void { singleton->global_menu_set_item_radio_checkable(menu_root, idx, checkable); });
	js_singleton.add((new std::string("global_menu_set_item_callback"))->c_str(), [singleton](const String &menu_root, int32_t idx, const Callable &callback) -> void { singleton->global_menu_set_item_callback(menu_root, idx, callback); });
	js_singleton.add((new std::string("global_menu_set_item_hover_callbacks"))->c_str(), [singleton](const String &menu_root, int32_t idx, const Callable &callback) -> void { singleton->global_menu_set_item_hover_callbacks(menu_root, idx, callback); });
	js_singleton.add((new std::string("global_menu_set_item_key_callback"))->c_str(), [singleton](const String &menu_root, int32_t idx, const Callable &key_callback) -> void { singleton->global_menu_set_item_key_callback(menu_root, idx, key_callback); });
	js_singleton.add((new std::string("global_menu_set_item_tag"))->c_str(), [singleton](const String &menu_root, int32_t idx, const Variant &tag) -> void { singleton->global_menu_set_item_tag(menu_root, idx, tag); });
	js_singleton.add((new std::string("global_menu_set_item_text"))->c_str(), [singleton](const String &menu_root, int32_t idx, const String &text) -> void { singleton->global_menu_set_item_text(menu_root, idx, text); });
	js_singleton.add((new std::string("global_menu_set_item_submenu"))->c_str(), [singleton](const String &menu_root, int32_t idx, const String &submenu) -> void { singleton->global_menu_set_item_submenu(menu_root, idx, submenu); });
	js_singleton.add((new std::string("global_menu_set_item_accelerator"))->c_str(), [singleton](const String &menu_root, int32_t idx, Key keycode) -> void { singleton->global_menu_set_item_accelerator(menu_root, idx, keycode); });
	js_singleton.add((new std::string("global_menu_set_item_disabled"))->c_str(), [singleton](const String &menu_root, int32_t idx, bool disabled) -> void { singleton->global_menu_set_item_disabled(menu_root, idx, disabled); });
	js_singleton.add((new std::string("global_menu_set_item_hidden"))->c_str(), [singleton](const String &menu_root, int32_t idx, bool hidden) -> void { singleton->global_menu_set_item_hidden(menu_root, idx, hidden); });
	js_singleton.add((new std::string("global_menu_set_item_tooltip"))->c_str(), [singleton](const String &menu_root, int32_t idx, const String &tooltip) -> void { singleton->global_menu_set_item_tooltip(menu_root, idx, tooltip); });
	js_singleton.add((new std::string("global_menu_set_item_state"))->c_str(), [singleton](const String &menu_root, int32_t idx, int32_t state) -> void { singleton->global_menu_set_item_state(menu_root, idx, state); });
	js_singleton.add((new std::string("global_menu_set_item_max_states"))->c_str(), [singleton](const String &menu_root, int32_t idx, int32_t max_states) -> void { singleton->global_menu_set_item_max_states(menu_root, idx, max_states); });
	js_singleton.add((new std::string("global_menu_set_item_icon"))->c_str(), [singleton](const String &menu_root, int32_t idx, const Ref<Texture2D> &icon) -> void { singleton->global_menu_set_item_icon(menu_root, idx, icon); });
	js_singleton.add((new std::string("global_menu_set_item_indentation_level"))->c_str(), [singleton](const String &menu_root, int32_t idx, int32_t level) -> void { singleton->global_menu_set_item_indentation_level(menu_root, idx, level); });
	js_singleton.add((new std::string("global_menu_get_item_count"))->c_str(), [singleton](const String &menu_root) -> int64_t { return singleton->global_menu_get_item_count(menu_root); });
	js_singleton.add((new std::string("global_menu_remove_item"))->c_str(), [singleton](const String &menu_root, int32_t idx) -> void { singleton->global_menu_remove_item(menu_root, idx); });
	js_singleton.add((new std::string("global_menu_clear"))->c_str(), [singleton](const String &menu_root) -> void { singleton->global_menu_clear(menu_root); });
	js_singleton.add((new std::string("global_menu_get_system_menu_roots"))->c_str(), [singleton]() -> Dictionary { return singleton->global_menu_get_system_menu_roots(); });
	js_singleton.add((new std::string("tts_is_speaking"))->c_str(), [singleton]() -> bool { return singleton->tts_is_speaking(); });
	js_singleton.add((new std::string("tts_is_paused"))->c_str(), [singleton]() -> bool { return singleton->tts_is_paused(); });
	js_singleton.add((new std::string("tts_get_voices"))->c_str(), [singleton]() -> TypedArray<Dictionary> { return singleton->tts_get_voices(); });
	js_singleton.add((new std::string("tts_get_voices_for_language"))->c_str(), [singleton](const String &language) -> PackedStringArray { return singleton->tts_get_voices_for_language(language); });
	js_singleton.add((new std::string("tts_speak"))->c_str(), [singleton](const String &text, const String &voice, int32_t volume, double pitch, double rate, int32_t utterance_id, bool interrupt) -> void { singleton->tts_speak(text, voice, volume, pitch, rate, utterance_id, interrupt); });
	js_singleton.add((new std::string("tts_pause"))->c_str(), [singleton]() -> void { singleton->tts_pause(); });
	js_singleton.add((new std::string("tts_resume"))->c_str(), [singleton]() -> void { singleton->tts_resume(); });
	js_singleton.add((new std::string("tts_stop"))->c_str(), [singleton]() -> void { singleton->tts_stop(); });
	js_singleton.add((new std::string("tts_set_utterance_callback"))->c_str(), [singleton](DisplayServer::TTSUtteranceEvent event, const Callable &callable) -> void { singleton->tts_set_utterance_callback(event, callable); });
	js_singleton.add((new std::string("is_dark_mode_supported"))->c_str(), [singleton]() -> bool { return singleton->is_dark_mode_supported(); });
	js_singleton.add((new std::string("is_dark_mode"))->c_str(), [singleton]() -> bool { return singleton->is_dark_mode(); });
	js_singleton.add((new std::string("get_accent_color"))->c_str(), [singleton]() -> Color { return singleton->get_accent_color(); });
	js_singleton.add((new std::string("get_base_color"))->c_str(), [singleton]() -> Color { return singleton->get_base_color(); });
	js_singleton.add((new std::string("set_system_theme_change_callback"))->c_str(), [singleton](const Callable &callable) -> void { singleton->set_system_theme_change_callback(callable); });
	js_singleton.add((new std::string("mouse_set_mode"))->c_str(), [singleton](DisplayServer::MouseMode mouse_mode) -> void { singleton->mouse_set_mode(mouse_mode); });
	js_singleton.add((new std::string("mouse_get_mode"))->c_str(), [singleton]() -> DisplayServer::MouseMode { return singleton->mouse_get_mode(); });
	js_singleton.add((new std::string("warp_mouse"))->c_str(), [singleton](const Vector2i &position) -> void { singleton->warp_mouse(position); });
	js_singleton.add((new std::string("mouse_get_position"))->c_str(), [singleton]() -> Vector2i { return singleton->mouse_get_position(); });
	js_singleton.add((new std::string("mouse_get_button_state"))->c_str(), [singleton]() -> BitField<MouseButtonMask> { return singleton->mouse_get_button_state(); });
	js_singleton.add((new std::string("clipboard_set"))->c_str(), [singleton](const String &clipboard) -> void { singleton->clipboard_set(clipboard); });
	js_singleton.add((new std::string("clipboard_get"))->c_str(), [singleton]() -> String { return singleton->clipboard_get(); });
	js_singleton.add((new std::string("clipboard_get_image"))->c_str(), [singleton]() -> Ref<Image> { return singleton->clipboard_get_image(); });
	js_singleton.add((new std::string("clipboard_has"))->c_str(), [singleton]() -> bool { return singleton->clipboard_has(); });
	js_singleton.add((new std::string("clipboard_has_image"))->c_str(), [singleton]() -> bool { return singleton->clipboard_has_image(); });
	js_singleton.add((new std::string("clipboard_set_primary"))->c_str(), [singleton](const String &clipboard_primary) -> void { singleton->clipboard_set_primary(clipboard_primary); });
	js_singleton.add((new std::string("clipboard_get_primary"))->c_str(), [singleton]() -> String { return singleton->clipboard_get_primary(); });
	js_singleton.add((new std::string("get_display_cutouts"))->c_str(), [singleton]() -> TypedArray<Rect2> { return singleton->get_display_cutouts(); });
	js_singleton.add((new std::string("get_display_safe_area"))->c_str(), [singleton]() -> Rect2i { return singleton->get_display_safe_area(); });
	js_singleton.add((new std::string("get_screen_count"))->c_str(), [singleton]() -> int64_t { return singleton->get_screen_count(); });
	js_singleton.add((new std::string("get_primary_screen"))->c_str(), [singleton]() -> int64_t { return singleton->get_primary_screen(); });
	js_singleton.add((new std::string("get_keyboard_focus_screen"))->c_str(), [singleton]() -> int64_t { return singleton->get_keyboard_focus_screen(); });
	js_singleton.add((new std::string("get_screen_from_rect"))->c_str(), [singleton](const Rect2 &rect) -> int64_t { return singleton->get_screen_from_rect(rect); });
	js_singleton.add((new std::string("screen_get_position"))->c_str(), [singleton](int32_t screen) -> Vector2i { return singleton->screen_get_position(screen); });
	js_singleton.add((new std::string("screen_get_size"))->c_str(), [singleton](int32_t screen) -> Vector2i { return singleton->screen_get_size(screen); });
	js_singleton.add((new std::string("screen_get_usable_rect"))->c_str(), [singleton](int32_t screen) -> Rect2i { return singleton->screen_get_usable_rect(screen); });
	js_singleton.add((new std::string("screen_get_dpi"))->c_str(), [singleton](int32_t screen) -> int64_t { return singleton->screen_get_dpi(screen); });
	js_singleton.add((new std::string("screen_get_scale"))->c_str(), [singleton](int32_t screen) -> double { return singleton->screen_get_scale(screen); });
	js_singleton.add((new std::string("is_touchscreen_available"))->c_str(), [singleton]() -> bool { return singleton->is_touchscreen_available(); });
	js_singleton.add((new std::string("screen_get_max_scale"))->c_str(), [singleton]() -> double { return singleton->screen_get_max_scale(); });
	js_singleton.add((new std::string("screen_get_refresh_rate"))->c_str(), [singleton](int32_t screen) -> double { return singleton->screen_get_refresh_rate(screen); });
	js_singleton.add((new std::string("screen_get_pixel"))->c_str(), [singleton](const Vector2i &position) -> Color { return singleton->screen_get_pixel(position); });
	js_singleton.add((new std::string("screen_get_image"))->c_str(), [singleton](int32_t screen) -> Ref<Image> { return singleton->screen_get_image(screen); });
	js_singleton.add((new std::string("screen_set_orientation"))->c_str(), [singleton](DisplayServer::ScreenOrientation orientation, int32_t screen) -> void { singleton->screen_set_orientation(orientation, screen); });
	js_singleton.add((new std::string("screen_get_orientation"))->c_str(), [singleton](int32_t screen) -> DisplayServer::ScreenOrientation { return singleton->screen_get_orientation(screen); });
	js_singleton.add((new std::string("screen_set_keep_on"))->c_str(), [singleton](bool enable) -> void { singleton->screen_set_keep_on(enable); });
	js_singleton.add((new std::string("screen_is_kept_on"))->c_str(), [singleton]() -> bool { return singleton->screen_is_kept_on(); });
	js_singleton.add((new std::string("get_window_list"))->c_str(), [singleton]() -> PackedInt32Array { return singleton->get_window_list(); });
	js_singleton.add((new std::string("get_window_at_screen_position"))->c_str(), [singleton](const Vector2i &position) -> int64_t { return singleton->get_window_at_screen_position(position); });
	js_singleton.add((new std::string("window_get_native_handle"))->c_str(), [singleton](DisplayServer::HandleType handle_type, int32_t window_id) -> int64_t { return singleton->window_get_native_handle(handle_type, window_id); });
	js_singleton.add((new std::string("window_get_active_popup"))->c_str(), [singleton]() -> int64_t { return singleton->window_get_active_popup(); });
	js_singleton.add((new std::string("window_set_popup_safe_rect"))->c_str(), [singleton](int32_t window, const Rect2i &rect) -> void { singleton->window_set_popup_safe_rect(window, rect); });
	js_singleton.add((new std::string("window_get_popup_safe_rect"))->c_str(), [singleton](int32_t window) -> Rect2i { return singleton->window_get_popup_safe_rect(window); });
	js_singleton.add((new std::string("window_set_title"))->c_str(), [singleton](const String &title, int32_t window_id) -> void { singleton->window_set_title(title, window_id); });
	js_singleton.add((new std::string("window_get_title_size"))->c_str(), [singleton](const String &title, int32_t window_id) -> Vector2i { return singleton->window_get_title_size(title, window_id); });
	js_singleton.add((new std::string("window_set_mouse_passthrough"))->c_str(), [singleton](const PackedVector2Array &region, int32_t window_id) -> void { singleton->window_set_mouse_passthrough(region, window_id); });
	js_singleton.add((new std::string("window_get_current_screen"))->c_str(), [singleton](int32_t window_id) -> int64_t { return singleton->window_get_current_screen(window_id); });
	js_singleton.add((new std::string("window_set_current_screen"))->c_str(), [singleton](int32_t screen, int32_t window_id) -> void { singleton->window_set_current_screen(screen, window_id); });
	js_singleton.add((new std::string("window_get_position"))->c_str(), [singleton](int32_t window_id) -> Vector2i { return singleton->window_get_position(window_id); });
	js_singleton.add((new std::string("window_get_position_with_decorations"))->c_str(), [singleton](int32_t window_id) -> Vector2i { return singleton->window_get_position_with_decorations(window_id); });
	js_singleton.add((new std::string("window_set_position"))->c_str(), [singleton](const Vector2i &position, int32_t window_id) -> void { singleton->window_set_position(position, window_id); });
	js_singleton.add((new std::string("window_get_size"))->c_str(), [singleton](int32_t window_id) -> Vector2i { return singleton->window_get_size(window_id); });
	js_singleton.add((new std::string("window_set_size"))->c_str(), [singleton](const Vector2i &size, int32_t window_id) -> void { singleton->window_set_size(size, window_id); });
	js_singleton.add((new std::string("window_set_rect_changed_callback"))->c_str(), [singleton](const Callable &callback, int32_t window_id) -> void { singleton->window_set_rect_changed_callback(callback, window_id); });
	js_singleton.add((new std::string("window_set_window_event_callback"))->c_str(), [singleton](const Callable &callback, int32_t window_id) -> void { singleton->window_set_window_event_callback(callback, window_id); });
	js_singleton.add((new std::string("window_set_input_event_callback"))->c_str(), [singleton](const Callable &callback, int32_t window_id) -> void { singleton->window_set_input_event_callback(callback, window_id); });
	js_singleton.add((new std::string("window_set_input_text_callback"))->c_str(), [singleton](const Callable &callback, int32_t window_id) -> void { singleton->window_set_input_text_callback(callback, window_id); });
	js_singleton.add((new std::string("window_set_drop_files_callback"))->c_str(), [singleton](const Callable &callback, int32_t window_id) -> void { singleton->window_set_drop_files_callback(callback, window_id); });
	js_singleton.add((new std::string("window_get_attached_instance_id"))->c_str(), [singleton](int32_t window_id) -> int64_t { return singleton->window_get_attached_instance_id(window_id); });
	js_singleton.add((new std::string("window_get_max_size"))->c_str(), [singleton](int32_t window_id) -> Vector2i { return singleton->window_get_max_size(window_id); });
	js_singleton.add((new std::string("window_set_max_size"))->c_str(), [singleton](const Vector2i &max_size, int32_t window_id) -> void { singleton->window_set_max_size(max_size, window_id); });
	js_singleton.add((new std::string("window_get_min_size"))->c_str(), [singleton](int32_t window_id) -> Vector2i { return singleton->window_get_min_size(window_id); });
	js_singleton.add((new std::string("window_set_min_size"))->c_str(), [singleton](const Vector2i &min_size, int32_t window_id) -> void { singleton->window_set_min_size(min_size, window_id); });
	js_singleton.add((new std::string("window_get_size_with_decorations"))->c_str(), [singleton](int32_t window_id) -> Vector2i { return singleton->window_get_size_with_decorations(window_id); });
	js_singleton.add((new std::string("window_get_mode"))->c_str(), [singleton](int32_t window_id) -> DisplayServer::WindowMode { return singleton->window_get_mode(window_id); });
	js_singleton.add((new std::string("window_set_mode"))->c_str(), [singleton](DisplayServer::WindowMode mode, int32_t window_id) -> void { singleton->window_set_mode(mode, window_id); });
	js_singleton.add((new std::string("window_set_flag"))->c_str(), [singleton](DisplayServer::WindowFlags flag, bool enabled, int32_t window_id) -> void { singleton->window_set_flag(flag, enabled, window_id); });
	js_singleton.add((new std::string("window_get_flag"))->c_str(), [singleton](DisplayServer::WindowFlags flag, int32_t window_id) -> bool { return singleton->window_get_flag(flag, window_id); });
	js_singleton.add((new std::string("window_set_window_buttons_offset"))->c_str(), [singleton](const Vector2i &offset, int32_t window_id) -> void { singleton->window_set_window_buttons_offset(offset, window_id); });
	js_singleton.add((new std::string("window_get_safe_title_margins"))->c_str(), [singleton](int32_t window_id) -> Vector3i { return singleton->window_get_safe_title_margins(window_id); });
	js_singleton.add((new std::string("window_request_attention"))->c_str(), [singleton](int32_t window_id) -> void { singleton->window_request_attention(window_id); });
	js_singleton.add((new std::string("window_move_to_foreground"))->c_str(), [singleton](int32_t window_id) -> void { singleton->window_move_to_foreground(window_id); });
	js_singleton.add((new std::string("window_is_focused"))->c_str(), [singleton](int32_t window_id) -> bool { return singleton->window_is_focused(window_id); });
	js_singleton.add((new std::string("window_can_draw"))->c_str(), [singleton](int32_t window_id) -> bool { return singleton->window_can_draw(window_id); });
	js_singleton.add((new std::string("window_set_transient"))->c_str(), [singleton](int32_t window_id, int32_t parent_window_id) -> void { singleton->window_set_transient(window_id, parent_window_id); });
	js_singleton.add((new std::string("window_set_exclusive"))->c_str(), [singleton](int32_t window_id, bool exclusive) -> void { singleton->window_set_exclusive(window_id, exclusive); });
	js_singleton.add((new std::string("window_set_ime_active"))->c_str(), [singleton](bool active, int32_t window_id) -> void { singleton->window_set_ime_active(active, window_id); });
	js_singleton.add((new std::string("window_set_ime_position"))->c_str(), [singleton](const Vector2i &position, int32_t window_id) -> void { singleton->window_set_ime_position(position, window_id); });
	js_singleton.add((new std::string("window_set_vsync_mode"))->c_str(), [singleton](DisplayServer::VSyncMode vsync_mode, int32_t window_id) -> void { singleton->window_set_vsync_mode(vsync_mode, window_id); });
	js_singleton.add((new std::string("window_get_vsync_mode"))->c_str(), [singleton](int32_t window_id) -> DisplayServer::VSyncMode { return singleton->window_get_vsync_mode(window_id); });
	js_singleton.add((new std::string("window_is_maximize_allowed"))->c_str(), [singleton](int32_t window_id) -> bool { return singleton->window_is_maximize_allowed(window_id); });
	js_singleton.add((new std::string("window_maximize_on_title_dbl_click"))->c_str(), [singleton]() -> bool { return singleton->window_maximize_on_title_dbl_click(); });
	js_singleton.add((new std::string("window_minimize_on_title_dbl_click"))->c_str(), [singleton]() -> bool { return singleton->window_minimize_on_title_dbl_click(); });
	js_singleton.add((new std::string("ime_get_selection"))->c_str(), [singleton]() -> Vector2i { return singleton->ime_get_selection(); });
	js_singleton.add((new std::string("ime_get_text"))->c_str(), [singleton]() -> String { return singleton->ime_get_text(); });
	js_singleton.add((new std::string("virtual_keyboard_show"))->c_str(), [singleton](const String &existing_text, const Rect2 &position, DisplayServer::VirtualKeyboardType type, int32_t max_length, int32_t cursor_start, int32_t cursor_end) -> void { singleton->virtual_keyboard_show(existing_text, position, type, max_length, cursor_start, cursor_end); });
	js_singleton.add((new std::string("virtual_keyboard_hide"))->c_str(), [singleton]() -> void { singleton->virtual_keyboard_hide(); });
	js_singleton.add((new std::string("virtual_keyboard_get_height"))->c_str(), [singleton]() -> int64_t { return singleton->virtual_keyboard_get_height(); });
	js_singleton.add((new std::string("cursor_set_shape"))->c_str(), [singleton](DisplayServer::CursorShape shape) -> void { singleton->cursor_set_shape(shape); });
	js_singleton.add((new std::string("cursor_get_shape"))->c_str(), [singleton]() -> DisplayServer::CursorShape { return singleton->cursor_get_shape(); });
	js_singleton.add((new std::string("cursor_set_custom_image"))->c_str(), [singleton](const Ref<Resource> &cursor, DisplayServer::CursorShape shape, const Vector2 &hotspot) -> void { singleton->cursor_set_custom_image(cursor, shape, hotspot); });
	js_singleton.add((new std::string("get_swap_cancel_ok"))->c_str(), [singleton]() -> bool { return singleton->get_swap_cancel_ok(); });
	js_singleton.add((new std::string("enable_for_stealing_focus"))->c_str(), [singleton](int64_t process_id) -> void { singleton->enable_for_stealing_focus(process_id); });
	js_singleton.add((new std::string("dialog_show"))->c_str(), [singleton](const String &title, const String &description, const PackedStringArray &buttons, const Callable &callback) -> Error { return singleton->dialog_show(title, description, buttons, callback); });
	js_singleton.add((new std::string("dialog_input_text"))->c_str(), [singleton](const String &title, const String &description, const String &existing_text, const Callable &callback) -> Error { return singleton->dialog_input_text(title, description, existing_text, callback); });
	js_singleton.add((new std::string("file_dialog_show"))->c_str(), [singleton](const String &title, const String &current_directory, const String &filename, bool show_hidden, DisplayServer::FileDialogMode mode, const PackedStringArray &filters, const Callable &callback) -> Error { return singleton->file_dialog_show(title, current_directory, filename, show_hidden, mode, filters, callback); });
	js_singleton.add((new std::string("file_dialog_with_options_show"))->c_str(), [singleton](const String &title, const String &current_directory, const String &root, const String &filename, bool show_hidden, DisplayServer::FileDialogMode mode, const PackedStringArray &filters, const TypedArray<Dictionary> &options, const Callable &callback) -> Error { return singleton->file_dialog_with_options_show(title, current_directory, root, filename, show_hidden, mode, filters, options, callback); });
	js_singleton.add((new std::string("keyboard_get_layout_count"))->c_str(), [singleton]() -> int64_t { return singleton->keyboard_get_layout_count(); });
	js_singleton.add((new std::string("keyboard_get_current_layout"))->c_str(), [singleton]() -> int64_t { return singleton->keyboard_get_current_layout(); });
	js_singleton.add((new std::string("keyboard_set_current_layout"))->c_str(), [singleton](int32_t index) -> void { singleton->keyboard_set_current_layout(index); });
	js_singleton.add((new std::string("keyboard_get_layout_language"))->c_str(), [singleton](int32_t index) -> String { return singleton->keyboard_get_layout_language(index); });
	js_singleton.add((new std::string("keyboard_get_layout_name"))->c_str(), [singleton](int32_t index) -> String { return singleton->keyboard_get_layout_name(index); });
	js_singleton.add((new std::string("keyboard_get_keycode_from_physical"))->c_str(), [singleton](Key keycode) -> Key { return singleton->keyboard_get_keycode_from_physical(keycode); });
	js_singleton.add((new std::string("keyboard_get_label_from_physical"))->c_str(), [singleton](Key keycode) -> Key { return singleton->keyboard_get_label_from_physical(keycode); });
	js_singleton.add((new std::string("process_events"))->c_str(), [singleton]() -> void { singleton->process_events(); });
	js_singleton.add((new std::string("force_process_and_drop_events"))->c_str(), [singleton]() -> void { singleton->force_process_and_drop_events(); });
	js_singleton.add((new std::string("set_native_icon"))->c_str(), [singleton](const String &filename) -> void { singleton->set_native_icon(filename); });
	js_singleton.add((new std::string("set_icon"))->c_str(), [singleton](const Ref<Image> &image) -> void { singleton->set_icon(image); });
	js_singleton.add((new std::string("create_status_indicator"))->c_str(), [singleton](const Ref<Texture2D> &icon, const String &tooltip, const Callable &callback) -> int64_t { return singleton->create_status_indicator(icon, tooltip, callback); });
	js_singleton.add((new std::string("status_indicator_set_icon"))->c_str(), [singleton](int32_t id, const Ref<Texture2D> &icon) -> void { singleton->status_indicator_set_icon(id, icon); });
	js_singleton.add((new std::string("status_indicator_set_tooltip"))->c_str(), [singleton](int32_t id, const String &tooltip) -> void { singleton->status_indicator_set_tooltip(id, tooltip); });
	js_singleton.add((new std::string("status_indicator_set_menu"))->c_str(), [singleton](int32_t id, const RID &menu_rid) -> void { singleton->status_indicator_set_menu(id, menu_rid); });
	js_singleton.add((new std::string("status_indicator_set_callback"))->c_str(), [singleton](int32_t id, const Callable &callback) -> void { singleton->status_indicator_set_callback(id, callback); });
	js_singleton.add((new std::string("status_indicator_get_rect"))->c_str(), [singleton](int32_t id) -> Rect2 { return singleton->status_indicator_get_rect(id); });
	js_singleton.add((new std::string("delete_status_indicator"))->c_str(), [singleton](int32_t id) -> void { singleton->delete_status_indicator(id); });
	js_singleton.add((new std::string("tablet_get_driver_count"))->c_str(), [singleton]() -> int64_t { return singleton->tablet_get_driver_count(); });
	js_singleton.add((new std::string("tablet_get_driver_name"))->c_str(), [singleton](int32_t idx) -> String { return singleton->tablet_get_driver_name(idx); });
	js_singleton.add((new std::string("tablet_get_current_driver"))->c_str(), [singleton]() -> String { return singleton->tablet_get_current_driver(); });
	js_singleton.add((new std::string("tablet_set_current_driver"))->c_str(), [singleton](const String &name) -> void { singleton->tablet_set_current_driver(name); });
	js_singleton.add((new std::string("is_window_transparency_available"))->c_str(), [singleton]() -> bool { return singleton->is_window_transparency_available(); });
	context->global()[(new std::string("DisplayServer"))->c_str()] = js_singleton;

	qjs::Value _Feature = context->newObject();
	_Feature[(new std::string("FEATURE_GLOBAL_MENU"))->c_str()] = DisplayServer::Feature::FEATURE_GLOBAL_MENU;
	_Feature[(new std::string("FEATURE_SUBWINDOWS"))->c_str()] = DisplayServer::Feature::FEATURE_SUBWINDOWS;
	_Feature[(new std::string("FEATURE_TOUCHSCREEN"))->c_str()] = DisplayServer::Feature::FEATURE_TOUCHSCREEN;
	_Feature[(new std::string("FEATURE_MOUSE"))->c_str()] = DisplayServer::Feature::FEATURE_MOUSE;
	_Feature[(new std::string("FEATURE_MOUSE_WARP"))->c_str()] = DisplayServer::Feature::FEATURE_MOUSE_WARP;
	_Feature[(new std::string("FEATURE_CLIPBOARD"))->c_str()] = DisplayServer::Feature::FEATURE_CLIPBOARD;
	_Feature[(new std::string("FEATURE_VIRTUAL_KEYBOARD"))->c_str()] = DisplayServer::Feature::FEATURE_VIRTUAL_KEYBOARD;
	_Feature[(new std::string("FEATURE_CURSOR_SHAPE"))->c_str()] = DisplayServer::Feature::FEATURE_CURSOR_SHAPE;
	_Feature[(new std::string("FEATURE_CUSTOM_CURSOR_SHAPE"))->c_str()] = DisplayServer::Feature::FEATURE_CUSTOM_CURSOR_SHAPE;
	_Feature[(new std::string("FEATURE_NATIVE_DIALOG"))->c_str()] = DisplayServer::Feature::FEATURE_NATIVE_DIALOG;
	_Feature[(new std::string("FEATURE_IME"))->c_str()] = DisplayServer::Feature::FEATURE_IME;
	_Feature[(new std::string("FEATURE_WINDOW_TRANSPARENCY"))->c_str()] = DisplayServer::Feature::FEATURE_WINDOW_TRANSPARENCY;
	_Feature[(new std::string("FEATURE_HIDPI"))->c_str()] = DisplayServer::Feature::FEATURE_HIDPI;
	_Feature[(new std::string("FEATURE_ICON"))->c_str()] = DisplayServer::Feature::FEATURE_ICON;
	_Feature[(new std::string("FEATURE_NATIVE_ICON"))->c_str()] = DisplayServer::Feature::FEATURE_NATIVE_ICON;
	_Feature[(new std::string("FEATURE_ORIENTATION"))->c_str()] = DisplayServer::Feature::FEATURE_ORIENTATION;
	_Feature[(new std::string("FEATURE_SWAP_BUFFERS"))->c_str()] = DisplayServer::Feature::FEATURE_SWAP_BUFFERS;
	_Feature[(new std::string("FEATURE_CLIPBOARD_PRIMARY"))->c_str()] = DisplayServer::Feature::FEATURE_CLIPBOARD_PRIMARY;
	_Feature[(new std::string("FEATURE_TEXT_TO_SPEECH"))->c_str()] = DisplayServer::Feature::FEATURE_TEXT_TO_SPEECH;
	_Feature[(new std::string("FEATURE_EXTEND_TO_TITLE"))->c_str()] = DisplayServer::Feature::FEATURE_EXTEND_TO_TITLE;
	_Feature[(new std::string("FEATURE_SCREEN_CAPTURE"))->c_str()] = DisplayServer::Feature::FEATURE_SCREEN_CAPTURE;
	_Feature[(new std::string("FEATURE_STATUS_INDICATOR"))->c_str()] = DisplayServer::Feature::FEATURE_STATUS_INDICATOR;
	_Feature[(new std::string("FEATURE_NATIVE_HELP"))->c_str()] = DisplayServer::Feature::FEATURE_NATIVE_HELP;
	_Feature[(new std::string("FEATURE_NATIVE_DIALOG_INPUT"))->c_str()] = DisplayServer::Feature::FEATURE_NATIVE_DIALOG_INPUT;
	_Feature[(new std::string("FEATURE_NATIVE_DIALOG_FILE"))->c_str()] = DisplayServer::Feature::FEATURE_NATIVE_DIALOG_FILE;
	js_singleton[(new std::string("Feature"))->c_str()] = _Feature;
	qjs::Value _MouseMode = context->newObject();
	_MouseMode[(new std::string("MOUSE_MODE_VISIBLE"))->c_str()] = DisplayServer::MouseMode::MOUSE_MODE_VISIBLE;
	_MouseMode[(new std::string("MOUSE_MODE_HIDDEN"))->c_str()] = DisplayServer::MouseMode::MOUSE_MODE_HIDDEN;
	_MouseMode[(new std::string("MOUSE_MODE_CAPTURED"))->c_str()] = DisplayServer::MouseMode::MOUSE_MODE_CAPTURED;
	_MouseMode[(new std::string("MOUSE_MODE_CONFINED"))->c_str()] = DisplayServer::MouseMode::MOUSE_MODE_CONFINED;
	_MouseMode[(new std::string("MOUSE_MODE_CONFINED_HIDDEN"))->c_str()] = DisplayServer::MouseMode::MOUSE_MODE_CONFINED_HIDDEN;
	js_singleton[(new std::string("MouseMode"))->c_str()] = _MouseMode;
	qjs::Value _ScreenOrientation = context->newObject();
	_ScreenOrientation[(new std::string("SCREEN_LANDSCAPE"))->c_str()] = DisplayServer::ScreenOrientation::SCREEN_LANDSCAPE;
	_ScreenOrientation[(new std::string("SCREEN_PORTRAIT"))->c_str()] = DisplayServer::ScreenOrientation::SCREEN_PORTRAIT;
	_ScreenOrientation[(new std::string("SCREEN_REVERSE_LANDSCAPE"))->c_str()] = DisplayServer::ScreenOrientation::SCREEN_REVERSE_LANDSCAPE;
	_ScreenOrientation[(new std::string("SCREEN_REVERSE_PORTRAIT"))->c_str()] = DisplayServer::ScreenOrientation::SCREEN_REVERSE_PORTRAIT;
	_ScreenOrientation[(new std::string("SCREEN_SENSOR_LANDSCAPE"))->c_str()] = DisplayServer::ScreenOrientation::SCREEN_SENSOR_LANDSCAPE;
	_ScreenOrientation[(new std::string("SCREEN_SENSOR_PORTRAIT"))->c_str()] = DisplayServer::ScreenOrientation::SCREEN_SENSOR_PORTRAIT;
	_ScreenOrientation[(new std::string("SCREEN_SENSOR"))->c_str()] = DisplayServer::ScreenOrientation::SCREEN_SENSOR;
	js_singleton[(new std::string("ScreenOrientation"))->c_str()] = _ScreenOrientation;
	qjs::Value _VirtualKeyboardType = context->newObject();
	_VirtualKeyboardType[(new std::string("KEYBOARD_TYPE_DEFAULT"))->c_str()] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_DEFAULT;
	_VirtualKeyboardType[(new std::string("KEYBOARD_TYPE_MULTILINE"))->c_str()] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_MULTILINE;
	_VirtualKeyboardType[(new std::string("KEYBOARD_TYPE_NUMBER"))->c_str()] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_NUMBER;
	_VirtualKeyboardType[(new std::string("KEYBOARD_TYPE_NUMBER_DECIMAL"))->c_str()] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_NUMBER_DECIMAL;
	_VirtualKeyboardType[(new std::string("KEYBOARD_TYPE_PHONE"))->c_str()] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_PHONE;
	_VirtualKeyboardType[(new std::string("KEYBOARD_TYPE_EMAIL_ADDRESS"))->c_str()] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_EMAIL_ADDRESS;
	_VirtualKeyboardType[(new std::string("KEYBOARD_TYPE_PASSWORD"))->c_str()] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_PASSWORD;
	_VirtualKeyboardType[(new std::string("KEYBOARD_TYPE_URL"))->c_str()] = DisplayServer::VirtualKeyboardType::KEYBOARD_TYPE_URL;
	js_singleton[(new std::string("VirtualKeyboardType"))->c_str()] = _VirtualKeyboardType;
	qjs::Value _CursorShape = context->newObject();
	_CursorShape[(new std::string("CURSOR_ARROW"))->c_str()] = DisplayServer::CursorShape::CURSOR_ARROW;
	_CursorShape[(new std::string("CURSOR_IBEAM"))->c_str()] = DisplayServer::CursorShape::CURSOR_IBEAM;
	_CursorShape[(new std::string("CURSOR_POINTING_HAND"))->c_str()] = DisplayServer::CursorShape::CURSOR_POINTING_HAND;
	_CursorShape[(new std::string("CURSOR_CROSS"))->c_str()] = DisplayServer::CursorShape::CURSOR_CROSS;
	_CursorShape[(new std::string("CURSOR_WAIT"))->c_str()] = DisplayServer::CursorShape::CURSOR_WAIT;
	_CursorShape[(new std::string("CURSOR_BUSY"))->c_str()] = DisplayServer::CursorShape::CURSOR_BUSY;
	_CursorShape[(new std::string("CURSOR_DRAG"))->c_str()] = DisplayServer::CursorShape::CURSOR_DRAG;
	_CursorShape[(new std::string("CURSOR_CAN_DROP"))->c_str()] = DisplayServer::CursorShape::CURSOR_CAN_DROP;
	_CursorShape[(new std::string("CURSOR_FORBIDDEN"))->c_str()] = DisplayServer::CursorShape::CURSOR_FORBIDDEN;
	_CursorShape[(new std::string("CURSOR_VSIZE"))->c_str()] = DisplayServer::CursorShape::CURSOR_VSIZE;
	_CursorShape[(new std::string("CURSOR_HSIZE"))->c_str()] = DisplayServer::CursorShape::CURSOR_HSIZE;
	_CursorShape[(new std::string("CURSOR_BDIAGSIZE"))->c_str()] = DisplayServer::CursorShape::CURSOR_BDIAGSIZE;
	_CursorShape[(new std::string("CURSOR_FDIAGSIZE"))->c_str()] = DisplayServer::CursorShape::CURSOR_FDIAGSIZE;
	_CursorShape[(new std::string("CURSOR_MOVE"))->c_str()] = DisplayServer::CursorShape::CURSOR_MOVE;
	_CursorShape[(new std::string("CURSOR_VSPLIT"))->c_str()] = DisplayServer::CursorShape::CURSOR_VSPLIT;
	_CursorShape[(new std::string("CURSOR_HSPLIT"))->c_str()] = DisplayServer::CursorShape::CURSOR_HSPLIT;
	_CursorShape[(new std::string("CURSOR_HELP"))->c_str()] = DisplayServer::CursorShape::CURSOR_HELP;
	_CursorShape[(new std::string("CURSOR_MAX"))->c_str()] = DisplayServer::CursorShape::CURSOR_MAX;
	js_singleton[(new std::string("CursorShape"))->c_str()] = _CursorShape;
	qjs::Value _FileDialogMode = context->newObject();
	_FileDialogMode[(new std::string("FILE_DIALOG_MODE_OPEN_FILE"))->c_str()] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_OPEN_FILE;
	_FileDialogMode[(new std::string("FILE_DIALOG_MODE_OPEN_FILES"))->c_str()] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_OPEN_FILES;
	_FileDialogMode[(new std::string("FILE_DIALOG_MODE_OPEN_DIR"))->c_str()] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_OPEN_DIR;
	_FileDialogMode[(new std::string("FILE_DIALOG_MODE_OPEN_ANY"))->c_str()] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_OPEN_ANY;
	_FileDialogMode[(new std::string("FILE_DIALOG_MODE_SAVE_FILE"))->c_str()] = DisplayServer::FileDialogMode::FILE_DIALOG_MODE_SAVE_FILE;
	js_singleton[(new std::string("FileDialogMode"))->c_str()] = _FileDialogMode;
	qjs::Value _WindowMode = context->newObject();
	_WindowMode[(new std::string("WINDOW_MODE_WINDOWED"))->c_str()] = DisplayServer::WindowMode::WINDOW_MODE_WINDOWED;
	_WindowMode[(new std::string("WINDOW_MODE_MINIMIZED"))->c_str()] = DisplayServer::WindowMode::WINDOW_MODE_MINIMIZED;
	_WindowMode[(new std::string("WINDOW_MODE_MAXIMIZED"))->c_str()] = DisplayServer::WindowMode::WINDOW_MODE_MAXIMIZED;
	_WindowMode[(new std::string("WINDOW_MODE_FULLSCREEN"))->c_str()] = DisplayServer::WindowMode::WINDOW_MODE_FULLSCREEN;
	_WindowMode[(new std::string("WINDOW_MODE_EXCLUSIVE_FULLSCREEN"))->c_str()] = DisplayServer::WindowMode::WINDOW_MODE_EXCLUSIVE_FULLSCREEN;
	js_singleton[(new std::string("WindowMode"))->c_str()] = _WindowMode;
	qjs::Value _WindowFlags = context->newObject();
	_WindowFlags[(new std::string("WINDOW_FLAG_RESIZE_DISABLED"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_RESIZE_DISABLED;
	_WindowFlags[(new std::string("WINDOW_FLAG_BORDERLESS"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_BORDERLESS;
	_WindowFlags[(new std::string("WINDOW_FLAG_ALWAYS_ON_TOP"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_ALWAYS_ON_TOP;
	_WindowFlags[(new std::string("WINDOW_FLAG_TRANSPARENT"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_TRANSPARENT;
	_WindowFlags[(new std::string("WINDOW_FLAG_NO_FOCUS"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_NO_FOCUS;
	_WindowFlags[(new std::string("WINDOW_FLAG_POPUP"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_POPUP;
	_WindowFlags[(new std::string("WINDOW_FLAG_EXTEND_TO_TITLE"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_EXTEND_TO_TITLE;
	_WindowFlags[(new std::string("WINDOW_FLAG_MOUSE_PASSTHROUGH"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_MOUSE_PASSTHROUGH;
	_WindowFlags[(new std::string("WINDOW_FLAG_MAX"))->c_str()] = DisplayServer::WindowFlags::WINDOW_FLAG_MAX;
	js_singleton[(new std::string("WindowFlags"))->c_str()] = _WindowFlags;
	qjs::Value _WindowEvent = context->newObject();
	_WindowEvent[(new std::string("WINDOW_EVENT_MOUSE_ENTER"))->c_str()] = DisplayServer::WindowEvent::WINDOW_EVENT_MOUSE_ENTER;
	_WindowEvent[(new std::string("WINDOW_EVENT_MOUSE_EXIT"))->c_str()] = DisplayServer::WindowEvent::WINDOW_EVENT_MOUSE_EXIT;
	_WindowEvent[(new std::string("WINDOW_EVENT_FOCUS_IN"))->c_str()] = DisplayServer::WindowEvent::WINDOW_EVENT_FOCUS_IN;
	_WindowEvent[(new std::string("WINDOW_EVENT_FOCUS_OUT"))->c_str()] = DisplayServer::WindowEvent::WINDOW_EVENT_FOCUS_OUT;
	_WindowEvent[(new std::string("WINDOW_EVENT_CLOSE_REQUEST"))->c_str()] = DisplayServer::WindowEvent::WINDOW_EVENT_CLOSE_REQUEST;
	_WindowEvent[(new std::string("WINDOW_EVENT_GO_BACK_REQUEST"))->c_str()] = DisplayServer::WindowEvent::WINDOW_EVENT_GO_BACK_REQUEST;
	_WindowEvent[(new std::string("WINDOW_EVENT_DPI_CHANGE"))->c_str()] = DisplayServer::WindowEvent::WINDOW_EVENT_DPI_CHANGE;
	_WindowEvent[(new std::string("WINDOW_EVENT_TITLEBAR_CHANGE"))->c_str()] = DisplayServer::WindowEvent::WINDOW_EVENT_TITLEBAR_CHANGE;
	js_singleton[(new std::string("WindowEvent"))->c_str()] = _WindowEvent;
	qjs::Value _VSyncMode = context->newObject();
	_VSyncMode[(new std::string("VSYNC_DISABLED"))->c_str()] = DisplayServer::VSyncMode::VSYNC_DISABLED;
	_VSyncMode[(new std::string("VSYNC_ENABLED"))->c_str()] = DisplayServer::VSyncMode::VSYNC_ENABLED;
	_VSyncMode[(new std::string("VSYNC_ADAPTIVE"))->c_str()] = DisplayServer::VSyncMode::VSYNC_ADAPTIVE;
	_VSyncMode[(new std::string("VSYNC_MAILBOX"))->c_str()] = DisplayServer::VSyncMode::VSYNC_MAILBOX;
	js_singleton[(new std::string("VSyncMode"))->c_str()] = _VSyncMode;
	qjs::Value _HandleType = context->newObject();
	_HandleType[(new std::string("DISPLAY_HANDLE"))->c_str()] = DisplayServer::HandleType::DISPLAY_HANDLE;
	_HandleType[(new std::string("WINDOW_HANDLE"))->c_str()] = DisplayServer::HandleType::WINDOW_HANDLE;
	_HandleType[(new std::string("WINDOW_VIEW"))->c_str()] = DisplayServer::HandleType::WINDOW_VIEW;
	_HandleType[(new std::string("OPENGL_CONTEXT"))->c_str()] = DisplayServer::HandleType::OPENGL_CONTEXT;
	js_singleton[(new std::string("HandleType"))->c_str()] = _HandleType;
	qjs::Value _TTSUtteranceEvent = context->newObject();
	_TTSUtteranceEvent[(new std::string("TTS_UTTERANCE_STARTED"))->c_str()] = DisplayServer::TTSUtteranceEvent::TTS_UTTERANCE_STARTED;
	_TTSUtteranceEvent[(new std::string("TTS_UTTERANCE_ENDED"))->c_str()] = DisplayServer::TTSUtteranceEvent::TTS_UTTERANCE_ENDED;
	_TTSUtteranceEvent[(new std::string("TTS_UTTERANCE_CANCELED"))->c_str()] = DisplayServer::TTSUtteranceEvent::TTS_UTTERANCE_CANCELED;
	_TTSUtteranceEvent[(new std::string("TTS_UTTERANCE_BOUNDARY"))->c_str()] = DisplayServer::TTSUtteranceEvent::TTS_UTTERANCE_BOUNDARY;
	js_singleton[(new std::string("TTSUtteranceEvent"))->c_str()] = _TTSUtteranceEvent;
}