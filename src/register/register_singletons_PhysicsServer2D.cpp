
#include <godot_cpp/classes/physics_direct_body_state2d.hpp>
#include <godot_cpp/classes/physics_direct_space_state2d.hpp>
#include <godot_cpp/classes/physics_server2d.hpp>
#include <godot_cpp/classes/physics_test_motion_parameters2d.hpp>
#include <godot_cpp/classes/physics_test_motion_result2d.hpp>
#include <godot_cpp/classes/ref.hpp>
#include <godot_cpp/variant/callable.hpp>
#include <godot_cpp/variant/rid.hpp>
#include <godot_cpp/variant/transform2d.hpp>
#include <godot_cpp/variant/variant.hpp>
#include <godot_cpp/variant/vector2.hpp>
#include <string>

#include "qjspp.hpp"
#include "qjspp/utils.h"
#include "register/register_classes.h"

using namespace godot;

void register_singletons_PhysicsServer2D() {
	qjs::Value js_singleton = context->newObject();
	PhysicsServer2D *singleton = PhysicsServer2D::get_singleton();
	js_singleton.add((new std::string("world_boundary_shape_create"))->c_str(), [singleton]() -> RID { return singleton->world_boundary_shape_create(); });
	js_singleton.add((new std::string("separation_ray_shape_create"))->c_str(), [singleton]() -> RID { return singleton->separation_ray_shape_create(); });
	js_singleton.add((new std::string("segment_shape_create"))->c_str(), [singleton]() -> RID { return singleton->segment_shape_create(); });
	js_singleton.add((new std::string("circle_shape_create"))->c_str(), [singleton]() -> RID { return singleton->circle_shape_create(); });
	js_singleton.add((new std::string("rectangle_shape_create"))->c_str(), [singleton]() -> RID { return singleton->rectangle_shape_create(); });
	js_singleton.add((new std::string("capsule_shape_create"))->c_str(), [singleton]() -> RID { return singleton->capsule_shape_create(); });
	js_singleton.add((new std::string("convex_polygon_shape_create"))->c_str(), [singleton]() -> RID { return singleton->convex_polygon_shape_create(); });
	js_singleton.add((new std::string("concave_polygon_shape_create"))->c_str(), [singleton]() -> RID { return singleton->concave_polygon_shape_create(); });
	js_singleton.add((new std::string("shape_set_data"))->c_str(), [singleton](const RID &shape, const Variant &data) -> void { singleton->shape_set_data(shape, data); });
	js_singleton.add((new std::string("shape_get_type"))->c_str(), [singleton](const RID &shape) -> PhysicsServer2D::ShapeType { return singleton->shape_get_type(shape); });
	js_singleton.add((new std::string("shape_get_data"))->c_str(), [singleton](const RID &shape) -> Variant { return singleton->shape_get_data(shape); });
	js_singleton.add((new std::string("space_create"))->c_str(), [singleton]() -> RID { return singleton->space_create(); });
	js_singleton.add((new std::string("space_set_active"))->c_str(), [singleton](const RID &space, bool active) -> void { singleton->space_set_active(space, active); });
	js_singleton.add((new std::string("space_is_active"))->c_str(), [singleton](const RID &space) -> bool { return singleton->space_is_active(space); });
	js_singleton.add((new std::string("space_set_param"))->c_str(), [singleton](const RID &space, PhysicsServer2D::SpaceParameter param, double value) -> void { singleton->space_set_param(space, param, value); });
	js_singleton.add((new std::string("space_get_param"))->c_str(), [singleton](const RID &space, PhysicsServer2D::SpaceParameter param) -> double { return singleton->space_get_param(space, param); });
	js_singleton.add((new std::string("space_get_direct_state"))->c_str(), [singleton](const RID &space) -> PhysicsDirectSpaceState2D * { return singleton->space_get_direct_state(space); });
	js_singleton.add((new std::string("area_create"))->c_str(), [singleton]() -> RID { return singleton->area_create(); });
	js_singleton.add((new std::string("area_set_space"))->c_str(), [singleton](const RID &area, const RID &space) -> void { singleton->area_set_space(area, space); });
	js_singleton.add((new std::string("area_get_space"))->c_str(), [singleton](const RID &area) -> RID { return singleton->area_get_space(area); });
	js_singleton.add((new std::string("area_add_shape"))->c_str(), [singleton](const RID &area, const RID &shape, const Transform2D &transform, bool disabled) -> void { singleton->area_add_shape(area, shape, transform, disabled); });
	js_singleton.add((new std::string("area_set_shape"))->c_str(), [singleton](const RID &area, int32_t shape_idx, const RID &shape) -> void { singleton->area_set_shape(area, shape_idx, shape); });
	js_singleton.add((new std::string("area_set_shape_transform"))->c_str(), [singleton](const RID &area, int32_t shape_idx, const Transform2D &transform) -> void { singleton->area_set_shape_transform(area, shape_idx, transform); });
	js_singleton.add((new std::string("area_set_shape_disabled"))->c_str(), [singleton](const RID &area, int32_t shape_idx, bool disabled) -> void { singleton->area_set_shape_disabled(area, shape_idx, disabled); });
	js_singleton.add((new std::string("area_get_shape_count"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_shape_count(area); });
	js_singleton.add((new std::string("area_get_shape"))->c_str(), [singleton](const RID &area, int32_t shape_idx) -> RID { return singleton->area_get_shape(area, shape_idx); });
	js_singleton.add((new std::string("area_get_shape_transform"))->c_str(), [singleton](const RID &area, int32_t shape_idx) -> Transform2D { return singleton->area_get_shape_transform(area, shape_idx); });
	js_singleton.add((new std::string("area_remove_shape"))->c_str(), [singleton](const RID &area, int32_t shape_idx) -> void { singleton->area_remove_shape(area, shape_idx); });
	js_singleton.add((new std::string("area_clear_shapes"))->c_str(), [singleton](const RID &area) -> void { singleton->area_clear_shapes(area); });
	js_singleton.add((new std::string("area_set_collision_layer"))->c_str(), [singleton](const RID &area, uint32_t layer) -> void { singleton->area_set_collision_layer(area, layer); });
	js_singleton.add((new std::string("area_get_collision_layer"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_collision_layer(area); });
	js_singleton.add((new std::string("area_set_collision_mask"))->c_str(), [singleton](const RID &area, uint32_t mask) -> void { singleton->area_set_collision_mask(area, mask); });
	js_singleton.add((new std::string("area_get_collision_mask"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_collision_mask(area); });
	js_singleton.add((new std::string("area_set_param"))->c_str(), [singleton](const RID &area, PhysicsServer2D::AreaParameter param, const Variant &value) -> void { singleton->area_set_param(area, param, value); });
	js_singleton.add((new std::string("area_set_transform"))->c_str(), [singleton](const RID &area, const Transform2D &transform) -> void { singleton->area_set_transform(area, transform); });
	js_singleton.add((new std::string("area_get_param"))->c_str(), [singleton](const RID &area, PhysicsServer2D::AreaParameter param) -> Variant { return singleton->area_get_param(area, param); });
	js_singleton.add((new std::string("area_get_transform"))->c_str(), [singleton](const RID &area) -> Transform2D { return singleton->area_get_transform(area); });
	js_singleton.add((new std::string("area_attach_object_instance_id"))->c_str(), [singleton](const RID &area, uint64_t id) -> void { singleton->area_attach_object_instance_id(area, id); });
	js_singleton.add((new std::string("area_get_object_instance_id"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_object_instance_id(area); });
	js_singleton.add((new std::string("area_attach_canvas_instance_id"))->c_str(), [singleton](const RID &area, uint64_t id) -> void { singleton->area_attach_canvas_instance_id(area, id); });
	js_singleton.add((new std::string("area_get_canvas_instance_id"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_canvas_instance_id(area); });
	js_singleton.add((new std::string("area_set_monitor_callback"))->c_str(), [singleton](const RID &area, const Callable &callback) -> void { singleton->area_set_monitor_callback(area, callback); });
	js_singleton.add((new std::string("area_set_area_monitor_callback"))->c_str(), [singleton](const RID &area, const Callable &callback) -> void { singleton->area_set_area_monitor_callback(area, callback); });
	js_singleton.add((new std::string("area_set_monitorable"))->c_str(), [singleton](const RID &area, bool monitorable) -> void { singleton->area_set_monitorable(area, monitorable); });
	js_singleton.add((new std::string("body_create"))->c_str(), [singleton]() -> RID { return singleton->body_create(); });
	js_singleton.add((new std::string("body_set_space"))->c_str(), [singleton](const RID &body, const RID &space) -> void { singleton->body_set_space(body, space); });
	js_singleton.add((new std::string("body_get_space"))->c_str(), [singleton](const RID &body) -> RID { return singleton->body_get_space(body); });
	js_singleton.add((new std::string("body_set_mode"))->c_str(), [singleton](const RID &body, PhysicsServer2D::BodyMode mode) -> void { singleton->body_set_mode(body, mode); });
	js_singleton.add((new std::string("body_get_mode"))->c_str(), [singleton](const RID &body) -> PhysicsServer2D::BodyMode { return singleton->body_get_mode(body); });
	js_singleton.add((new std::string("body_add_shape"))->c_str(), [singleton](const RID &body, const RID &shape, const Transform2D &transform, bool disabled) -> void { singleton->body_add_shape(body, shape, transform, disabled); });
	js_singleton.add((new std::string("body_set_shape"))->c_str(), [singleton](const RID &body, int32_t shape_idx, const RID &shape) -> void { singleton->body_set_shape(body, shape_idx, shape); });
	js_singleton.add((new std::string("body_set_shape_transform"))->c_str(), [singleton](const RID &body, int32_t shape_idx, const Transform2D &transform) -> void { singleton->body_set_shape_transform(body, shape_idx, transform); });
	js_singleton.add((new std::string("body_get_shape_count"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_shape_count(body); });
	js_singleton.add((new std::string("body_get_shape"))->c_str(), [singleton](const RID &body, int32_t shape_idx) -> RID { return singleton->body_get_shape(body, shape_idx); });
	js_singleton.add((new std::string("body_get_shape_transform"))->c_str(), [singleton](const RID &body, int32_t shape_idx) -> Transform2D { return singleton->body_get_shape_transform(body, shape_idx); });
	js_singleton.add((new std::string("body_remove_shape"))->c_str(), [singleton](const RID &body, int32_t shape_idx) -> void { singleton->body_remove_shape(body, shape_idx); });
	js_singleton.add((new std::string("body_clear_shapes"))->c_str(), [singleton](const RID &body) -> void { singleton->body_clear_shapes(body); });
	js_singleton.add((new std::string("body_set_shape_disabled"))->c_str(), [singleton](const RID &body, int32_t shape_idx, bool disabled) -> void { singleton->body_set_shape_disabled(body, shape_idx, disabled); });
	js_singleton.add((new std::string("body_set_shape_as_one_way_collision"))->c_str(), [singleton](const RID &body, int32_t shape_idx, bool enable, double margin) -> void { singleton->body_set_shape_as_one_way_collision(body, shape_idx, enable, margin); });
	js_singleton.add((new std::string("body_attach_object_instance_id"))->c_str(), [singleton](const RID &body, uint64_t id) -> void { singleton->body_attach_object_instance_id(body, id); });
	js_singleton.add((new std::string("body_get_object_instance_id"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_object_instance_id(body); });
	js_singleton.add((new std::string("body_attach_canvas_instance_id"))->c_str(), [singleton](const RID &body, uint64_t id) -> void { singleton->body_attach_canvas_instance_id(body, id); });
	js_singleton.add((new std::string("body_get_canvas_instance_id"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_canvas_instance_id(body); });
	js_singleton.add((new std::string("body_set_continuous_collision_detection_mode"))->c_str(), [singleton](const RID &body, PhysicsServer2D::CCDMode mode) -> void { singleton->body_set_continuous_collision_detection_mode(body, mode); });
	js_singleton.add((new std::string("body_get_continuous_collision_detection_mode"))->c_str(), [singleton](const RID &body) -> PhysicsServer2D::CCDMode { return singleton->body_get_continuous_collision_detection_mode(body); });
	js_singleton.add((new std::string("body_set_collision_layer"))->c_str(), [singleton](const RID &body, uint32_t layer) -> void { singleton->body_set_collision_layer(body, layer); });
	js_singleton.add((new std::string("body_get_collision_layer"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_collision_layer(body); });
	js_singleton.add((new std::string("body_set_collision_mask"))->c_str(), [singleton](const RID &body, uint32_t mask) -> void { singleton->body_set_collision_mask(body, mask); });
	js_singleton.add((new std::string("body_get_collision_mask"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_collision_mask(body); });
	js_singleton.add((new std::string("body_set_collision_priority"))->c_str(), [singleton](const RID &body, double priority) -> void { singleton->body_set_collision_priority(body, priority); });
	js_singleton.add((new std::string("body_get_collision_priority"))->c_str(), [singleton](const RID &body) -> double { return singleton->body_get_collision_priority(body); });
	js_singleton.add((new std::string("body_set_param"))->c_str(), [singleton](const RID &body, PhysicsServer2D::BodyParameter param, const Variant &value) -> void { singleton->body_set_param(body, param, value); });
	js_singleton.add((new std::string("body_get_param"))->c_str(), [singleton](const RID &body, PhysicsServer2D::BodyParameter param) -> Variant { return singleton->body_get_param(body, param); });
	js_singleton.add((new std::string("body_reset_mass_properties"))->c_str(), [singleton](const RID &body) -> void { singleton->body_reset_mass_properties(body); });
	js_singleton.add((new std::string("body_set_state"))->c_str(), [singleton](const RID &body, PhysicsServer2D::BodyState state, const Variant &value) -> void { singleton->body_set_state(body, state, value); });
	js_singleton.add((new std::string("body_get_state"))->c_str(), [singleton](const RID &body, PhysicsServer2D::BodyState state) -> Variant { return singleton->body_get_state(body, state); });
	js_singleton.add((new std::string("body_apply_central_impulse"))->c_str(), [singleton](const RID &body, const Vector2 &impulse) -> void { singleton->body_apply_central_impulse(body, impulse); });
	js_singleton.add((new std::string("body_apply_torque_impulse"))->c_str(), [singleton](const RID &body, double impulse) -> void { singleton->body_apply_torque_impulse(body, impulse); });
	js_singleton.add((new std::string("body_apply_impulse"))->c_str(), [singleton](const RID &body, const Vector2 &impulse, const Vector2 &position) -> void { singleton->body_apply_impulse(body, impulse, position); });
	js_singleton.add((new std::string("body_apply_central_force"))->c_str(), [singleton](const RID &body, const Vector2 &force) -> void { singleton->body_apply_central_force(body, force); });
	js_singleton.add((new std::string("body_apply_force"))->c_str(), [singleton](const RID &body, const Vector2 &force, const Vector2 &position) -> void { singleton->body_apply_force(body, force, position); });
	js_singleton.add((new std::string("body_apply_torque"))->c_str(), [singleton](const RID &body, double torque) -> void { singleton->body_apply_torque(body, torque); });
	js_singleton.add((new std::string("body_add_constant_central_force"))->c_str(), [singleton](const RID &body, const Vector2 &force) -> void { singleton->body_add_constant_central_force(body, force); });
	js_singleton.add((new std::string("body_add_constant_force"))->c_str(), [singleton](const RID &body, const Vector2 &force, const Vector2 &position) -> void { singleton->body_add_constant_force(body, force, position); });
	js_singleton.add((new std::string("body_add_constant_torque"))->c_str(), [singleton](const RID &body, double torque) -> void { singleton->body_add_constant_torque(body, torque); });
	js_singleton.add((new std::string("body_set_constant_force"))->c_str(), [singleton](const RID &body, const Vector2 &force) -> void { singleton->body_set_constant_force(body, force); });
	js_singleton.add((new std::string("body_get_constant_force"))->c_str(), [singleton](const RID &body) -> Vector2 { return singleton->body_get_constant_force(body); });
	js_singleton.add((new std::string("body_set_constant_torque"))->c_str(), [singleton](const RID &body, double torque) -> void { singleton->body_set_constant_torque(body, torque); });
	js_singleton.add((new std::string("body_get_constant_torque"))->c_str(), [singleton](const RID &body) -> double { return singleton->body_get_constant_torque(body); });
	js_singleton.add((new std::string("body_set_axis_velocity"))->c_str(), [singleton](const RID &body, const Vector2 &axis_velocity) -> void { singleton->body_set_axis_velocity(body, axis_velocity); });
	js_singleton.add((new std::string("body_add_collision_exception"))->c_str(), [singleton](const RID &body, const RID &excepted_body) -> void { singleton->body_add_collision_exception(body, excepted_body); });
	js_singleton.add((new std::string("body_remove_collision_exception"))->c_str(), [singleton](const RID &body, const RID &excepted_body) -> void { singleton->body_remove_collision_exception(body, excepted_body); });
	js_singleton.add((new std::string("body_set_max_contacts_reported"))->c_str(), [singleton](const RID &body, int32_t amount) -> void { singleton->body_set_max_contacts_reported(body, amount); });
	js_singleton.add((new std::string("body_get_max_contacts_reported"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_max_contacts_reported(body); });
	js_singleton.add((new std::string("body_set_omit_force_integration"))->c_str(), [singleton](const RID &body, bool enable) -> void { singleton->body_set_omit_force_integration(body, enable); });
	js_singleton.add((new std::string("body_is_omitting_force_integration"))->c_str(), [singleton](const RID &body) -> bool { return singleton->body_is_omitting_force_integration(body); });
	js_singleton.add((new std::string("body_set_force_integration_callback"))->c_str(), [singleton](const RID &body, const Callable &callable, const Variant &userdata) -> void { singleton->body_set_force_integration_callback(body, callable, userdata); });
	js_singleton.add((new std::string("body_test_motion"))->c_str(), [singleton](const RID &body, const Ref<PhysicsTestMotionParameters2D> &parameters, const Ref<PhysicsTestMotionResult2D> &result) -> bool { return singleton->body_test_motion(body, parameters, result); });
	js_singleton.add((new std::string("body_get_direct_state"))->c_str(), [singleton](const RID &body) -> PhysicsDirectBodyState2D * { return singleton->body_get_direct_state(body); });
	js_singleton.add((new std::string("joint_create"))->c_str(), [singleton]() -> RID { return singleton->joint_create(); });
	js_singleton.add((new std::string("joint_clear"))->c_str(), [singleton](const RID &joint) -> void { singleton->joint_clear(joint); });
	js_singleton.add((new std::string("joint_set_param"))->c_str(), [singleton](const RID &joint, PhysicsServer2D::JointParam param, double value) -> void { singleton->joint_set_param(joint, param, value); });
	js_singleton.add((new std::string("joint_get_param"))->c_str(), [singleton](const RID &joint, PhysicsServer2D::JointParam param) -> double { return singleton->joint_get_param(joint, param); });
	js_singleton.add((new std::string("joint_disable_collisions_between_bodies"))->c_str(), [singleton](const RID &joint, bool disable) -> void { singleton->joint_disable_collisions_between_bodies(joint, disable); });
	js_singleton.add((new std::string("joint_is_disabled_collisions_between_bodies"))->c_str(), [singleton](const RID &joint) -> bool { return singleton->joint_is_disabled_collisions_between_bodies(joint); });
	js_singleton.add((new std::string("joint_make_pin"))->c_str(), [singleton](const RID &joint, const Vector2 &anchor, const RID &body_a, const RID &body_b) -> void { singleton->joint_make_pin(joint, anchor, body_a, body_b); });
	js_singleton.add((new std::string("joint_make_groove"))->c_str(), [singleton](const RID &joint, const Vector2 &groove1_a, const Vector2 &groove2_a, const Vector2 &anchor_b, const RID &body_a, const RID &body_b) -> void { singleton->joint_make_groove(joint, groove1_a, groove2_a, anchor_b, body_a, body_b); });
	js_singleton.add((new std::string("joint_make_damped_spring"))->c_str(), [singleton](const RID &joint, const Vector2 &anchor_a, const Vector2 &anchor_b, const RID &body_a, const RID &body_b) -> void { singleton->joint_make_damped_spring(joint, anchor_a, anchor_b, body_a, body_b); });
	js_singleton.add((new std::string("pin_joint_set_flag"))->c_str(), [singleton](const RID &joint, PhysicsServer2D::PinJointFlag flag, bool enabled) -> void { singleton->pin_joint_set_flag(joint, flag, enabled); });
	js_singleton.add((new std::string("pin_joint_get_flag"))->c_str(), [singleton](const RID &joint, PhysicsServer2D::PinJointFlag flag) -> bool { return singleton->pin_joint_get_flag(joint, flag); });
	js_singleton.add((new std::string("pin_joint_set_param"))->c_str(), [singleton](const RID &joint, PhysicsServer2D::PinJointParam param, double value) -> void { singleton->pin_joint_set_param(joint, param, value); });
	js_singleton.add((new std::string("pin_joint_get_param"))->c_str(), [singleton](const RID &joint, PhysicsServer2D::PinJointParam param) -> double { return singleton->pin_joint_get_param(joint, param); });
	js_singleton.add((new std::string("damped_spring_joint_set_param"))->c_str(), [singleton](const RID &joint, PhysicsServer2D::DampedSpringParam param, double value) -> void { singleton->damped_spring_joint_set_param(joint, param, value); });
	js_singleton.add((new std::string("damped_spring_joint_get_param"))->c_str(), [singleton](const RID &joint, PhysicsServer2D::DampedSpringParam param) -> double { return singleton->damped_spring_joint_get_param(joint, param); });
	js_singleton.add((new std::string("joint_get_type"))->c_str(), [singleton](const RID &joint) -> PhysicsServer2D::JointType { return singleton->joint_get_type(joint); });
	js_singleton.add((new std::string("free_rid"))->c_str(), [singleton](const RID &rid) -> void { singleton->free_rid(rid); });
	js_singleton.add((new std::string("set_active"))->c_str(), [singleton](bool active) -> void { singleton->set_active(active); });
	js_singleton.add((new std::string("get_process_info"))->c_str(), [singleton](PhysicsServer2D::ProcessInfo process_info) -> int64_t { return singleton->get_process_info(process_info); });
	context->global()[(new std::string("PhysicsServer2D"))->c_str()] = js_singleton;

	qjs::Value _SpaceParameter = context->newObject();
	_SpaceParameter[(new std::string("SPACE_PARAM_CONTACT_RECYCLE_RADIUS"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_CONTACT_RECYCLE_RADIUS;
	_SpaceParameter[(new std::string("SPACE_PARAM_CONTACT_MAX_SEPARATION"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_CONTACT_MAX_SEPARATION;
	_SpaceParameter[(new std::string("SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION;
	_SpaceParameter[(new std::string("SPACE_PARAM_CONTACT_DEFAULT_BIAS"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_CONTACT_DEFAULT_BIAS;
	_SpaceParameter[(new std::string("SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD;
	_SpaceParameter[(new std::string("SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD;
	_SpaceParameter[(new std::string("SPACE_PARAM_BODY_TIME_TO_SLEEP"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_BODY_TIME_TO_SLEEP;
	_SpaceParameter[(new std::string("SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS;
	_SpaceParameter[(new std::string("SPACE_PARAM_SOLVER_ITERATIONS"))->c_str()] = PhysicsServer2D::SpaceParameter::SPACE_PARAM_SOLVER_ITERATIONS;
	js_singleton[(new std::string("SpaceParameter"))->c_str()] = _SpaceParameter;
	qjs::Value _ShapeType = context->newObject();
	_ShapeType[(new std::string("SHAPE_WORLD_BOUNDARY"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_WORLD_BOUNDARY;
	_ShapeType[(new std::string("SHAPE_SEPARATION_RAY"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_SEPARATION_RAY;
	_ShapeType[(new std::string("SHAPE_SEGMENT"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_SEGMENT;
	_ShapeType[(new std::string("SHAPE_CIRCLE"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_CIRCLE;
	_ShapeType[(new std::string("SHAPE_RECTANGLE"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_RECTANGLE;
	_ShapeType[(new std::string("SHAPE_CAPSULE"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_CAPSULE;
	_ShapeType[(new std::string("SHAPE_CONVEX_POLYGON"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_CONVEX_POLYGON;
	_ShapeType[(new std::string("SHAPE_CONCAVE_POLYGON"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_CONCAVE_POLYGON;
	_ShapeType[(new std::string("SHAPE_CUSTOM"))->c_str()] = PhysicsServer2D::ShapeType::SHAPE_CUSTOM;
	js_singleton[(new std::string("ShapeType"))->c_str()] = _ShapeType;
	qjs::Value _AreaParameter = context->newObject();
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY_OVERRIDE_MODE"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_GRAVITY_OVERRIDE_MODE;
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_GRAVITY;
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY_VECTOR"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_GRAVITY_VECTOR;
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY_IS_POINT"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_GRAVITY_IS_POINT;
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE;
	_AreaParameter[(new std::string("AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE;
	_AreaParameter[(new std::string("AREA_PARAM_LINEAR_DAMP"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_LINEAR_DAMP;
	_AreaParameter[(new std::string("AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE;
	_AreaParameter[(new std::string("AREA_PARAM_ANGULAR_DAMP"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_ANGULAR_DAMP;
	_AreaParameter[(new std::string("AREA_PARAM_PRIORITY"))->c_str()] = PhysicsServer2D::AreaParameter::AREA_PARAM_PRIORITY;
	js_singleton[(new std::string("AreaParameter"))->c_str()] = _AreaParameter;
	qjs::Value _AreaSpaceOverrideMode = context->newObject();
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_DISABLED"))->c_str()] = PhysicsServer2D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_DISABLED;
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_COMBINE"))->c_str()] = PhysicsServer2D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_COMBINE;
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_COMBINE_REPLACE"))->c_str()] = PhysicsServer2D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_COMBINE_REPLACE;
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_REPLACE"))->c_str()] = PhysicsServer2D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_REPLACE;
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_REPLACE_COMBINE"))->c_str()] = PhysicsServer2D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_REPLACE_COMBINE;
	js_singleton[(new std::string("AreaSpaceOverrideMode"))->c_str()] = _AreaSpaceOverrideMode;
	qjs::Value _BodyMode = context->newObject();
	_BodyMode[(new std::string("BODY_MODE_STATIC"))->c_str()] = PhysicsServer2D::BodyMode::BODY_MODE_STATIC;
	_BodyMode[(new std::string("BODY_MODE_KINEMATIC"))->c_str()] = PhysicsServer2D::BodyMode::BODY_MODE_KINEMATIC;
	_BodyMode[(new std::string("BODY_MODE_RIGID"))->c_str()] = PhysicsServer2D::BodyMode::BODY_MODE_RIGID;
	_BodyMode[(new std::string("BODY_MODE_RIGID_LINEAR"))->c_str()] = PhysicsServer2D::BodyMode::BODY_MODE_RIGID_LINEAR;
	js_singleton[(new std::string("BodyMode"))->c_str()] = _BodyMode;
	qjs::Value _BodyParameter = context->newObject();
	_BodyParameter[(new std::string("BODY_PARAM_BOUNCE"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_BOUNCE;
	_BodyParameter[(new std::string("BODY_PARAM_FRICTION"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_FRICTION;
	_BodyParameter[(new std::string("BODY_PARAM_MASS"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_MASS;
	_BodyParameter[(new std::string("BODY_PARAM_INERTIA"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_INERTIA;
	_BodyParameter[(new std::string("BODY_PARAM_CENTER_OF_MASS"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_CENTER_OF_MASS;
	_BodyParameter[(new std::string("BODY_PARAM_GRAVITY_SCALE"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_GRAVITY_SCALE;
	_BodyParameter[(new std::string("BODY_PARAM_LINEAR_DAMP_MODE"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_LINEAR_DAMP_MODE;
	_BodyParameter[(new std::string("BODY_PARAM_ANGULAR_DAMP_MODE"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_ANGULAR_DAMP_MODE;
	_BodyParameter[(new std::string("BODY_PARAM_LINEAR_DAMP"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_LINEAR_DAMP;
	_BodyParameter[(new std::string("BODY_PARAM_ANGULAR_DAMP"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_ANGULAR_DAMP;
	_BodyParameter[(new std::string("BODY_PARAM_MAX"))->c_str()] = PhysicsServer2D::BodyParameter::BODY_PARAM_MAX;
	js_singleton[(new std::string("BodyParameter"))->c_str()] = _BodyParameter;
	qjs::Value _BodyDampMode = context->newObject();
	_BodyDampMode[(new std::string("BODY_DAMP_MODE_COMBINE"))->c_str()] = PhysicsServer2D::BodyDampMode::BODY_DAMP_MODE_COMBINE;
	_BodyDampMode[(new std::string("BODY_DAMP_MODE_REPLACE"))->c_str()] = PhysicsServer2D::BodyDampMode::BODY_DAMP_MODE_REPLACE;
	js_singleton[(new std::string("BodyDampMode"))->c_str()] = _BodyDampMode;
	qjs::Value _BodyState = context->newObject();
	_BodyState[(new std::string("BODY_STATE_TRANSFORM"))->c_str()] = PhysicsServer2D::BodyState::BODY_STATE_TRANSFORM;
	_BodyState[(new std::string("BODY_STATE_LINEAR_VELOCITY"))->c_str()] = PhysicsServer2D::BodyState::BODY_STATE_LINEAR_VELOCITY;
	_BodyState[(new std::string("BODY_STATE_ANGULAR_VELOCITY"))->c_str()] = PhysicsServer2D::BodyState::BODY_STATE_ANGULAR_VELOCITY;
	_BodyState[(new std::string("BODY_STATE_SLEEPING"))->c_str()] = PhysicsServer2D::BodyState::BODY_STATE_SLEEPING;
	_BodyState[(new std::string("BODY_STATE_CAN_SLEEP"))->c_str()] = PhysicsServer2D::BodyState::BODY_STATE_CAN_SLEEP;
	js_singleton[(new std::string("BodyState"))->c_str()] = _BodyState;
	qjs::Value _JointType = context->newObject();
	_JointType[(new std::string("JOINT_TYPE_PIN"))->c_str()] = PhysicsServer2D::JointType::JOINT_TYPE_PIN;
	_JointType[(new std::string("JOINT_TYPE_GROOVE"))->c_str()] = PhysicsServer2D::JointType::JOINT_TYPE_GROOVE;
	_JointType[(new std::string("JOINT_TYPE_DAMPED_SPRING"))->c_str()] = PhysicsServer2D::JointType::JOINT_TYPE_DAMPED_SPRING;
	_JointType[(new std::string("JOINT_TYPE_MAX"))->c_str()] = PhysicsServer2D::JointType::JOINT_TYPE_MAX;
	js_singleton[(new std::string("JointType"))->c_str()] = _JointType;
	qjs::Value _JointParam = context->newObject();
	_JointParam[(new std::string("JOINT_PARAM_BIAS"))->c_str()] = PhysicsServer2D::JointParam::JOINT_PARAM_BIAS;
	_JointParam[(new std::string("JOINT_PARAM_MAX_BIAS"))->c_str()] = PhysicsServer2D::JointParam::JOINT_PARAM_MAX_BIAS;
	_JointParam[(new std::string("JOINT_PARAM_MAX_FORCE"))->c_str()] = PhysicsServer2D::JointParam::JOINT_PARAM_MAX_FORCE;
	js_singleton[(new std::string("JointParam"))->c_str()] = _JointParam;
	qjs::Value _PinJointParam = context->newObject();
	_PinJointParam[(new std::string("PIN_JOINT_SOFTNESS"))->c_str()] = PhysicsServer2D::PinJointParam::PIN_JOINT_SOFTNESS;
	_PinJointParam[(new std::string("PIN_JOINT_LIMIT_UPPER"))->c_str()] = PhysicsServer2D::PinJointParam::PIN_JOINT_LIMIT_UPPER;
	_PinJointParam[(new std::string("PIN_JOINT_LIMIT_LOWER"))->c_str()] = PhysicsServer2D::PinJointParam::PIN_JOINT_LIMIT_LOWER;
	_PinJointParam[(new std::string("PIN_JOINT_MOTOR_TARGET_VELOCITY"))->c_str()] = PhysicsServer2D::PinJointParam::PIN_JOINT_MOTOR_TARGET_VELOCITY;
	js_singleton[(new std::string("PinJointParam"))->c_str()] = _PinJointParam;
	qjs::Value _PinJointFlag = context->newObject();
	_PinJointFlag[(new std::string("PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED"))->c_str()] = PhysicsServer2D::PinJointFlag::PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED;
	_PinJointFlag[(new std::string("PIN_JOINT_FLAG_MOTOR_ENABLED"))->c_str()] = PhysicsServer2D::PinJointFlag::PIN_JOINT_FLAG_MOTOR_ENABLED;
	js_singleton[(new std::string("PinJointFlag"))->c_str()] = _PinJointFlag;
	qjs::Value _DampedSpringParam = context->newObject();
	_DampedSpringParam[(new std::string("DAMPED_SPRING_REST_LENGTH"))->c_str()] = PhysicsServer2D::DampedSpringParam::DAMPED_SPRING_REST_LENGTH;
	_DampedSpringParam[(new std::string("DAMPED_SPRING_STIFFNESS"))->c_str()] = PhysicsServer2D::DampedSpringParam::DAMPED_SPRING_STIFFNESS;
	_DampedSpringParam[(new std::string("DAMPED_SPRING_DAMPING"))->c_str()] = PhysicsServer2D::DampedSpringParam::DAMPED_SPRING_DAMPING;
	js_singleton[(new std::string("DampedSpringParam"))->c_str()] = _DampedSpringParam;
	qjs::Value _CCDMode = context->newObject();
	_CCDMode[(new std::string("CCD_MODE_DISABLED"))->c_str()] = PhysicsServer2D::CCDMode::CCD_MODE_DISABLED;
	_CCDMode[(new std::string("CCD_MODE_CAST_RAY"))->c_str()] = PhysicsServer2D::CCDMode::CCD_MODE_CAST_RAY;
	_CCDMode[(new std::string("CCD_MODE_CAST_SHAPE"))->c_str()] = PhysicsServer2D::CCDMode::CCD_MODE_CAST_SHAPE;
	js_singleton[(new std::string("CCDMode"))->c_str()] = _CCDMode;
	qjs::Value _AreaBodyStatus = context->newObject();
	_AreaBodyStatus[(new std::string("AREA_BODY_ADDED"))->c_str()] = PhysicsServer2D::AreaBodyStatus::AREA_BODY_ADDED;
	_AreaBodyStatus[(new std::string("AREA_BODY_REMOVED"))->c_str()] = PhysicsServer2D::AreaBodyStatus::AREA_BODY_REMOVED;
	js_singleton[(new std::string("AreaBodyStatus"))->c_str()] = _AreaBodyStatus;
	qjs::Value _ProcessInfo = context->newObject();
	_ProcessInfo[(new std::string("INFO_ACTIVE_OBJECTS"))->c_str()] = PhysicsServer2D::ProcessInfo::INFO_ACTIVE_OBJECTS;
	_ProcessInfo[(new std::string("INFO_COLLISION_PAIRS"))->c_str()] = PhysicsServer2D::ProcessInfo::INFO_COLLISION_PAIRS;
	_ProcessInfo[(new std::string("INFO_ISLAND_COUNT"))->c_str()] = PhysicsServer2D::ProcessInfo::INFO_ISLAND_COUNT;
	js_singleton[(new std::string("ProcessInfo"))->c_str()] = _ProcessInfo;
}