#include "register/register_classes.h"
#include "register/utils.h"
#include <godot_cpp/classes/tree.hpp>

using namespace godot;

void register_classes_Tree() {
    qjs::Context::Module &_module = _Control;
    _module.class_<Tree>("Tree")
           .constructor<>()
           .property<Tree::get_columns, Tree::set_columns>("columns")
           .property<Tree::are_column_titles_visible, Tree::set_column_titles_visible>("column_titles_visible")
           .property<Tree::get_allow_reselect, Tree::set_allow_reselect>("allow_reselect")
           .property<Tree::get_allow_rmb_select, Tree::set_allow_rmb_select>("allow_rmb_select")
           .property<Tree::get_allow_search, Tree::set_allow_search>("allow_search")
           .property<Tree::is_folding_hidden, Tree::set_hide_folding>("hide_folding")
           .property<Tree::is_recursive_folding_enabled, Tree::set_enable_recursive_folding>("enable_recursive_folding")
           .property<Tree::is_root_hidden, Tree::set_hide_root>("hide_root")
           .property<Tree::get_drop_mode_flags, Tree::set_drop_mode_flags>("drop_mode_flags")
           .property<Tree::get_select_mode, Tree::set_select_mode>("select_mode")
           .property<Tree::is_h_scroll_enabled, Tree::set_h_scroll_enabled>("scroll_horizontal_enabled")
           .property<Tree::is_v_scroll_enabled, Tree::set_v_scroll_enabled>("scroll_vertical_enabled")
		    .fun<static_cast<void(Tree::*)()>(&Tree::clear)>("clear")
		    .fun<static_cast<TreeItem *(Tree::*)(TreeItem *,int32_t)>(&Tree::create_item)>("create_item")
		    .fun<static_cast<TreeItem *(Tree::*)()const>(&Tree::get_root)>("get_root")
		    .fun<static_cast<void(Tree::*)(int32_t,int32_t)>(&Tree::set_column_custom_minimum_width)>("set_column_custom_minimum_width")
		    .fun<static_cast<void(Tree::*)(int32_t,bool)>(&Tree::set_column_expand)>("set_column_expand")
		    .fun<static_cast<void(Tree::*)(int32_t,int32_t)>(&Tree::set_column_expand_ratio)>("set_column_expand_ratio")
		    .fun<static_cast<void(Tree::*)(int32_t,bool)>(&Tree::set_column_clip_content)>("set_column_clip_content")
		    .fun<static_cast<bool(Tree::*)(int32_t)const>(&Tree::is_column_expanding)>("is_column_expanding")
		    .fun<static_cast<bool(Tree::*)(int32_t)const>(&Tree::is_column_clipping_content)>("is_column_clipping_content")
		    .fun<static_cast<int32_t(Tree::*)(int32_t)const>(&Tree::get_column_expand_ratio)>("get_column_expand_ratio")
		    .fun<static_cast<int32_t(Tree::*)(int32_t)const>(&Tree::get_column_width)>("get_column_width")
		    .fun<static_cast<TreeItem *(Tree::*)(TreeItem *)>(&Tree::get_next_selected)>("get_next_selected")
		    .fun<static_cast<TreeItem *(Tree::*)()const>(&Tree::get_selected)>("get_selected")
		    .fun<static_cast<void(Tree::*)(TreeItem *,int32_t)>(&Tree::set_selected)>("set_selected")
		    .fun<static_cast<int32_t(Tree::*)()const>(&Tree::get_selected_column)>("get_selected_column")
		    .fun<static_cast<int32_t(Tree::*)()const>(&Tree::get_pressed_button)>("get_pressed_button")
		    .fun<static_cast<void(Tree::*)()>(&Tree::deselect_all)>("deselect_all")
		    .fun<static_cast<TreeItem *(Tree::*)()const>(&Tree::get_edited)>("get_edited")
		    .fun<static_cast<int32_t(Tree::*)()const>(&Tree::get_edited_column)>("get_edited_column")
		    .fun<static_cast<bool(Tree::*)(bool)>(&Tree::edit_selected)>("edit_selected")
		    .fun<static_cast<Rect2(Tree::*)()const>(&Tree::get_custom_popup_rect)>("get_custom_popup_rect")
		    .fun<static_cast<Rect2(Tree::*)(TreeItem *,int32_t,int32_t)const>(&Tree::get_item_area_rect)>("get_item_area_rect")
		    .fun<static_cast<TreeItem *(Tree::*)(const Vector2 &)const>(&Tree::get_item_at_position)>("get_item_at_position")
		    .fun<static_cast<int32_t(Tree::*)(const Vector2 &)const>(&Tree::get_column_at_position)>("get_column_at_position")
		    .fun<static_cast<int32_t(Tree::*)(const Vector2 &)const>(&Tree::get_drop_section_at_position)>("get_drop_section_at_position")
		    .fun<static_cast<int32_t(Tree::*)(const Vector2 &)const>(&Tree::get_button_id_at_position)>("get_button_id_at_position")
		    .fun<static_cast<void(Tree::*)()>(&Tree::ensure_cursor_is_visible)>("ensure_cursor_is_visible")
		    .fun<static_cast<void(Tree::*)(int32_t,const String &)>(&Tree::set_column_title)>("set_column_title")
		    .fun<static_cast<String(Tree::*)(int32_t)const>(&Tree::get_column_title)>("get_column_title")
		    .fun<static_cast<void(Tree::*)(int32_t,HorizontalAlignment)>(&Tree::set_column_title_alignment)>("set_column_title_alignment")
		    .fun<static_cast<HorizontalAlignment(Tree::*)(int32_t)const>(&Tree::get_column_title_alignment)>("get_column_title_alignment")
		    .fun<static_cast<void(Tree::*)(int32_t,Control::TextDirection)>(&Tree::set_column_title_direction)>("set_column_title_direction")
		    .fun<static_cast<Control::TextDirection(Tree::*)(int32_t)const>(&Tree::get_column_title_direction)>("get_column_title_direction")
		    .fun<static_cast<void(Tree::*)(int32_t,const String &)>(&Tree::set_column_title_language)>("set_column_title_language")
		    .fun<static_cast<String(Tree::*)(int32_t)const>(&Tree::get_column_title_language)>("get_column_title_language")
		    .fun<static_cast<Vector2(Tree::*)()const>(&Tree::get_scroll)>("get_scroll")
		    .fun<static_cast<void(Tree::*)(TreeItem *,bool)>(&Tree::scroll_to_item)>("scroll_to_item")
;}