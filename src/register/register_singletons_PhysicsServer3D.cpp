
#include <godot_cpp/classes/physics_direct_body_state3d.hpp>
#include <godot_cpp/classes/physics_direct_space_state3d.hpp>
#include <godot_cpp/classes/physics_server3d.hpp>
#include <godot_cpp/classes/physics_server3d_rendering_server_handler.hpp>
#include <godot_cpp/classes/physics_test_motion_parameters3d.hpp>
#include <godot_cpp/classes/physics_test_motion_result3d.hpp>
#include <godot_cpp/classes/ref.hpp>
#include <godot_cpp/variant/aabb.hpp>
#include <godot_cpp/variant/callable.hpp>
#include <godot_cpp/variant/rid.hpp>
#include <godot_cpp/variant/transform3d.hpp>
#include <godot_cpp/variant/variant.hpp>
#include <godot_cpp/variant/vector3.hpp>
#include <string>

#include "qjspp.hpp"
#include "qjspp/utils.h"
#include "register/register_classes.h"

using namespace godot;

void register_singletons_PhysicsServer3D() {
	qjs::Value js_singleton = context->newObject();
	PhysicsServer3D *singleton = PhysicsServer3D::get_singleton();
	js_singleton.add((new std::string("world_boundary_shape_create"))->c_str(), [singleton]() -> RID { return singleton->world_boundary_shape_create(); });
	js_singleton.add((new std::string("separation_ray_shape_create"))->c_str(), [singleton]() -> RID { return singleton->separation_ray_shape_create(); });
	js_singleton.add((new std::string("sphere_shape_create"))->c_str(), [singleton]() -> RID { return singleton->sphere_shape_create(); });
	js_singleton.add((new std::string("box_shape_create"))->c_str(), [singleton]() -> RID { return singleton->box_shape_create(); });
	js_singleton.add((new std::string("capsule_shape_create"))->c_str(), [singleton]() -> RID { return singleton->capsule_shape_create(); });
	js_singleton.add((new std::string("cylinder_shape_create"))->c_str(), [singleton]() -> RID { return singleton->cylinder_shape_create(); });
	js_singleton.add((new std::string("convex_polygon_shape_create"))->c_str(), [singleton]() -> RID { return singleton->convex_polygon_shape_create(); });
	js_singleton.add((new std::string("concave_polygon_shape_create"))->c_str(), [singleton]() -> RID { return singleton->concave_polygon_shape_create(); });
	js_singleton.add((new std::string("heightmap_shape_create"))->c_str(), [singleton]() -> RID { return singleton->heightmap_shape_create(); });
	js_singleton.add((new std::string("custom_shape_create"))->c_str(), [singleton]() -> RID { return singleton->custom_shape_create(); });
	js_singleton.add((new std::string("shape_set_data"))->c_str(), [singleton](const RID &shape, const Variant &data) -> void { singleton->shape_set_data(shape, data); });
	js_singleton.add((new std::string("shape_set_margin"))->c_str(), [singleton](const RID &shape, double margin) -> void { singleton->shape_set_margin(shape, margin); });
	js_singleton.add((new std::string("shape_get_type"))->c_str(), [singleton](const RID &shape) -> PhysicsServer3D::ShapeType { return singleton->shape_get_type(shape); });
	js_singleton.add((new std::string("shape_get_data"))->c_str(), [singleton](const RID &shape) -> Variant { return singleton->shape_get_data(shape); });
	js_singleton.add((new std::string("shape_get_margin"))->c_str(), [singleton](const RID &shape) -> double { return singleton->shape_get_margin(shape); });
	js_singleton.add((new std::string("space_create"))->c_str(), [singleton]() -> RID { return singleton->space_create(); });
	js_singleton.add((new std::string("space_set_active"))->c_str(), [singleton](const RID &space, bool active) -> void { singleton->space_set_active(space, active); });
	js_singleton.add((new std::string("space_is_active"))->c_str(), [singleton](const RID &space) -> bool { return singleton->space_is_active(space); });
	js_singleton.add((new std::string("space_set_param"))->c_str(), [singleton](const RID &space, PhysicsServer3D::SpaceParameter param, double value) -> void { singleton->space_set_param(space, param, value); });
	js_singleton.add((new std::string("space_get_param"))->c_str(), [singleton](const RID &space, PhysicsServer3D::SpaceParameter param) -> double { return singleton->space_get_param(space, param); });
	js_singleton.add((new std::string("space_get_direct_state"))->c_str(), [singleton](const RID &space) -> PhysicsDirectSpaceState3D * { return singleton->space_get_direct_state(space); });
	js_singleton.add((new std::string("area_create"))->c_str(), [singleton]() -> RID { return singleton->area_create(); });
	js_singleton.add((new std::string("area_set_space"))->c_str(), [singleton](const RID &area, const RID &space) -> void { singleton->area_set_space(area, space); });
	js_singleton.add((new std::string("area_get_space"))->c_str(), [singleton](const RID &area) -> RID { return singleton->area_get_space(area); });
	js_singleton.add((new std::string("area_add_shape"))->c_str(), [singleton](const RID &area, const RID &shape, const Transform3D &transform, bool disabled) -> void { singleton->area_add_shape(area, shape, transform, disabled); });
	js_singleton.add((new std::string("area_set_shape"))->c_str(), [singleton](const RID &area, int32_t shape_idx, const RID &shape) -> void { singleton->area_set_shape(area, shape_idx, shape); });
	js_singleton.add((new std::string("area_set_shape_transform"))->c_str(), [singleton](const RID &area, int32_t shape_idx, const Transform3D &transform) -> void { singleton->area_set_shape_transform(area, shape_idx, transform); });
	js_singleton.add((new std::string("area_set_shape_disabled"))->c_str(), [singleton](const RID &area, int32_t shape_idx, bool disabled) -> void { singleton->area_set_shape_disabled(area, shape_idx, disabled); });
	js_singleton.add((new std::string("area_get_shape_count"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_shape_count(area); });
	js_singleton.add((new std::string("area_get_shape"))->c_str(), [singleton](const RID &area, int32_t shape_idx) -> RID { return singleton->area_get_shape(area, shape_idx); });
	js_singleton.add((new std::string("area_get_shape_transform"))->c_str(), [singleton](const RID &area, int32_t shape_idx) -> Transform3D { return singleton->area_get_shape_transform(area, shape_idx); });
	js_singleton.add((new std::string("area_remove_shape"))->c_str(), [singleton](const RID &area, int32_t shape_idx) -> void { singleton->area_remove_shape(area, shape_idx); });
	js_singleton.add((new std::string("area_clear_shapes"))->c_str(), [singleton](const RID &area) -> void { singleton->area_clear_shapes(area); });
	js_singleton.add((new std::string("area_set_collision_layer"))->c_str(), [singleton](const RID &area, uint32_t layer) -> void { singleton->area_set_collision_layer(area, layer); });
	js_singleton.add((new std::string("area_get_collision_layer"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_collision_layer(area); });
	js_singleton.add((new std::string("area_set_collision_mask"))->c_str(), [singleton](const RID &area, uint32_t mask) -> void { singleton->area_set_collision_mask(area, mask); });
	js_singleton.add((new std::string("area_get_collision_mask"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_collision_mask(area); });
	js_singleton.add((new std::string("area_set_param"))->c_str(), [singleton](const RID &area, PhysicsServer3D::AreaParameter param, const Variant &value) -> void { singleton->area_set_param(area, param, value); });
	js_singleton.add((new std::string("area_set_transform"))->c_str(), [singleton](const RID &area, const Transform3D &transform) -> void { singleton->area_set_transform(area, transform); });
	js_singleton.add((new std::string("area_get_param"))->c_str(), [singleton](const RID &area, PhysicsServer3D::AreaParameter param) -> Variant { return singleton->area_get_param(area, param); });
	js_singleton.add((new std::string("area_get_transform"))->c_str(), [singleton](const RID &area) -> Transform3D { return singleton->area_get_transform(area); });
	js_singleton.add((new std::string("area_attach_object_instance_id"))->c_str(), [singleton](const RID &area, uint64_t id) -> void { singleton->area_attach_object_instance_id(area, id); });
	js_singleton.add((new std::string("area_get_object_instance_id"))->c_str(), [singleton](const RID &area) -> int64_t { return singleton->area_get_object_instance_id(area); });
	js_singleton.add((new std::string("area_set_monitor_callback"))->c_str(), [singleton](const RID &area, const Callable &callback) -> void { singleton->area_set_monitor_callback(area, callback); });
	js_singleton.add((new std::string("area_set_area_monitor_callback"))->c_str(), [singleton](const RID &area, const Callable &callback) -> void { singleton->area_set_area_monitor_callback(area, callback); });
	js_singleton.add((new std::string("area_set_monitorable"))->c_str(), [singleton](const RID &area, bool monitorable) -> void { singleton->area_set_monitorable(area, monitorable); });
	js_singleton.add((new std::string("area_set_ray_pickable"))->c_str(), [singleton](const RID &area, bool enable) -> void { singleton->area_set_ray_pickable(area, enable); });
	js_singleton.add((new std::string("body_create"))->c_str(), [singleton]() -> RID { return singleton->body_create(); });
	js_singleton.add((new std::string("body_set_space"))->c_str(), [singleton](const RID &body, const RID &space) -> void { singleton->body_set_space(body, space); });
	js_singleton.add((new std::string("body_get_space"))->c_str(), [singleton](const RID &body) -> RID { return singleton->body_get_space(body); });
	js_singleton.add((new std::string("body_set_mode"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyMode mode) -> void { singleton->body_set_mode(body, mode); });
	js_singleton.add((new std::string("body_get_mode"))->c_str(), [singleton](const RID &body) -> PhysicsServer3D::BodyMode { return singleton->body_get_mode(body); });
	js_singleton.add((new std::string("body_set_collision_layer"))->c_str(), [singleton](const RID &body, uint32_t layer) -> void { singleton->body_set_collision_layer(body, layer); });
	js_singleton.add((new std::string("body_get_collision_layer"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_collision_layer(body); });
	js_singleton.add((new std::string("body_set_collision_mask"))->c_str(), [singleton](const RID &body, uint32_t mask) -> void { singleton->body_set_collision_mask(body, mask); });
	js_singleton.add((new std::string("body_get_collision_mask"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_collision_mask(body); });
	js_singleton.add((new std::string("body_set_collision_priority"))->c_str(), [singleton](const RID &body, double priority) -> void { singleton->body_set_collision_priority(body, priority); });
	js_singleton.add((new std::string("body_get_collision_priority"))->c_str(), [singleton](const RID &body) -> double { return singleton->body_get_collision_priority(body); });
	js_singleton.add((new std::string("body_add_shape"))->c_str(), [singleton](const RID &body, const RID &shape, const Transform3D &transform, bool disabled) -> void { singleton->body_add_shape(body, shape, transform, disabled); });
	js_singleton.add((new std::string("body_set_shape"))->c_str(), [singleton](const RID &body, int32_t shape_idx, const RID &shape) -> void { singleton->body_set_shape(body, shape_idx, shape); });
	js_singleton.add((new std::string("body_set_shape_transform"))->c_str(), [singleton](const RID &body, int32_t shape_idx, const Transform3D &transform) -> void { singleton->body_set_shape_transform(body, shape_idx, transform); });
	js_singleton.add((new std::string("body_set_shape_disabled"))->c_str(), [singleton](const RID &body, int32_t shape_idx, bool disabled) -> void { singleton->body_set_shape_disabled(body, shape_idx, disabled); });
	js_singleton.add((new std::string("body_get_shape_count"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_shape_count(body); });
	js_singleton.add((new std::string("body_get_shape"))->c_str(), [singleton](const RID &body, int32_t shape_idx) -> RID { return singleton->body_get_shape(body, shape_idx); });
	js_singleton.add((new std::string("body_get_shape_transform"))->c_str(), [singleton](const RID &body, int32_t shape_idx) -> Transform3D { return singleton->body_get_shape_transform(body, shape_idx); });
	js_singleton.add((new std::string("body_remove_shape"))->c_str(), [singleton](const RID &body, int32_t shape_idx) -> void { singleton->body_remove_shape(body, shape_idx); });
	js_singleton.add((new std::string("body_clear_shapes"))->c_str(), [singleton](const RID &body) -> void { singleton->body_clear_shapes(body); });
	js_singleton.add((new std::string("body_attach_object_instance_id"))->c_str(), [singleton](const RID &body, uint64_t id) -> void { singleton->body_attach_object_instance_id(body, id); });
	js_singleton.add((new std::string("body_get_object_instance_id"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_object_instance_id(body); });
	js_singleton.add((new std::string("body_set_enable_continuous_collision_detection"))->c_str(), [singleton](const RID &body, bool enable) -> void { singleton->body_set_enable_continuous_collision_detection(body, enable); });
	js_singleton.add((new std::string("body_is_continuous_collision_detection_enabled"))->c_str(), [singleton](const RID &body) -> bool { return singleton->body_is_continuous_collision_detection_enabled(body); });
	js_singleton.add((new std::string("body_set_param"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyParameter param, const Variant &value) -> void { singleton->body_set_param(body, param, value); });
	js_singleton.add((new std::string("body_get_param"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyParameter param) -> Variant { return singleton->body_get_param(body, param); });
	js_singleton.add((new std::string("body_reset_mass_properties"))->c_str(), [singleton](const RID &body) -> void { singleton->body_reset_mass_properties(body); });
	js_singleton.add((new std::string("body_set_state"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyState state, const Variant &value) -> void { singleton->body_set_state(body, state, value); });
	js_singleton.add((new std::string("body_get_state"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyState state) -> Variant { return singleton->body_get_state(body, state); });
	js_singleton.add((new std::string("body_apply_central_impulse"))->c_str(), [singleton](const RID &body, const Vector3 &impulse) -> void { singleton->body_apply_central_impulse(body, impulse); });
	js_singleton.add((new std::string("body_apply_impulse"))->c_str(), [singleton](const RID &body, const Vector3 &impulse, const Vector3 &position) -> void { singleton->body_apply_impulse(body, impulse, position); });
	js_singleton.add((new std::string("body_apply_torque_impulse"))->c_str(), [singleton](const RID &body, const Vector3 &impulse) -> void { singleton->body_apply_torque_impulse(body, impulse); });
	js_singleton.add((new std::string("body_apply_central_force"))->c_str(), [singleton](const RID &body, const Vector3 &force) -> void { singleton->body_apply_central_force(body, force); });
	js_singleton.add((new std::string("body_apply_force"))->c_str(), [singleton](const RID &body, const Vector3 &force, const Vector3 &position) -> void { singleton->body_apply_force(body, force, position); });
	js_singleton.add((new std::string("body_apply_torque"))->c_str(), [singleton](const RID &body, const Vector3 &torque) -> void { singleton->body_apply_torque(body, torque); });
	js_singleton.add((new std::string("body_add_constant_central_force"))->c_str(), [singleton](const RID &body, const Vector3 &force) -> void { singleton->body_add_constant_central_force(body, force); });
	js_singleton.add((new std::string("body_add_constant_force"))->c_str(), [singleton](const RID &body, const Vector3 &force, const Vector3 &position) -> void { singleton->body_add_constant_force(body, force, position); });
	js_singleton.add((new std::string("body_add_constant_torque"))->c_str(), [singleton](const RID &body, const Vector3 &torque) -> void { singleton->body_add_constant_torque(body, torque); });
	js_singleton.add((new std::string("body_set_constant_force"))->c_str(), [singleton](const RID &body, const Vector3 &force) -> void { singleton->body_set_constant_force(body, force); });
	js_singleton.add((new std::string("body_get_constant_force"))->c_str(), [singleton](const RID &body) -> Vector3 { return singleton->body_get_constant_force(body); });
	js_singleton.add((new std::string("body_set_constant_torque"))->c_str(), [singleton](const RID &body, const Vector3 &torque) -> void { singleton->body_set_constant_torque(body, torque); });
	js_singleton.add((new std::string("body_get_constant_torque"))->c_str(), [singleton](const RID &body) -> Vector3 { return singleton->body_get_constant_torque(body); });
	js_singleton.add((new std::string("body_set_axis_velocity"))->c_str(), [singleton](const RID &body, const Vector3 &axis_velocity) -> void { singleton->body_set_axis_velocity(body, axis_velocity); });
	js_singleton.add((new std::string("body_set_axis_lock"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyAxis axis, bool lock) -> void { singleton->body_set_axis_lock(body, axis, lock); });
	js_singleton.add((new std::string("body_is_axis_locked"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyAxis axis) -> bool { return singleton->body_is_axis_locked(body, axis); });
	js_singleton.add((new std::string("body_add_collision_exception"))->c_str(), [singleton](const RID &body, const RID &excepted_body) -> void { singleton->body_add_collision_exception(body, excepted_body); });
	js_singleton.add((new std::string("body_remove_collision_exception"))->c_str(), [singleton](const RID &body, const RID &excepted_body) -> void { singleton->body_remove_collision_exception(body, excepted_body); });
	js_singleton.add((new std::string("body_set_max_contacts_reported"))->c_str(), [singleton](const RID &body, int32_t amount) -> void { singleton->body_set_max_contacts_reported(body, amount); });
	js_singleton.add((new std::string("body_get_max_contacts_reported"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->body_get_max_contacts_reported(body); });
	js_singleton.add((new std::string("body_set_omit_force_integration"))->c_str(), [singleton](const RID &body, bool enable) -> void { singleton->body_set_omit_force_integration(body, enable); });
	js_singleton.add((new std::string("body_is_omitting_force_integration"))->c_str(), [singleton](const RID &body) -> bool { return singleton->body_is_omitting_force_integration(body); });
	js_singleton.add((new std::string("body_set_force_integration_callback"))->c_str(), [singleton](const RID &body, const Callable &callable, const Variant &userdata) -> void { singleton->body_set_force_integration_callback(body, callable, userdata); });
	js_singleton.add((new std::string("body_set_ray_pickable"))->c_str(), [singleton](const RID &body, bool enable) -> void { singleton->body_set_ray_pickable(body, enable); });
	js_singleton.add((new std::string("body_test_motion"))->c_str(), [singleton](const RID &body, const Ref<PhysicsTestMotionParameters3D> &parameters, const Ref<PhysicsTestMotionResult3D> &result) -> bool { return singleton->body_test_motion(body, parameters, result); });
	js_singleton.add((new std::string("body_get_direct_state"))->c_str(), [singleton](const RID &body) -> PhysicsDirectBodyState3D * { return singleton->body_get_direct_state(body); });
	js_singleton.add((new std::string("soft_body_create"))->c_str(), [singleton]() -> RID { return singleton->soft_body_create(); });
	js_singleton.add((new std::string("soft_body_update_rendering_server"))->c_str(), [singleton](const RID &body, PhysicsServer3DRenderingServerHandler *rendering_server_handler) -> void { singleton->soft_body_update_rendering_server(body, rendering_server_handler); });
	js_singleton.add((new std::string("soft_body_set_space"))->c_str(), [singleton](const RID &body, const RID &space) -> void { singleton->soft_body_set_space(body, space); });
	js_singleton.add((new std::string("soft_body_get_space"))->c_str(), [singleton](const RID &body) -> RID { return singleton->soft_body_get_space(body); });
	js_singleton.add((new std::string("soft_body_set_mesh"))->c_str(), [singleton](const RID &body, const RID &mesh) -> void { singleton->soft_body_set_mesh(body, mesh); });
	js_singleton.add((new std::string("soft_body_get_bounds"))->c_str(), [singleton](const RID &body) -> AABB { return singleton->soft_body_get_bounds(body); });
	js_singleton.add((new std::string("soft_body_set_collision_layer"))->c_str(), [singleton](const RID &body, uint32_t layer) -> void { singleton->soft_body_set_collision_layer(body, layer); });
	js_singleton.add((new std::string("soft_body_get_collision_layer"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->soft_body_get_collision_layer(body); });
	js_singleton.add((new std::string("soft_body_set_collision_mask"))->c_str(), [singleton](const RID &body, uint32_t mask) -> void { singleton->soft_body_set_collision_mask(body, mask); });
	js_singleton.add((new std::string("soft_body_get_collision_mask"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->soft_body_get_collision_mask(body); });
	js_singleton.add((new std::string("soft_body_add_collision_exception"))->c_str(), [singleton](const RID &body, const RID &body_b) -> void { singleton->soft_body_add_collision_exception(body, body_b); });
	js_singleton.add((new std::string("soft_body_remove_collision_exception"))->c_str(), [singleton](const RID &body, const RID &body_b) -> void { singleton->soft_body_remove_collision_exception(body, body_b); });
	js_singleton.add((new std::string("soft_body_set_state"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyState state, const Variant &variant) -> void { singleton->soft_body_set_state(body, state, variant); });
	js_singleton.add((new std::string("soft_body_get_state"))->c_str(), [singleton](const RID &body, PhysicsServer3D::BodyState state) -> Variant { return singleton->soft_body_get_state(body, state); });
	js_singleton.add((new std::string("soft_body_set_transform"))->c_str(), [singleton](const RID &body, const Transform3D &transform) -> void { singleton->soft_body_set_transform(body, transform); });
	js_singleton.add((new std::string("soft_body_set_ray_pickable"))->c_str(), [singleton](const RID &body, bool enable) -> void { singleton->soft_body_set_ray_pickable(body, enable); });
	js_singleton.add((new std::string("soft_body_set_simulation_precision"))->c_str(), [singleton](const RID &body, int32_t simulation_precision) -> void { singleton->soft_body_set_simulation_precision(body, simulation_precision); });
	js_singleton.add((new std::string("soft_body_get_simulation_precision"))->c_str(), [singleton](const RID &body) -> int64_t { return singleton->soft_body_get_simulation_precision(body); });
	js_singleton.add((new std::string("soft_body_set_total_mass"))->c_str(), [singleton](const RID &body, double total_mass) -> void { singleton->soft_body_set_total_mass(body, total_mass); });
	js_singleton.add((new std::string("soft_body_get_total_mass"))->c_str(), [singleton](const RID &body) -> double { return singleton->soft_body_get_total_mass(body); });
	js_singleton.add((new std::string("soft_body_set_linear_stiffness"))->c_str(), [singleton](const RID &body, double stiffness) -> void { singleton->soft_body_set_linear_stiffness(body, stiffness); });
	js_singleton.add((new std::string("soft_body_get_linear_stiffness"))->c_str(), [singleton](const RID &body) -> double { return singleton->soft_body_get_linear_stiffness(body); });
	js_singleton.add((new std::string("soft_body_set_pressure_coefficient"))->c_str(), [singleton](const RID &body, double pressure_coefficient) -> void { singleton->soft_body_set_pressure_coefficient(body, pressure_coefficient); });
	js_singleton.add((new std::string("soft_body_get_pressure_coefficient"))->c_str(), [singleton](const RID &body) -> double { return singleton->soft_body_get_pressure_coefficient(body); });
	js_singleton.add((new std::string("soft_body_set_damping_coefficient"))->c_str(), [singleton](const RID &body, double damping_coefficient) -> void { singleton->soft_body_set_damping_coefficient(body, damping_coefficient); });
	js_singleton.add((new std::string("soft_body_get_damping_coefficient"))->c_str(), [singleton](const RID &body) -> double { return singleton->soft_body_get_damping_coefficient(body); });
	js_singleton.add((new std::string("soft_body_set_drag_coefficient"))->c_str(), [singleton](const RID &body, double drag_coefficient) -> void { singleton->soft_body_set_drag_coefficient(body, drag_coefficient); });
	js_singleton.add((new std::string("soft_body_get_drag_coefficient"))->c_str(), [singleton](const RID &body) -> double { return singleton->soft_body_get_drag_coefficient(body); });
	js_singleton.add((new std::string("soft_body_move_point"))->c_str(), [singleton](const RID &body, int32_t point_index, const Vector3 &global_position) -> void { singleton->soft_body_move_point(body, point_index, global_position); });
	js_singleton.add((new std::string("soft_body_get_point_global_position"))->c_str(), [singleton](const RID &body, int32_t point_index) -> Vector3 { return singleton->soft_body_get_point_global_position(body, point_index); });
	js_singleton.add((new std::string("soft_body_remove_all_pinned_points"))->c_str(), [singleton](const RID &body) -> void { singleton->soft_body_remove_all_pinned_points(body); });
	js_singleton.add((new std::string("soft_body_pin_point"))->c_str(), [singleton](const RID &body, int32_t point_index, bool pin) -> void { singleton->soft_body_pin_point(body, point_index, pin); });
	js_singleton.add((new std::string("soft_body_is_point_pinned"))->c_str(), [singleton](const RID &body, int32_t point_index) -> bool { return singleton->soft_body_is_point_pinned(body, point_index); });
	js_singleton.add((new std::string("joint_create"))->c_str(), [singleton]() -> RID { return singleton->joint_create(); });
	js_singleton.add((new std::string("joint_clear"))->c_str(), [singleton](const RID &joint) -> void { singleton->joint_clear(joint); });
	js_singleton.add((new std::string("joint_make_pin"))->c_str(), [singleton](const RID &joint, const RID &body_A, const Vector3 &local_A, const RID &body_B, const Vector3 &local_B) -> void { singleton->joint_make_pin(joint, body_A, local_A, body_B, local_B); });
	js_singleton.add((new std::string("pin_joint_set_param"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::PinJointParam param, double value) -> void { singleton->pin_joint_set_param(joint, param, value); });
	js_singleton.add((new std::string("pin_joint_get_param"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::PinJointParam param) -> double { return singleton->pin_joint_get_param(joint, param); });
	js_singleton.add((new std::string("pin_joint_set_local_a"))->c_str(), [singleton](const RID &joint, const Vector3 &local_A) -> void { singleton->pin_joint_set_local_a(joint, local_A); });
	js_singleton.add((new std::string("pin_joint_get_local_a"))->c_str(), [singleton](const RID &joint) -> Vector3 { return singleton->pin_joint_get_local_a(joint); });
	js_singleton.add((new std::string("pin_joint_set_local_b"))->c_str(), [singleton](const RID &joint, const Vector3 &local_B) -> void { singleton->pin_joint_set_local_b(joint, local_B); });
	js_singleton.add((new std::string("pin_joint_get_local_b"))->c_str(), [singleton](const RID &joint) -> Vector3 { return singleton->pin_joint_get_local_b(joint); });
	js_singleton.add((new std::string("joint_make_hinge"))->c_str(), [singleton](const RID &joint, const RID &body_A, const Transform3D &hinge_A, const RID &body_B, const Transform3D &hinge_B) -> void { singleton->joint_make_hinge(joint, body_A, hinge_A, body_B, hinge_B); });
	js_singleton.add((new std::string("hinge_joint_set_param"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::HingeJointParam param, double value) -> void { singleton->hinge_joint_set_param(joint, param, value); });
	js_singleton.add((new std::string("hinge_joint_get_param"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::HingeJointParam param) -> double { return singleton->hinge_joint_get_param(joint, param); });
	js_singleton.add((new std::string("hinge_joint_set_flag"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::HingeJointFlag flag, bool enabled) -> void { singleton->hinge_joint_set_flag(joint, flag, enabled); });
	js_singleton.add((new std::string("hinge_joint_get_flag"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::HingeJointFlag flag) -> bool { return singleton->hinge_joint_get_flag(joint, flag); });
	js_singleton.add((new std::string("joint_make_slider"))->c_str(), [singleton](const RID &joint, const RID &body_A, const Transform3D &local_ref_A, const RID &body_B, const Transform3D &local_ref_B) -> void { singleton->joint_make_slider(joint, body_A, local_ref_A, body_B, local_ref_B); });
	js_singleton.add((new std::string("slider_joint_set_param"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::SliderJointParam param, double value) -> void { singleton->slider_joint_set_param(joint, param, value); });
	js_singleton.add((new std::string("slider_joint_get_param"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::SliderJointParam param) -> double { return singleton->slider_joint_get_param(joint, param); });
	js_singleton.add((new std::string("joint_make_cone_twist"))->c_str(), [singleton](const RID &joint, const RID &body_A, const Transform3D &local_ref_A, const RID &body_B, const Transform3D &local_ref_B) -> void { singleton->joint_make_cone_twist(joint, body_A, local_ref_A, body_B, local_ref_B); });
	js_singleton.add((new std::string("cone_twist_joint_set_param"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::ConeTwistJointParam param, double value) -> void { singleton->cone_twist_joint_set_param(joint, param, value); });
	js_singleton.add((new std::string("cone_twist_joint_get_param"))->c_str(), [singleton](const RID &joint, PhysicsServer3D::ConeTwistJointParam param) -> double { return singleton->cone_twist_joint_get_param(joint, param); });
	js_singleton.add((new std::string("joint_get_type"))->c_str(), [singleton](const RID &joint) -> PhysicsServer3D::JointType { return singleton->joint_get_type(joint); });
	js_singleton.add((new std::string("joint_set_solver_priority"))->c_str(), [singleton](const RID &joint, int32_t priority) -> void { singleton->joint_set_solver_priority(joint, priority); });
	js_singleton.add((new std::string("joint_get_solver_priority"))->c_str(), [singleton](const RID &joint) -> int64_t { return singleton->joint_get_solver_priority(joint); });
	js_singleton.add((new std::string("joint_disable_collisions_between_bodies"))->c_str(), [singleton](const RID &joint, bool disable) -> void { singleton->joint_disable_collisions_between_bodies(joint, disable); });
	js_singleton.add((new std::string("joint_is_disabled_collisions_between_bodies"))->c_str(), [singleton](const RID &joint) -> bool { return singleton->joint_is_disabled_collisions_between_bodies(joint); });
	js_singleton.add((new std::string("joint_make_generic_6dof"))->c_str(), [singleton](const RID &joint, const RID &body_A, const Transform3D &local_ref_A, const RID &body_B, const Transform3D &local_ref_B) -> void { singleton->joint_make_generic_6dof(joint, body_A, local_ref_A, body_B, local_ref_B); });
	js_singleton.add((new std::string("generic_6dof_joint_set_param"))->c_str(), [singleton](const RID &joint, Vector3::Axis axis, PhysicsServer3D::G6DOFJointAxisParam param, double value) -> void { singleton->generic_6dof_joint_set_param(joint, axis, param, value); });
	js_singleton.add((new std::string("generic_6dof_joint_get_param"))->c_str(), [singleton](const RID &joint, Vector3::Axis axis, PhysicsServer3D::G6DOFJointAxisParam param) -> double { return singleton->generic_6dof_joint_get_param(joint, axis, param); });
	js_singleton.add((new std::string("generic_6dof_joint_set_flag"))->c_str(), [singleton](const RID &joint, Vector3::Axis axis, PhysicsServer3D::G6DOFJointAxisFlag flag, bool enable) -> void { singleton->generic_6dof_joint_set_flag(joint, axis, flag, enable); });
	js_singleton.add((new std::string("generic_6dof_joint_get_flag"))->c_str(), [singleton](const RID &joint, Vector3::Axis axis, PhysicsServer3D::G6DOFJointAxisFlag flag) -> bool { return singleton->generic_6dof_joint_get_flag(joint, axis, flag); });
	js_singleton.add((new std::string("free_rid"))->c_str(), [singleton](const RID &rid) -> void { singleton->free_rid(rid); });
	js_singleton.add((new std::string("set_active"))->c_str(), [singleton](bool active) -> void { singleton->set_active(active); });
	js_singleton.add((new std::string("get_process_info"))->c_str(), [singleton](PhysicsServer3D::ProcessInfo process_info) -> int64_t { return singleton->get_process_info(process_info); });
	context->global()[(new std::string("PhysicsServer3D"))->c_str()] = js_singleton;

	qjs::Value _JointType = context->newObject();
	_JointType[(new std::string("JOINT_TYPE_PIN"))->c_str()] = PhysicsServer3D::JointType::JOINT_TYPE_PIN;
	_JointType[(new std::string("JOINT_TYPE_HINGE"))->c_str()] = PhysicsServer3D::JointType::JOINT_TYPE_HINGE;
	_JointType[(new std::string("JOINT_TYPE_SLIDER"))->c_str()] = PhysicsServer3D::JointType::JOINT_TYPE_SLIDER;
	_JointType[(new std::string("JOINT_TYPE_CONE_TWIST"))->c_str()] = PhysicsServer3D::JointType::JOINT_TYPE_CONE_TWIST;
	_JointType[(new std::string("JOINT_TYPE_6DOF"))->c_str()] = PhysicsServer3D::JointType::JOINT_TYPE_6DOF;
	_JointType[(new std::string("JOINT_TYPE_MAX"))->c_str()] = PhysicsServer3D::JointType::JOINT_TYPE_MAX;
	js_singleton[(new std::string("JointType"))->c_str()] = _JointType;
	qjs::Value _PinJointParam = context->newObject();
	_PinJointParam[(new std::string("PIN_JOINT_BIAS"))->c_str()] = PhysicsServer3D::PinJointParam::PIN_JOINT_BIAS;
	_PinJointParam[(new std::string("PIN_JOINT_DAMPING"))->c_str()] = PhysicsServer3D::PinJointParam::PIN_JOINT_DAMPING;
	_PinJointParam[(new std::string("PIN_JOINT_IMPULSE_CLAMP"))->c_str()] = PhysicsServer3D::PinJointParam::PIN_JOINT_IMPULSE_CLAMP;
	js_singleton[(new std::string("PinJointParam"))->c_str()] = _PinJointParam;
	qjs::Value _HingeJointParam = context->newObject();
	_HingeJointParam[(new std::string("HINGE_JOINT_BIAS"))->c_str()] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_BIAS;
	_HingeJointParam[(new std::string("HINGE_JOINT_LIMIT_UPPER"))->c_str()] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_UPPER;
	_HingeJointParam[(new std::string("HINGE_JOINT_LIMIT_LOWER"))->c_str()] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_LOWER;
	_HingeJointParam[(new std::string("HINGE_JOINT_LIMIT_BIAS"))->c_str()] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_BIAS;
	_HingeJointParam[(new std::string("HINGE_JOINT_LIMIT_SOFTNESS"))->c_str()] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_SOFTNESS;
	_HingeJointParam[(new std::string("HINGE_JOINT_LIMIT_RELAXATION"))->c_str()] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_RELAXATION;
	_HingeJointParam[(new std::string("HINGE_JOINT_MOTOR_TARGET_VELOCITY"))->c_str()] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_MOTOR_TARGET_VELOCITY;
	_HingeJointParam[(new std::string("HINGE_JOINT_MOTOR_MAX_IMPULSE"))->c_str()] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_MOTOR_MAX_IMPULSE;
	js_singleton[(new std::string("HingeJointParam"))->c_str()] = _HingeJointParam;
	qjs::Value _HingeJointFlag = context->newObject();
	_HingeJointFlag[(new std::string("HINGE_JOINT_FLAG_USE_LIMIT"))->c_str()] = PhysicsServer3D::HingeJointFlag::HINGE_JOINT_FLAG_USE_LIMIT;
	_HingeJointFlag[(new std::string("HINGE_JOINT_FLAG_ENABLE_MOTOR"))->c_str()] = PhysicsServer3D::HingeJointFlag::HINGE_JOINT_FLAG_ENABLE_MOTOR;
	js_singleton[(new std::string("HingeJointFlag"))->c_str()] = _HingeJointFlag;
	qjs::Value _SliderJointParam = context->newObject();
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_LIMIT_UPPER"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_UPPER;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_LIMIT_LOWER"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_LOWER;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_LIMIT_DAMPING"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_DAMPING;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_MOTION_SOFTNESS"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_MOTION_SOFTNESS;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_MOTION_RESTITUTION"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_MOTION_RESTITUTION;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_MOTION_DAMPING"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_MOTION_DAMPING;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION;
	_SliderJointParam[(new std::string("SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_LIMIT_UPPER"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_UPPER;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_LIMIT_LOWER"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_LOWER;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_LIMIT_DAMPING"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_DAMPING;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_MOTION_DAMPING"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_MOTION_DAMPING;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION;
	_SliderJointParam[(new std::string("SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING;
	_SliderJointParam[(new std::string("SLIDER_JOINT_MAX"))->c_str()] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_MAX;
	js_singleton[(new std::string("SliderJointParam"))->c_str()] = _SliderJointParam;
	qjs::Value _ConeTwistJointParam = context->newObject();
	_ConeTwistJointParam[(new std::string("CONE_TWIST_JOINT_SWING_SPAN"))->c_str()] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_SWING_SPAN;
	_ConeTwistJointParam[(new std::string("CONE_TWIST_JOINT_TWIST_SPAN"))->c_str()] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_TWIST_SPAN;
	_ConeTwistJointParam[(new std::string("CONE_TWIST_JOINT_BIAS"))->c_str()] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_BIAS;
	_ConeTwistJointParam[(new std::string("CONE_TWIST_JOINT_SOFTNESS"))->c_str()] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_SOFTNESS;
	_ConeTwistJointParam[(new std::string("CONE_TWIST_JOINT_RELAXATION"))->c_str()] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_RELAXATION;
	js_singleton[(new std::string("ConeTwistJointParam"))->c_str()] = _ConeTwistJointParam;
	qjs::Value _G6DOFJointAxisParam = context->newObject();
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_LOWER_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_LOWER_LIMIT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_UPPER_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_UPPER_LIMIT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_RESTITUTION"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_RESTITUTION;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_DAMPING"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_DAMPING;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_SPRING_STIFFNESS"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_SPRING_STIFFNESS;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_SPRING_DAMPING"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_SPRING_DAMPING;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_LINEAR_SPRING_EQUILIBRIUM_POINT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_SPRING_EQUILIBRIUM_POINT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_LOWER_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_LOWER_LIMIT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_UPPER_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_UPPER_LIMIT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_DAMPING"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_DAMPING;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_RESTITUTION"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_RESTITUTION;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_FORCE_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_FORCE_LIMIT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_ERP"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_ERP;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_SPRING_STIFFNESS"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_SPRING_STIFFNESS;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_SPRING_DAMPING"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_SPRING_DAMPING;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_ANGULAR_SPRING_EQUILIBRIUM_POINT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_SPRING_EQUILIBRIUM_POINT;
	_G6DOFJointAxisParam[(new std::string("G6DOF_JOINT_MAX"))->c_str()] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_MAX;
	js_singleton[(new std::string("G6DOFJointAxisParam"))->c_str()] = _G6DOFJointAxisParam;
	qjs::Value _G6DOFJointAxisFlag = context->newObject();
	_G6DOFJointAxisFlag[(new std::string("G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT;
	_G6DOFJointAxisFlag[(new std::string("G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT"))->c_str()] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT;
	_G6DOFJointAxisFlag[(new std::string("G6DOF_JOINT_FLAG_ENABLE_ANGULAR_SPRING"))->c_str()] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_ANGULAR_SPRING;
	_G6DOFJointAxisFlag[(new std::string("G6DOF_JOINT_FLAG_ENABLE_LINEAR_SPRING"))->c_str()] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_LINEAR_SPRING;
	_G6DOFJointAxisFlag[(new std::string("G6DOF_JOINT_FLAG_ENABLE_MOTOR"))->c_str()] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_MOTOR;
	_G6DOFJointAxisFlag[(new std::string("G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR"))->c_str()] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR;
	_G6DOFJointAxisFlag[(new std::string("G6DOF_JOINT_FLAG_MAX"))->c_str()] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_MAX;
	js_singleton[(new std::string("G6DOFJointAxisFlag"))->c_str()] = _G6DOFJointAxisFlag;
	qjs::Value _ShapeType = context->newObject();
	_ShapeType[(new std::string("SHAPE_WORLD_BOUNDARY"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_WORLD_BOUNDARY;
	_ShapeType[(new std::string("SHAPE_SEPARATION_RAY"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_SEPARATION_RAY;
	_ShapeType[(new std::string("SHAPE_SPHERE"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_SPHERE;
	_ShapeType[(new std::string("SHAPE_BOX"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_BOX;
	_ShapeType[(new std::string("SHAPE_CAPSULE"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_CAPSULE;
	_ShapeType[(new std::string("SHAPE_CYLINDER"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_CYLINDER;
	_ShapeType[(new std::string("SHAPE_CONVEX_POLYGON"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_CONVEX_POLYGON;
	_ShapeType[(new std::string("SHAPE_CONCAVE_POLYGON"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_CONCAVE_POLYGON;
	_ShapeType[(new std::string("SHAPE_HEIGHTMAP"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_HEIGHTMAP;
	_ShapeType[(new std::string("SHAPE_SOFT_BODY"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_SOFT_BODY;
	_ShapeType[(new std::string("SHAPE_CUSTOM"))->c_str()] = PhysicsServer3D::ShapeType::SHAPE_CUSTOM;
	js_singleton[(new std::string("ShapeType"))->c_str()] = _ShapeType;
	qjs::Value _AreaParameter = context->newObject();
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY_OVERRIDE_MODE"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY_OVERRIDE_MODE;
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY;
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY_VECTOR"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY_VECTOR;
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY_IS_POINT"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY_IS_POINT;
	_AreaParameter[(new std::string("AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE;
	_AreaParameter[(new std::string("AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE;
	_AreaParameter[(new std::string("AREA_PARAM_LINEAR_DAMP"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_LINEAR_DAMP;
	_AreaParameter[(new std::string("AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE;
	_AreaParameter[(new std::string("AREA_PARAM_ANGULAR_DAMP"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_ANGULAR_DAMP;
	_AreaParameter[(new std::string("AREA_PARAM_PRIORITY"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_PRIORITY;
	_AreaParameter[(new std::string("AREA_PARAM_WIND_FORCE_MAGNITUDE"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_WIND_FORCE_MAGNITUDE;
	_AreaParameter[(new std::string("AREA_PARAM_WIND_SOURCE"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_WIND_SOURCE;
	_AreaParameter[(new std::string("AREA_PARAM_WIND_DIRECTION"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_WIND_DIRECTION;
	_AreaParameter[(new std::string("AREA_PARAM_WIND_ATTENUATION_FACTOR"))->c_str()] = PhysicsServer3D::AreaParameter::AREA_PARAM_WIND_ATTENUATION_FACTOR;
	js_singleton[(new std::string("AreaParameter"))->c_str()] = _AreaParameter;
	qjs::Value _AreaSpaceOverrideMode = context->newObject();
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_DISABLED"))->c_str()] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_DISABLED;
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_COMBINE"))->c_str()] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_COMBINE;
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_COMBINE_REPLACE"))->c_str()] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_COMBINE_REPLACE;
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_REPLACE"))->c_str()] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_REPLACE;
	_AreaSpaceOverrideMode[(new std::string("AREA_SPACE_OVERRIDE_REPLACE_COMBINE"))->c_str()] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_REPLACE_COMBINE;
	js_singleton[(new std::string("AreaSpaceOverrideMode"))->c_str()] = _AreaSpaceOverrideMode;
	qjs::Value _BodyMode = context->newObject();
	_BodyMode[(new std::string("BODY_MODE_STATIC"))->c_str()] = PhysicsServer3D::BodyMode::BODY_MODE_STATIC;
	_BodyMode[(new std::string("BODY_MODE_KINEMATIC"))->c_str()] = PhysicsServer3D::BodyMode::BODY_MODE_KINEMATIC;
	_BodyMode[(new std::string("BODY_MODE_RIGID"))->c_str()] = PhysicsServer3D::BodyMode::BODY_MODE_RIGID;
	_BodyMode[(new std::string("BODY_MODE_RIGID_LINEAR"))->c_str()] = PhysicsServer3D::BodyMode::BODY_MODE_RIGID_LINEAR;
	js_singleton[(new std::string("BodyMode"))->c_str()] = _BodyMode;
	qjs::Value _BodyParameter = context->newObject();
	_BodyParameter[(new std::string("BODY_PARAM_BOUNCE"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_BOUNCE;
	_BodyParameter[(new std::string("BODY_PARAM_FRICTION"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_FRICTION;
	_BodyParameter[(new std::string("BODY_PARAM_MASS"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_MASS;
	_BodyParameter[(new std::string("BODY_PARAM_INERTIA"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_INERTIA;
	_BodyParameter[(new std::string("BODY_PARAM_CENTER_OF_MASS"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_CENTER_OF_MASS;
	_BodyParameter[(new std::string("BODY_PARAM_GRAVITY_SCALE"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_GRAVITY_SCALE;
	_BodyParameter[(new std::string("BODY_PARAM_LINEAR_DAMP_MODE"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_LINEAR_DAMP_MODE;
	_BodyParameter[(new std::string("BODY_PARAM_ANGULAR_DAMP_MODE"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_ANGULAR_DAMP_MODE;
	_BodyParameter[(new std::string("BODY_PARAM_LINEAR_DAMP"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_LINEAR_DAMP;
	_BodyParameter[(new std::string("BODY_PARAM_ANGULAR_DAMP"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_ANGULAR_DAMP;
	_BodyParameter[(new std::string("BODY_PARAM_MAX"))->c_str()] = PhysicsServer3D::BodyParameter::BODY_PARAM_MAX;
	js_singleton[(new std::string("BodyParameter"))->c_str()] = _BodyParameter;
	qjs::Value _BodyDampMode = context->newObject();
	_BodyDampMode[(new std::string("BODY_DAMP_MODE_COMBINE"))->c_str()] = PhysicsServer3D::BodyDampMode::BODY_DAMP_MODE_COMBINE;
	_BodyDampMode[(new std::string("BODY_DAMP_MODE_REPLACE"))->c_str()] = PhysicsServer3D::BodyDampMode::BODY_DAMP_MODE_REPLACE;
	js_singleton[(new std::string("BodyDampMode"))->c_str()] = _BodyDampMode;
	qjs::Value _BodyState = context->newObject();
	_BodyState[(new std::string("BODY_STATE_TRANSFORM"))->c_str()] = PhysicsServer3D::BodyState::BODY_STATE_TRANSFORM;
	_BodyState[(new std::string("BODY_STATE_LINEAR_VELOCITY"))->c_str()] = PhysicsServer3D::BodyState::BODY_STATE_LINEAR_VELOCITY;
	_BodyState[(new std::string("BODY_STATE_ANGULAR_VELOCITY"))->c_str()] = PhysicsServer3D::BodyState::BODY_STATE_ANGULAR_VELOCITY;
	_BodyState[(new std::string("BODY_STATE_SLEEPING"))->c_str()] = PhysicsServer3D::BodyState::BODY_STATE_SLEEPING;
	_BodyState[(new std::string("BODY_STATE_CAN_SLEEP"))->c_str()] = PhysicsServer3D::BodyState::BODY_STATE_CAN_SLEEP;
	js_singleton[(new std::string("BodyState"))->c_str()] = _BodyState;
	qjs::Value _AreaBodyStatus = context->newObject();
	_AreaBodyStatus[(new std::string("AREA_BODY_ADDED"))->c_str()] = PhysicsServer3D::AreaBodyStatus::AREA_BODY_ADDED;
	_AreaBodyStatus[(new std::string("AREA_BODY_REMOVED"))->c_str()] = PhysicsServer3D::AreaBodyStatus::AREA_BODY_REMOVED;
	js_singleton[(new std::string("AreaBodyStatus"))->c_str()] = _AreaBodyStatus;
	qjs::Value _ProcessInfo = context->newObject();
	_ProcessInfo[(new std::string("INFO_ACTIVE_OBJECTS"))->c_str()] = PhysicsServer3D::ProcessInfo::INFO_ACTIVE_OBJECTS;
	_ProcessInfo[(new std::string("INFO_COLLISION_PAIRS"))->c_str()] = PhysicsServer3D::ProcessInfo::INFO_COLLISION_PAIRS;
	_ProcessInfo[(new std::string("INFO_ISLAND_COUNT"))->c_str()] = PhysicsServer3D::ProcessInfo::INFO_ISLAND_COUNT;
	js_singleton[(new std::string("ProcessInfo"))->c_str()] = _ProcessInfo;
	qjs::Value _SpaceParameter = context->newObject();
	_SpaceParameter[(new std::string("SPACE_PARAM_CONTACT_RECYCLE_RADIUS"))->c_str()] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_CONTACT_RECYCLE_RADIUS;
	_SpaceParameter[(new std::string("SPACE_PARAM_CONTACT_MAX_SEPARATION"))->c_str()] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_CONTACT_MAX_SEPARATION;
	_SpaceParameter[(new std::string("SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION"))->c_str()] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION;
	_SpaceParameter[(new std::string("SPACE_PARAM_CONTACT_DEFAULT_BIAS"))->c_str()] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_CONTACT_DEFAULT_BIAS;
	_SpaceParameter[(new std::string("SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD"))->c_str()] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD;
	_SpaceParameter[(new std::string("SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD"))->c_str()] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD;
	_SpaceParameter[(new std::string("SPACE_PARAM_BODY_TIME_TO_SLEEP"))->c_str()] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_BODY_TIME_TO_SLEEP;
	_SpaceParameter[(new std::string("SPACE_PARAM_SOLVER_ITERATIONS"))->c_str()] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_SOLVER_ITERATIONS;
	js_singleton[(new std::string("SpaceParameter"))->c_str()] = _SpaceParameter;
	qjs::Value _BodyAxis = context->newObject();
	_BodyAxis[(new std::string("BODY_AXIS_LINEAR_X"))->c_str()] = PhysicsServer3D::BodyAxis::BODY_AXIS_LINEAR_X;
	_BodyAxis[(new std::string("BODY_AXIS_LINEAR_Y"))->c_str()] = PhysicsServer3D::BodyAxis::BODY_AXIS_LINEAR_Y;
	_BodyAxis[(new std::string("BODY_AXIS_LINEAR_Z"))->c_str()] = PhysicsServer3D::BodyAxis::BODY_AXIS_LINEAR_Z;
	_BodyAxis[(new std::string("BODY_AXIS_ANGULAR_X"))->c_str()] = PhysicsServer3D::BodyAxis::BODY_AXIS_ANGULAR_X;
	_BodyAxis[(new std::string("BODY_AXIS_ANGULAR_Y"))->c_str()] = PhysicsServer3D::BodyAxis::BODY_AXIS_ANGULAR_Y;
	_BodyAxis[(new std::string("BODY_AXIS_ANGULAR_Z"))->c_str()] = PhysicsServer3D::BodyAxis::BODY_AXIS_ANGULAR_Z;
	js_singleton[(new std::string("BodyAxis"))->c_str()] = _BodyAxis;
}