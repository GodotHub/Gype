#include <godot_cpp/classes/physics_server3d.hpp>
#include <godot_cpp/classes/ref.hpp>
#include <godot_cpp/variant/aabb.hpp>
#include <godot_cpp/variant/transform3d.hpp>
#include <godot_cpp/variant/variant.hpp>
#include <godot_cpp/variant/vector3.hpp>
#include <godot_cpp/classes/physics_direct_body_state3d.hpp>
#include <godot_cpp/classes/physics_direct_space_state3d.hpp>
#include <godot_cpp/classes/physics_server3d_rendering_server_handler.hpp>
#include <godot_cpp/classes/physics_test_motion_parameters3d.hpp>
#include <godot_cpp/classes/physics_test_motion_result3d.hpp>
#include <godot_cpp/variant/callable.hpp>
#include <godot_cpp/variant/rid.hpp>
#include <stdint.h>

#include "register/register_classes.h"
#include "qjspp/utils.h"
#include "qjspp.hpp"

using namespace godot;

void register_singletons_PhysicsServer3D() {
	qjs::Value js_singleton = context->newObject();
    PhysicsServer3D *singleton = PhysicsServer3D::get_singleton();
    js_singleton.add("world_boundary_shape_create", [singleton]()->RID{return singleton->world_boundary_shape_create();});
    js_singleton.add("separation_ray_shape_create", [singleton]()->RID{return singleton->separation_ray_shape_create();});
    js_singleton.add("sphere_shape_create", [singleton]()->RID{return singleton->sphere_shape_create();});
    js_singleton.add("box_shape_create", [singleton]()->RID{return singleton->box_shape_create();});
    js_singleton.add("capsule_shape_create", [singleton]()->RID{return singleton->capsule_shape_create();});
    js_singleton.add("cylinder_shape_create", [singleton]()->RID{return singleton->cylinder_shape_create();});
    js_singleton.add("convex_polygon_shape_create", [singleton]()->RID{return singleton->convex_polygon_shape_create();});
    js_singleton.add("concave_polygon_shape_create", [singleton]()->RID{return singleton->concave_polygon_shape_create();});
    js_singleton.add("heightmap_shape_create", [singleton]()->RID{return singleton->heightmap_shape_create();});
    js_singleton.add("custom_shape_create", [singleton]()->RID{return singleton->custom_shape_create();});
    js_singleton.add("shape_set_data", [singleton](const RID & shape,const Variant & data)->void{singleton->shape_set_data(shape,data);});
    js_singleton.add("shape_set_margin", [singleton](const RID & shape,double margin)->void{singleton->shape_set_margin(shape,margin);});
    js_singleton.add("shape_get_type", [singleton](const RID & shape)->PhysicsServer3D::ShapeType{return singleton->shape_get_type(shape);});
    js_singleton.add("shape_get_data", [singleton](const RID & shape)->Variant{return singleton->shape_get_data(shape);});
    js_singleton.add("shape_get_margin", [singleton](const RID & shape)->double{return singleton->shape_get_margin(shape);});
    js_singleton.add("space_create", [singleton]()->RID{return singleton->space_create();});
    js_singleton.add("space_set_active", [singleton](const RID & space,bool active)->void{singleton->space_set_active(space,active);});
    js_singleton.add("space_is_active", [singleton](const RID & space)->bool{return singleton->space_is_active(space);});
    js_singleton.add("space_set_param", [singleton](const RID & space,PhysicsServer3D::SpaceParameter param,double value)->void{singleton->space_set_param(space,param,value);});
    js_singleton.add("space_get_param", [singleton](const RID & space,PhysicsServer3D::SpaceParameter param)->double{return singleton->space_get_param(space,param);});
    js_singleton.add("space_get_direct_state", [singleton](const RID & space)->PhysicsDirectSpaceState3D *{return singleton->space_get_direct_state(space);});
    js_singleton.add("area_create", [singleton]()->RID{return singleton->area_create();});
    js_singleton.add("area_set_space", [singleton](const RID & area,const RID & space)->void{singleton->area_set_space(area,space);});
    js_singleton.add("area_get_space", [singleton](const RID & area)->RID{return singleton->area_get_space(area);});
    js_singleton.add("area_add_shape", [singleton](const RID & area,const RID & shape,const Transform3D & transform,bool disabled)->void{singleton->area_add_shape(area,shape,transform,disabled);});
    js_singleton.add("area_set_shape", [singleton](const RID & area,int32_t shape_idx,const RID & shape)->void{singleton->area_set_shape(area,shape_idx,shape);});
    js_singleton.add("area_set_shape_transform", [singleton](const RID & area,int32_t shape_idx,const Transform3D & transform)->void{singleton->area_set_shape_transform(area,shape_idx,transform);});
    js_singleton.add("area_set_shape_disabled", [singleton](const RID & area,int32_t shape_idx,bool disabled)->void{singleton->area_set_shape_disabled(area,shape_idx,disabled);});
    js_singleton.add("area_get_shape_count", [singleton](const RID & area)->int64_t{return singleton->area_get_shape_count(area);});
    js_singleton.add("area_get_shape", [singleton](const RID & area,int32_t shape_idx)->RID{return singleton->area_get_shape(area,shape_idx);});
    js_singleton.add("area_get_shape_transform", [singleton](const RID & area,int32_t shape_idx)->Transform3D{return singleton->area_get_shape_transform(area,shape_idx);});
    js_singleton.add("area_remove_shape", [singleton](const RID & area,int32_t shape_idx)->void{singleton->area_remove_shape(area,shape_idx);});
    js_singleton.add("area_clear_shapes", [singleton](const RID & area)->void{singleton->area_clear_shapes(area);});
    js_singleton.add("area_set_collision_layer", [singleton](const RID & area,uint32_t layer)->void{singleton->area_set_collision_layer(area,layer);});
    js_singleton.add("area_get_collision_layer", [singleton](const RID & area)->int64_t{return singleton->area_get_collision_layer(area);});
    js_singleton.add("area_set_collision_mask", [singleton](const RID & area,uint32_t mask)->void{singleton->area_set_collision_mask(area,mask);});
    js_singleton.add("area_get_collision_mask", [singleton](const RID & area)->int64_t{return singleton->area_get_collision_mask(area);});
    js_singleton.add("area_set_param", [singleton](const RID & area,PhysicsServer3D::AreaParameter param,const Variant & value)->void{singleton->area_set_param(area,param,value);});
    js_singleton.add("area_set_transform", [singleton](const RID & area,const Transform3D & transform)->void{singleton->area_set_transform(area,transform);});
    js_singleton.add("area_get_param", [singleton](const RID & area,PhysicsServer3D::AreaParameter param)->Variant{return singleton->area_get_param(area,param);});
    js_singleton.add("area_get_transform", [singleton](const RID & area)->Transform3D{return singleton->area_get_transform(area);});
    js_singleton.add("area_attach_object_instance_id", [singleton](const RID & area,uint64_t id)->void{singleton->area_attach_object_instance_id(area,id);});
    js_singleton.add("area_get_object_instance_id", [singleton](const RID & area)->int64_t{return singleton->area_get_object_instance_id(area);});
    js_singleton.add("area_set_monitor_callback", [singleton](const RID & area,const Callable & callback)->void{singleton->area_set_monitor_callback(area,callback);});
    js_singleton.add("area_set_area_monitor_callback", [singleton](const RID & area,const Callable & callback)->void{singleton->area_set_area_monitor_callback(area,callback);});
    js_singleton.add("area_set_monitorable", [singleton](const RID & area,bool monitorable)->void{singleton->area_set_monitorable(area,monitorable);});
    js_singleton.add("area_set_ray_pickable", [singleton](const RID & area,bool enable)->void{singleton->area_set_ray_pickable(area,enable);});
    js_singleton.add("body_create", [singleton]()->RID{return singleton->body_create();});
    js_singleton.add("body_set_space", [singleton](const RID & body,const RID & space)->void{singleton->body_set_space(body,space);});
    js_singleton.add("body_get_space", [singleton](const RID & body)->RID{return singleton->body_get_space(body);});
    js_singleton.add("body_set_mode", [singleton](const RID & body,PhysicsServer3D::BodyMode mode)->void{singleton->body_set_mode(body,mode);});
    js_singleton.add("body_get_mode", [singleton](const RID & body)->PhysicsServer3D::BodyMode{return singleton->body_get_mode(body);});
    js_singleton.add("body_set_collision_layer", [singleton](const RID & body,uint32_t layer)->void{singleton->body_set_collision_layer(body,layer);});
    js_singleton.add("body_get_collision_layer", [singleton](const RID & body)->int64_t{return singleton->body_get_collision_layer(body);});
    js_singleton.add("body_set_collision_mask", [singleton](const RID & body,uint32_t mask)->void{singleton->body_set_collision_mask(body,mask);});
    js_singleton.add("body_get_collision_mask", [singleton](const RID & body)->int64_t{return singleton->body_get_collision_mask(body);});
    js_singleton.add("body_set_collision_priority", [singleton](const RID & body,double priority)->void{singleton->body_set_collision_priority(body,priority);});
    js_singleton.add("body_get_collision_priority", [singleton](const RID & body)->double{return singleton->body_get_collision_priority(body);});
    js_singleton.add("body_add_shape", [singleton](const RID & body,const RID & shape,const Transform3D & transform,bool disabled)->void{singleton->body_add_shape(body,shape,transform,disabled);});
    js_singleton.add("body_set_shape", [singleton](const RID & body,int32_t shape_idx,const RID & shape)->void{singleton->body_set_shape(body,shape_idx,shape);});
    js_singleton.add("body_set_shape_transform", [singleton](const RID & body,int32_t shape_idx,const Transform3D & transform)->void{singleton->body_set_shape_transform(body,shape_idx,transform);});
    js_singleton.add("body_set_shape_disabled", [singleton](const RID & body,int32_t shape_idx,bool disabled)->void{singleton->body_set_shape_disabled(body,shape_idx,disabled);});
    js_singleton.add("body_get_shape_count", [singleton](const RID & body)->int64_t{return singleton->body_get_shape_count(body);});
    js_singleton.add("body_get_shape", [singleton](const RID & body,int32_t shape_idx)->RID{return singleton->body_get_shape(body,shape_idx);});
    js_singleton.add("body_get_shape_transform", [singleton](const RID & body,int32_t shape_idx)->Transform3D{return singleton->body_get_shape_transform(body,shape_idx);});
    js_singleton.add("body_remove_shape", [singleton](const RID & body,int32_t shape_idx)->void{singleton->body_remove_shape(body,shape_idx);});
    js_singleton.add("body_clear_shapes", [singleton](const RID & body)->void{singleton->body_clear_shapes(body);});
    js_singleton.add("body_attach_object_instance_id", [singleton](const RID & body,uint64_t id)->void{singleton->body_attach_object_instance_id(body,id);});
    js_singleton.add("body_get_object_instance_id", [singleton](const RID & body)->int64_t{return singleton->body_get_object_instance_id(body);});
    js_singleton.add("body_set_enable_continuous_collision_detection", [singleton](const RID & body,bool enable)->void{singleton->body_set_enable_continuous_collision_detection(body,enable);});
    js_singleton.add("body_is_continuous_collision_detection_enabled", [singleton](const RID & body)->bool{return singleton->body_is_continuous_collision_detection_enabled(body);});
    js_singleton.add("body_set_param", [singleton](const RID & body,PhysicsServer3D::BodyParameter param,const Variant & value)->void{singleton->body_set_param(body,param,value);});
    js_singleton.add("body_get_param", [singleton](const RID & body,PhysicsServer3D::BodyParameter param)->Variant{return singleton->body_get_param(body,param);});
    js_singleton.add("body_reset_mass_properties", [singleton](const RID & body)->void{singleton->body_reset_mass_properties(body);});
    js_singleton.add("body_set_state", [singleton](const RID & body,PhysicsServer3D::BodyState state,const Variant & value)->void{singleton->body_set_state(body,state,value);});
    js_singleton.add("body_get_state", [singleton](const RID & body,PhysicsServer3D::BodyState state)->Variant{return singleton->body_get_state(body,state);});
    js_singleton.add("body_apply_central_impulse", [singleton](const RID & body,const Vector3 & impulse)->void{singleton->body_apply_central_impulse(body,impulse);});
    js_singleton.add("body_apply_impulse", [singleton](const RID & body,const Vector3 & impulse,const Vector3 & position)->void{singleton->body_apply_impulse(body,impulse,position);});
    js_singleton.add("body_apply_torque_impulse", [singleton](const RID & body,const Vector3 & impulse)->void{singleton->body_apply_torque_impulse(body,impulse);});
    js_singleton.add("body_apply_central_force", [singleton](const RID & body,const Vector3 & force)->void{singleton->body_apply_central_force(body,force);});
    js_singleton.add("body_apply_force", [singleton](const RID & body,const Vector3 & force,const Vector3 & position)->void{singleton->body_apply_force(body,force,position);});
    js_singleton.add("body_apply_torque", [singleton](const RID & body,const Vector3 & torque)->void{singleton->body_apply_torque(body,torque);});
    js_singleton.add("body_add_constant_central_force", [singleton](const RID & body,const Vector3 & force)->void{singleton->body_add_constant_central_force(body,force);});
    js_singleton.add("body_add_constant_force", [singleton](const RID & body,const Vector3 & force,const Vector3 & position)->void{singleton->body_add_constant_force(body,force,position);});
    js_singleton.add("body_add_constant_torque", [singleton](const RID & body,const Vector3 & torque)->void{singleton->body_add_constant_torque(body,torque);});
    js_singleton.add("body_set_constant_force", [singleton](const RID & body,const Vector3 & force)->void{singleton->body_set_constant_force(body,force);});
    js_singleton.add("body_get_constant_force", [singleton](const RID & body)->Vector3{return singleton->body_get_constant_force(body);});
    js_singleton.add("body_set_constant_torque", [singleton](const RID & body,const Vector3 & torque)->void{singleton->body_set_constant_torque(body,torque);});
    js_singleton.add("body_get_constant_torque", [singleton](const RID & body)->Vector3{return singleton->body_get_constant_torque(body);});
    js_singleton.add("body_set_axis_velocity", [singleton](const RID & body,const Vector3 & axis_velocity)->void{singleton->body_set_axis_velocity(body,axis_velocity);});
    js_singleton.add("body_set_axis_lock", [singleton](const RID & body,PhysicsServer3D::BodyAxis axis,bool lock)->void{singleton->body_set_axis_lock(body,axis,lock);});
    js_singleton.add("body_is_axis_locked", [singleton](const RID & body,PhysicsServer3D::BodyAxis axis)->bool{return singleton->body_is_axis_locked(body,axis);});
    js_singleton.add("body_add_collision_exception", [singleton](const RID & body,const RID & excepted_body)->void{singleton->body_add_collision_exception(body,excepted_body);});
    js_singleton.add("body_remove_collision_exception", [singleton](const RID & body,const RID & excepted_body)->void{singleton->body_remove_collision_exception(body,excepted_body);});
    js_singleton.add("body_set_max_contacts_reported", [singleton](const RID & body,int32_t amount)->void{singleton->body_set_max_contacts_reported(body,amount);});
    js_singleton.add("body_get_max_contacts_reported", [singleton](const RID & body)->int64_t{return singleton->body_get_max_contacts_reported(body);});
    js_singleton.add("body_set_omit_force_integration", [singleton](const RID & body,bool enable)->void{singleton->body_set_omit_force_integration(body,enable);});
    js_singleton.add("body_is_omitting_force_integration", [singleton](const RID & body)->bool{return singleton->body_is_omitting_force_integration(body);});
    js_singleton.add("body_set_force_integration_callback", [singleton](const RID & body,const Callable & callable,const Variant & userdata)->void{singleton->body_set_force_integration_callback(body,callable,userdata);});
    js_singleton.add("body_set_ray_pickable", [singleton](const RID & body,bool enable)->void{singleton->body_set_ray_pickable(body,enable);});
    js_singleton.add("body_test_motion", [singleton](const RID & body,const Ref<PhysicsTestMotionParameters3D> & parameters,const Ref<PhysicsTestMotionResult3D> & result)->bool{return singleton->body_test_motion(body,parameters,result);});
    js_singleton.add("body_get_direct_state", [singleton](const RID & body)->PhysicsDirectBodyState3D *{return singleton->body_get_direct_state(body);});
    js_singleton.add("soft_body_create", [singleton]()->RID{return singleton->soft_body_create();});
    js_singleton.add("soft_body_update_rendering_server", [singleton](const RID & body,PhysicsServer3DRenderingServerHandler * rendering_server_handler)->void{singleton->soft_body_update_rendering_server(body,rendering_server_handler);});
    js_singleton.add("soft_body_set_space", [singleton](const RID & body,const RID & space)->void{singleton->soft_body_set_space(body,space);});
    js_singleton.add("soft_body_get_space", [singleton](const RID & body)->RID{return singleton->soft_body_get_space(body);});
    js_singleton.add("soft_body_set_mesh", [singleton](const RID & body,const RID & mesh)->void{singleton->soft_body_set_mesh(body,mesh);});
    js_singleton.add("soft_body_get_bounds", [singleton](const RID & body)->AABB{return singleton->soft_body_get_bounds(body);});
    js_singleton.add("soft_body_set_collision_layer", [singleton](const RID & body,uint32_t layer)->void{singleton->soft_body_set_collision_layer(body,layer);});
    js_singleton.add("soft_body_get_collision_layer", [singleton](const RID & body)->int64_t{return singleton->soft_body_get_collision_layer(body);});
    js_singleton.add("soft_body_set_collision_mask", [singleton](const RID & body,uint32_t mask)->void{singleton->soft_body_set_collision_mask(body,mask);});
    js_singleton.add("soft_body_get_collision_mask", [singleton](const RID & body)->int64_t{return singleton->soft_body_get_collision_mask(body);});
    js_singleton.add("soft_body_add_collision_exception", [singleton](const RID & body,const RID & body_b)->void{singleton->soft_body_add_collision_exception(body,body_b);});
    js_singleton.add("soft_body_remove_collision_exception", [singleton](const RID & body,const RID & body_b)->void{singleton->soft_body_remove_collision_exception(body,body_b);});
    js_singleton.add("soft_body_set_state", [singleton](const RID & body,PhysicsServer3D::BodyState state,const Variant & variant)->void{singleton->soft_body_set_state(body,state,variant);});
    js_singleton.add("soft_body_get_state", [singleton](const RID & body,PhysicsServer3D::BodyState state)->Variant{return singleton->soft_body_get_state(body,state);});
    js_singleton.add("soft_body_set_transform", [singleton](const RID & body,const Transform3D & transform)->void{singleton->soft_body_set_transform(body,transform);});
    js_singleton.add("soft_body_set_ray_pickable", [singleton](const RID & body,bool enable)->void{singleton->soft_body_set_ray_pickable(body,enable);});
    js_singleton.add("soft_body_set_simulation_precision", [singleton](const RID & body,int32_t simulation_precision)->void{singleton->soft_body_set_simulation_precision(body,simulation_precision);});
    js_singleton.add("soft_body_get_simulation_precision", [singleton](const RID & body)->int64_t{return singleton->soft_body_get_simulation_precision(body);});
    js_singleton.add("soft_body_set_total_mass", [singleton](const RID & body,double total_mass)->void{singleton->soft_body_set_total_mass(body,total_mass);});
    js_singleton.add("soft_body_get_total_mass", [singleton](const RID & body)->double{return singleton->soft_body_get_total_mass(body);});
    js_singleton.add("soft_body_set_linear_stiffness", [singleton](const RID & body,double stiffness)->void{singleton->soft_body_set_linear_stiffness(body,stiffness);});
    js_singleton.add("soft_body_get_linear_stiffness", [singleton](const RID & body)->double{return singleton->soft_body_get_linear_stiffness(body);});
    js_singleton.add("soft_body_set_pressure_coefficient", [singleton](const RID & body,double pressure_coefficient)->void{singleton->soft_body_set_pressure_coefficient(body,pressure_coefficient);});
    js_singleton.add("soft_body_get_pressure_coefficient", [singleton](const RID & body)->double{return singleton->soft_body_get_pressure_coefficient(body);});
    js_singleton.add("soft_body_set_damping_coefficient", [singleton](const RID & body,double damping_coefficient)->void{singleton->soft_body_set_damping_coefficient(body,damping_coefficient);});
    js_singleton.add("soft_body_get_damping_coefficient", [singleton](const RID & body)->double{return singleton->soft_body_get_damping_coefficient(body);});
    js_singleton.add("soft_body_set_drag_coefficient", [singleton](const RID & body,double drag_coefficient)->void{singleton->soft_body_set_drag_coefficient(body,drag_coefficient);});
    js_singleton.add("soft_body_get_drag_coefficient", [singleton](const RID & body)->double{return singleton->soft_body_get_drag_coefficient(body);});
    js_singleton.add("soft_body_move_point", [singleton](const RID & body,int32_t point_index,const Vector3 & global_position)->void{singleton->soft_body_move_point(body,point_index,global_position);});
    js_singleton.add("soft_body_get_point_global_position", [singleton](const RID & body,int32_t point_index)->Vector3{return singleton->soft_body_get_point_global_position(body,point_index);});
    js_singleton.add("soft_body_remove_all_pinned_points", [singleton](const RID & body)->void{singleton->soft_body_remove_all_pinned_points(body);});
    js_singleton.add("soft_body_pin_point", [singleton](const RID & body,int32_t point_index,bool pin)->void{singleton->soft_body_pin_point(body,point_index,pin);});
    js_singleton.add("soft_body_is_point_pinned", [singleton](const RID & body,int32_t point_index)->bool{return singleton->soft_body_is_point_pinned(body,point_index);});
    js_singleton.add("joint_create", [singleton]()->RID{return singleton->joint_create();});
    js_singleton.add("joint_clear", [singleton](const RID & joint)->void{singleton->joint_clear(joint);});
    js_singleton.add("joint_make_pin", [singleton](const RID & joint,const RID & body_A,const Vector3 & local_A,const RID & body_B,const Vector3 & local_B)->void{singleton->joint_make_pin(joint,body_A,local_A,body_B,local_B);});
    js_singleton.add("pin_joint_set_param", [singleton](const RID & joint,PhysicsServer3D::PinJointParam param,double value)->void{singleton->pin_joint_set_param(joint,param,value);});
    js_singleton.add("pin_joint_get_param", [singleton](const RID & joint,PhysicsServer3D::PinJointParam param)->double{return singleton->pin_joint_get_param(joint,param);});
    js_singleton.add("pin_joint_set_local_a", [singleton](const RID & joint,const Vector3 & local_A)->void{singleton->pin_joint_set_local_a(joint,local_A);});
    js_singleton.add("pin_joint_get_local_a", [singleton](const RID & joint)->Vector3{return singleton->pin_joint_get_local_a(joint);});
    js_singleton.add("pin_joint_set_local_b", [singleton](const RID & joint,const Vector3 & local_B)->void{singleton->pin_joint_set_local_b(joint,local_B);});
    js_singleton.add("pin_joint_get_local_b", [singleton](const RID & joint)->Vector3{return singleton->pin_joint_get_local_b(joint);});
    js_singleton.add("joint_make_hinge", [singleton](const RID & joint,const RID & body_A,const Transform3D & hinge_A,const RID & body_B,const Transform3D & hinge_B)->void{singleton->joint_make_hinge(joint,body_A,hinge_A,body_B,hinge_B);});
    js_singleton.add("hinge_joint_set_param", [singleton](const RID & joint,PhysicsServer3D::HingeJointParam param,double value)->void{singleton->hinge_joint_set_param(joint,param,value);});
    js_singleton.add("hinge_joint_get_param", [singleton](const RID & joint,PhysicsServer3D::HingeJointParam param)->double{return singleton->hinge_joint_get_param(joint,param);});
    js_singleton.add("hinge_joint_set_flag", [singleton](const RID & joint,PhysicsServer3D::HingeJointFlag flag,bool enabled)->void{singleton->hinge_joint_set_flag(joint,flag,enabled);});
    js_singleton.add("hinge_joint_get_flag", [singleton](const RID & joint,PhysicsServer3D::HingeJointFlag flag)->bool{return singleton->hinge_joint_get_flag(joint,flag);});
    js_singleton.add("joint_make_slider", [singleton](const RID & joint,const RID & body_A,const Transform3D & local_ref_A,const RID & body_B,const Transform3D & local_ref_B)->void{singleton->joint_make_slider(joint,body_A,local_ref_A,body_B,local_ref_B);});
    js_singleton.add("slider_joint_set_param", [singleton](const RID & joint,PhysicsServer3D::SliderJointParam param,double value)->void{singleton->slider_joint_set_param(joint,param,value);});
    js_singleton.add("slider_joint_get_param", [singleton](const RID & joint,PhysicsServer3D::SliderJointParam param)->double{return singleton->slider_joint_get_param(joint,param);});
    js_singleton.add("joint_make_cone_twist", [singleton](const RID & joint,const RID & body_A,const Transform3D & local_ref_A,const RID & body_B,const Transform3D & local_ref_B)->void{singleton->joint_make_cone_twist(joint,body_A,local_ref_A,body_B,local_ref_B);});
    js_singleton.add("cone_twist_joint_set_param", [singleton](const RID & joint,PhysicsServer3D::ConeTwistJointParam param,double value)->void{singleton->cone_twist_joint_set_param(joint,param,value);});
    js_singleton.add("cone_twist_joint_get_param", [singleton](const RID & joint,PhysicsServer3D::ConeTwistJointParam param)->double{return singleton->cone_twist_joint_get_param(joint,param);});
    js_singleton.add("joint_get_type", [singleton](const RID & joint)->PhysicsServer3D::JointType{return singleton->joint_get_type(joint);});
    js_singleton.add("joint_set_solver_priority", [singleton](const RID & joint,int32_t priority)->void{singleton->joint_set_solver_priority(joint,priority);});
    js_singleton.add("joint_get_solver_priority", [singleton](const RID & joint)->int64_t{return singleton->joint_get_solver_priority(joint);});
    js_singleton.add("joint_disable_collisions_between_bodies", [singleton](const RID & joint,bool disable)->void{singleton->joint_disable_collisions_between_bodies(joint,disable);});
    js_singleton.add("joint_is_disabled_collisions_between_bodies", [singleton](const RID & joint)->bool{return singleton->joint_is_disabled_collisions_between_bodies(joint);});
    js_singleton.add("joint_make_generic_6dof", [singleton](const RID & joint,const RID & body_A,const Transform3D & local_ref_A,const RID & body_B,const Transform3D & local_ref_B)->void{singleton->joint_make_generic_6dof(joint,body_A,local_ref_A,body_B,local_ref_B);});
    js_singleton.add("generic_6dof_joint_set_param", [singleton](const RID & joint,Vector3::Axis axis,PhysicsServer3D::G6DOFJointAxisParam param,double value)->void{singleton->generic_6dof_joint_set_param(joint,axis,param,value);});
    js_singleton.add("generic_6dof_joint_get_param", [singleton](const RID & joint,Vector3::Axis axis,PhysicsServer3D::G6DOFJointAxisParam param)->double{return singleton->generic_6dof_joint_get_param(joint,axis,param);});
    js_singleton.add("generic_6dof_joint_set_flag", [singleton](const RID & joint,Vector3::Axis axis,PhysicsServer3D::G6DOFJointAxisFlag flag,bool enable)->void{singleton->generic_6dof_joint_set_flag(joint,axis,flag,enable);});
    js_singleton.add("generic_6dof_joint_get_flag", [singleton](const RID & joint,Vector3::Axis axis,PhysicsServer3D::G6DOFJointAxisFlag flag)->bool{return singleton->generic_6dof_joint_get_flag(joint,axis,flag);});
    js_singleton.add("free_rid", [singleton](const RID & rid)->void{singleton->free_rid(rid);});
    js_singleton.add("set_active", [singleton](bool active)->void{singleton->set_active(active);});
    js_singleton.add("get_process_info", [singleton](PhysicsServer3D::ProcessInfo process_info)->int64_t{return singleton->get_process_info(process_info);});
    context->global()["PhysicsServer3D"] = js_singleton;

    qjs::Value _JointType = context->newObject();
    _JointType["JOINT_TYPE_PIN"] = PhysicsServer3D::JointType::JOINT_TYPE_PIN;
    _JointType["JOINT_TYPE_HINGE"] = PhysicsServer3D::JointType::JOINT_TYPE_HINGE;
    _JointType["JOINT_TYPE_SLIDER"] = PhysicsServer3D::JointType::JOINT_TYPE_SLIDER;
    _JointType["JOINT_TYPE_CONE_TWIST"] = PhysicsServer3D::JointType::JOINT_TYPE_CONE_TWIST;
    _JointType["JOINT_TYPE_6DOF"] = PhysicsServer3D::JointType::JOINT_TYPE_6DOF;
    _JointType["JOINT_TYPE_MAX"] = PhysicsServer3D::JointType::JOINT_TYPE_MAX;
    js_singleton["JointType"] = _JointType;
    qjs::Value _PinJointParam = context->newObject();
    _PinJointParam["PIN_JOINT_BIAS"] = PhysicsServer3D::PinJointParam::PIN_JOINT_BIAS;
    _PinJointParam["PIN_JOINT_DAMPING"] = PhysicsServer3D::PinJointParam::PIN_JOINT_DAMPING;
    _PinJointParam["PIN_JOINT_IMPULSE_CLAMP"] = PhysicsServer3D::PinJointParam::PIN_JOINT_IMPULSE_CLAMP;
    js_singleton["PinJointParam"] = _PinJointParam;
    qjs::Value _HingeJointParam = context->newObject();
    _HingeJointParam["HINGE_JOINT_BIAS"] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_BIAS;
    _HingeJointParam["HINGE_JOINT_LIMIT_UPPER"] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_UPPER;
    _HingeJointParam["HINGE_JOINT_LIMIT_LOWER"] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_LOWER;
    _HingeJointParam["HINGE_JOINT_LIMIT_BIAS"] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_BIAS;
    _HingeJointParam["HINGE_JOINT_LIMIT_SOFTNESS"] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_SOFTNESS;
    _HingeJointParam["HINGE_JOINT_LIMIT_RELAXATION"] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_LIMIT_RELAXATION;
    _HingeJointParam["HINGE_JOINT_MOTOR_TARGET_VELOCITY"] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_MOTOR_TARGET_VELOCITY;
    _HingeJointParam["HINGE_JOINT_MOTOR_MAX_IMPULSE"] = PhysicsServer3D::HingeJointParam::HINGE_JOINT_MOTOR_MAX_IMPULSE;
    js_singleton["HingeJointParam"] = _HingeJointParam;
    qjs::Value _HingeJointFlag = context->newObject();
    _HingeJointFlag["HINGE_JOINT_FLAG_USE_LIMIT"] = PhysicsServer3D::HingeJointFlag::HINGE_JOINT_FLAG_USE_LIMIT;
    _HingeJointFlag["HINGE_JOINT_FLAG_ENABLE_MOTOR"] = PhysicsServer3D::HingeJointFlag::HINGE_JOINT_FLAG_ENABLE_MOTOR;
    js_singleton["HingeJointFlag"] = _HingeJointFlag;
    qjs::Value _SliderJointParam = context->newObject();
    _SliderJointParam["SLIDER_JOINT_LINEAR_LIMIT_UPPER"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_UPPER;
    _SliderJointParam["SLIDER_JOINT_LINEAR_LIMIT_LOWER"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_LOWER;
    _SliderJointParam["SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS;
    _SliderJointParam["SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION;
    _SliderJointParam["SLIDER_JOINT_LINEAR_LIMIT_DAMPING"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_LIMIT_DAMPING;
    _SliderJointParam["SLIDER_JOINT_LINEAR_MOTION_SOFTNESS"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_MOTION_SOFTNESS;
    _SliderJointParam["SLIDER_JOINT_LINEAR_MOTION_RESTITUTION"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_MOTION_RESTITUTION;
    _SliderJointParam["SLIDER_JOINT_LINEAR_MOTION_DAMPING"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_MOTION_DAMPING;
    _SliderJointParam["SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS;
    _SliderJointParam["SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION;
    _SliderJointParam["SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_LIMIT_UPPER"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_UPPER;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_LIMIT_LOWER"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_LOWER;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_LIMIT_DAMPING"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_LIMIT_DAMPING;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_MOTION_DAMPING"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_MOTION_DAMPING;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION;
    _SliderJointParam["SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING;
    _SliderJointParam["SLIDER_JOINT_MAX"] = PhysicsServer3D::SliderJointParam::SLIDER_JOINT_MAX;
    js_singleton["SliderJointParam"] = _SliderJointParam;
    qjs::Value _ConeTwistJointParam = context->newObject();
    _ConeTwistJointParam["CONE_TWIST_JOINT_SWING_SPAN"] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_SWING_SPAN;
    _ConeTwistJointParam["CONE_TWIST_JOINT_TWIST_SPAN"] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_TWIST_SPAN;
    _ConeTwistJointParam["CONE_TWIST_JOINT_BIAS"] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_BIAS;
    _ConeTwistJointParam["CONE_TWIST_JOINT_SOFTNESS"] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_SOFTNESS;
    _ConeTwistJointParam["CONE_TWIST_JOINT_RELAXATION"] = PhysicsServer3D::ConeTwistJointParam::CONE_TWIST_JOINT_RELAXATION;
    js_singleton["ConeTwistJointParam"] = _ConeTwistJointParam;
    qjs::Value _G6DOFJointAxisParam = context->newObject();
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_LOWER_LIMIT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_LOWER_LIMIT;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_UPPER_LIMIT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_UPPER_LIMIT;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_RESTITUTION"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_RESTITUTION;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_DAMPING"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_DAMPING;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_SPRING_STIFFNESS"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_SPRING_STIFFNESS;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_SPRING_DAMPING"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_SPRING_DAMPING;
    _G6DOFJointAxisParam["G6DOF_JOINT_LINEAR_SPRING_EQUILIBRIUM_POINT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_LINEAR_SPRING_EQUILIBRIUM_POINT;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_LOWER_LIMIT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_LOWER_LIMIT;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_UPPER_LIMIT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_UPPER_LIMIT;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_DAMPING"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_DAMPING;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_RESTITUTION"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_RESTITUTION;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_FORCE_LIMIT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_FORCE_LIMIT;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_ERP"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_ERP;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_SPRING_STIFFNESS"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_SPRING_STIFFNESS;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_SPRING_DAMPING"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_SPRING_DAMPING;
    _G6DOFJointAxisParam["G6DOF_JOINT_ANGULAR_SPRING_EQUILIBRIUM_POINT"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_ANGULAR_SPRING_EQUILIBRIUM_POINT;
    _G6DOFJointAxisParam["G6DOF_JOINT_MAX"] = PhysicsServer3D::G6DOFJointAxisParam::G6DOF_JOINT_MAX;
    js_singleton["G6DOFJointAxisParam"] = _G6DOFJointAxisParam;
    qjs::Value _G6DOFJointAxisFlag = context->newObject();
    _G6DOFJointAxisFlag["G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT"] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT;
    _G6DOFJointAxisFlag["G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT"] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT;
    _G6DOFJointAxisFlag["G6DOF_JOINT_FLAG_ENABLE_ANGULAR_SPRING"] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_ANGULAR_SPRING;
    _G6DOFJointAxisFlag["G6DOF_JOINT_FLAG_ENABLE_LINEAR_SPRING"] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_LINEAR_SPRING;
    _G6DOFJointAxisFlag["G6DOF_JOINT_FLAG_ENABLE_MOTOR"] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_MOTOR;
    _G6DOFJointAxisFlag["G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR"] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR;
    _G6DOFJointAxisFlag["G6DOF_JOINT_FLAG_MAX"] = PhysicsServer3D::G6DOFJointAxisFlag::G6DOF_JOINT_FLAG_MAX;
    js_singleton["G6DOFJointAxisFlag"] = _G6DOFJointAxisFlag;
    qjs::Value _ShapeType = context->newObject();
    _ShapeType["SHAPE_WORLD_BOUNDARY"] = PhysicsServer3D::ShapeType::SHAPE_WORLD_BOUNDARY;
    _ShapeType["SHAPE_SEPARATION_RAY"] = PhysicsServer3D::ShapeType::SHAPE_SEPARATION_RAY;
    _ShapeType["SHAPE_SPHERE"] = PhysicsServer3D::ShapeType::SHAPE_SPHERE;
    _ShapeType["SHAPE_BOX"] = PhysicsServer3D::ShapeType::SHAPE_BOX;
    _ShapeType["SHAPE_CAPSULE"] = PhysicsServer3D::ShapeType::SHAPE_CAPSULE;
    _ShapeType["SHAPE_CYLINDER"] = PhysicsServer3D::ShapeType::SHAPE_CYLINDER;
    _ShapeType["SHAPE_CONVEX_POLYGON"] = PhysicsServer3D::ShapeType::SHAPE_CONVEX_POLYGON;
    _ShapeType["SHAPE_CONCAVE_POLYGON"] = PhysicsServer3D::ShapeType::SHAPE_CONCAVE_POLYGON;
    _ShapeType["SHAPE_HEIGHTMAP"] = PhysicsServer3D::ShapeType::SHAPE_HEIGHTMAP;
    _ShapeType["SHAPE_SOFT_BODY"] = PhysicsServer3D::ShapeType::SHAPE_SOFT_BODY;
    _ShapeType["SHAPE_CUSTOM"] = PhysicsServer3D::ShapeType::SHAPE_CUSTOM;
    js_singleton["ShapeType"] = _ShapeType;
    qjs::Value _AreaParameter = context->newObject();
    _AreaParameter["AREA_PARAM_GRAVITY_OVERRIDE_MODE"] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY_OVERRIDE_MODE;
    _AreaParameter["AREA_PARAM_GRAVITY"] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY;
    _AreaParameter["AREA_PARAM_GRAVITY_VECTOR"] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY_VECTOR;
    _AreaParameter["AREA_PARAM_GRAVITY_IS_POINT"] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY_IS_POINT;
    _AreaParameter["AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE"] = PhysicsServer3D::AreaParameter::AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE;
    _AreaParameter["AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE"] = PhysicsServer3D::AreaParameter::AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE;
    _AreaParameter["AREA_PARAM_LINEAR_DAMP"] = PhysicsServer3D::AreaParameter::AREA_PARAM_LINEAR_DAMP;
    _AreaParameter["AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE"] = PhysicsServer3D::AreaParameter::AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE;
    _AreaParameter["AREA_PARAM_ANGULAR_DAMP"] = PhysicsServer3D::AreaParameter::AREA_PARAM_ANGULAR_DAMP;
    _AreaParameter["AREA_PARAM_PRIORITY"] = PhysicsServer3D::AreaParameter::AREA_PARAM_PRIORITY;
    _AreaParameter["AREA_PARAM_WIND_FORCE_MAGNITUDE"] = PhysicsServer3D::AreaParameter::AREA_PARAM_WIND_FORCE_MAGNITUDE;
    _AreaParameter["AREA_PARAM_WIND_SOURCE"] = PhysicsServer3D::AreaParameter::AREA_PARAM_WIND_SOURCE;
    _AreaParameter["AREA_PARAM_WIND_DIRECTION"] = PhysicsServer3D::AreaParameter::AREA_PARAM_WIND_DIRECTION;
    _AreaParameter["AREA_PARAM_WIND_ATTENUATION_FACTOR"] = PhysicsServer3D::AreaParameter::AREA_PARAM_WIND_ATTENUATION_FACTOR;
    js_singleton["AreaParameter"] = _AreaParameter;
    qjs::Value _AreaSpaceOverrideMode = context->newObject();
    _AreaSpaceOverrideMode["AREA_SPACE_OVERRIDE_DISABLED"] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_DISABLED;
    _AreaSpaceOverrideMode["AREA_SPACE_OVERRIDE_COMBINE"] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_COMBINE;
    _AreaSpaceOverrideMode["AREA_SPACE_OVERRIDE_COMBINE_REPLACE"] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_COMBINE_REPLACE;
    _AreaSpaceOverrideMode["AREA_SPACE_OVERRIDE_REPLACE"] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_REPLACE;
    _AreaSpaceOverrideMode["AREA_SPACE_OVERRIDE_REPLACE_COMBINE"] = PhysicsServer3D::AreaSpaceOverrideMode::AREA_SPACE_OVERRIDE_REPLACE_COMBINE;
    js_singleton["AreaSpaceOverrideMode"] = _AreaSpaceOverrideMode;
    qjs::Value _BodyMode = context->newObject();
    _BodyMode["BODY_MODE_STATIC"] = PhysicsServer3D::BodyMode::BODY_MODE_STATIC;
    _BodyMode["BODY_MODE_KINEMATIC"] = PhysicsServer3D::BodyMode::BODY_MODE_KINEMATIC;
    _BodyMode["BODY_MODE_RIGID"] = PhysicsServer3D::BodyMode::BODY_MODE_RIGID;
    _BodyMode["BODY_MODE_RIGID_LINEAR"] = PhysicsServer3D::BodyMode::BODY_MODE_RIGID_LINEAR;
    js_singleton["BodyMode"] = _BodyMode;
    qjs::Value _BodyParameter = context->newObject();
    _BodyParameter["BODY_PARAM_BOUNCE"] = PhysicsServer3D::BodyParameter::BODY_PARAM_BOUNCE;
    _BodyParameter["BODY_PARAM_FRICTION"] = PhysicsServer3D::BodyParameter::BODY_PARAM_FRICTION;
    _BodyParameter["BODY_PARAM_MASS"] = PhysicsServer3D::BodyParameter::BODY_PARAM_MASS;
    _BodyParameter["BODY_PARAM_INERTIA"] = PhysicsServer3D::BodyParameter::BODY_PARAM_INERTIA;
    _BodyParameter["BODY_PARAM_CENTER_OF_MASS"] = PhysicsServer3D::BodyParameter::BODY_PARAM_CENTER_OF_MASS;
    _BodyParameter["BODY_PARAM_GRAVITY_SCALE"] = PhysicsServer3D::BodyParameter::BODY_PARAM_GRAVITY_SCALE;
    _BodyParameter["BODY_PARAM_LINEAR_DAMP_MODE"] = PhysicsServer3D::BodyParameter::BODY_PARAM_LINEAR_DAMP_MODE;
    _BodyParameter["BODY_PARAM_ANGULAR_DAMP_MODE"] = PhysicsServer3D::BodyParameter::BODY_PARAM_ANGULAR_DAMP_MODE;
    _BodyParameter["BODY_PARAM_LINEAR_DAMP"] = PhysicsServer3D::BodyParameter::BODY_PARAM_LINEAR_DAMP;
    _BodyParameter["BODY_PARAM_ANGULAR_DAMP"] = PhysicsServer3D::BodyParameter::BODY_PARAM_ANGULAR_DAMP;
    _BodyParameter["BODY_PARAM_MAX"] = PhysicsServer3D::BodyParameter::BODY_PARAM_MAX;
    js_singleton["BodyParameter"] = _BodyParameter;
    qjs::Value _BodyDampMode = context->newObject();
    _BodyDampMode["BODY_DAMP_MODE_COMBINE"] = PhysicsServer3D::BodyDampMode::BODY_DAMP_MODE_COMBINE;
    _BodyDampMode["BODY_DAMP_MODE_REPLACE"] = PhysicsServer3D::BodyDampMode::BODY_DAMP_MODE_REPLACE;
    js_singleton["BodyDampMode"] = _BodyDampMode;
    qjs::Value _BodyState = context->newObject();
    _BodyState["BODY_STATE_TRANSFORM"] = PhysicsServer3D::BodyState::BODY_STATE_TRANSFORM;
    _BodyState["BODY_STATE_LINEAR_VELOCITY"] = PhysicsServer3D::BodyState::BODY_STATE_LINEAR_VELOCITY;
    _BodyState["BODY_STATE_ANGULAR_VELOCITY"] = PhysicsServer3D::BodyState::BODY_STATE_ANGULAR_VELOCITY;
    _BodyState["BODY_STATE_SLEEPING"] = PhysicsServer3D::BodyState::BODY_STATE_SLEEPING;
    _BodyState["BODY_STATE_CAN_SLEEP"] = PhysicsServer3D::BodyState::BODY_STATE_CAN_SLEEP;
    js_singleton["BodyState"] = _BodyState;
    qjs::Value _AreaBodyStatus = context->newObject();
    _AreaBodyStatus["AREA_BODY_ADDED"] = PhysicsServer3D::AreaBodyStatus::AREA_BODY_ADDED;
    _AreaBodyStatus["AREA_BODY_REMOVED"] = PhysicsServer3D::AreaBodyStatus::AREA_BODY_REMOVED;
    js_singleton["AreaBodyStatus"] = _AreaBodyStatus;
    qjs::Value _ProcessInfo = context->newObject();
    _ProcessInfo["INFO_ACTIVE_OBJECTS"] = PhysicsServer3D::ProcessInfo::INFO_ACTIVE_OBJECTS;
    _ProcessInfo["INFO_COLLISION_PAIRS"] = PhysicsServer3D::ProcessInfo::INFO_COLLISION_PAIRS;
    _ProcessInfo["INFO_ISLAND_COUNT"] = PhysicsServer3D::ProcessInfo::INFO_ISLAND_COUNT;
    js_singleton["ProcessInfo"] = _ProcessInfo;
    qjs::Value _SpaceParameter = context->newObject();
    _SpaceParameter["SPACE_PARAM_CONTACT_RECYCLE_RADIUS"] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_CONTACT_RECYCLE_RADIUS;
    _SpaceParameter["SPACE_PARAM_CONTACT_MAX_SEPARATION"] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_CONTACT_MAX_SEPARATION;
    _SpaceParameter["SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION"] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION;
    _SpaceParameter["SPACE_PARAM_CONTACT_DEFAULT_BIAS"] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_CONTACT_DEFAULT_BIAS;
    _SpaceParameter["SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD"] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD;
    _SpaceParameter["SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD"] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD;
    _SpaceParameter["SPACE_PARAM_BODY_TIME_TO_SLEEP"] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_BODY_TIME_TO_SLEEP;
    _SpaceParameter["SPACE_PARAM_SOLVER_ITERATIONS"] = PhysicsServer3D::SpaceParameter::SPACE_PARAM_SOLVER_ITERATIONS;
    js_singleton["SpaceParameter"] = _SpaceParameter;
    qjs::Value _BodyAxis = context->newObject();
    _BodyAxis["BODY_AXIS_LINEAR_X"] = PhysicsServer3D::BodyAxis::BODY_AXIS_LINEAR_X;
    _BodyAxis["BODY_AXIS_LINEAR_Y"] = PhysicsServer3D::BodyAxis::BODY_AXIS_LINEAR_Y;
    _BodyAxis["BODY_AXIS_LINEAR_Z"] = PhysicsServer3D::BodyAxis::BODY_AXIS_LINEAR_Z;
    _BodyAxis["BODY_AXIS_ANGULAR_X"] = PhysicsServer3D::BodyAxis::BODY_AXIS_ANGULAR_X;
    _BodyAxis["BODY_AXIS_ANGULAR_Y"] = PhysicsServer3D::BodyAxis::BODY_AXIS_ANGULAR_Y;
    _BodyAxis["BODY_AXIS_ANGULAR_Z"] = PhysicsServer3D::BodyAxis::BODY_AXIS_ANGULAR_Z;
    js_singleton["BodyAxis"] = _BodyAxis;
}