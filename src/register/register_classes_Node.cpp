#include "register/register_classes.h"
#include "register/utils.h"

using namespace godot;

void register_classes_Node() {
    qjs::Context::Module &_module = _;
    _module.class_<Node>("Node")
           .constructor<>()
           .property<Node::get_name, Node::set_name>("name")
           .property<Node::is_unique_name_in_owner, Node::set_unique_name_in_owner>("unique_name_in_owner")
           .property<Node::get_scene_file_path, Node::set_scene_file_path>("scene_file_path")
           .property<Node::get_owner, Node::set_owner>("owner")
           .property<Node::get_multiplayer>("multiplayer")
           .property<Node::get_process_mode, Node::set_process_mode>("process_mode")
           .property<Node::get_process_priority, Node::set_process_priority>("process_priority")
           .property<Node::get_physics_process_priority, Node::set_physics_process_priority>("process_physics_priority")
           .property<Node::get_process_thread_group, Node::set_process_thread_group>("process_thread_group")
           .property<Node::get_process_thread_group_order, Node::set_process_thread_group_order>("process_thread_group_order")
           .property<Node::get_process_thread_messages, Node::set_process_thread_messages>("process_thread_messages")
           .property<Node::get_editor_description, Node::set_editor_description>("editor_description")
		   .fun<static_cast<void(Node::*)(double)>(&Node::_process)>("_process")
		   .fun<static_cast<void(Node::*)(double)>(&Node::_physics_process)>("_physics_process")
		   .fun<static_cast<void(Node::*)()>(&Node::_enter_tree)>("_enter_tree")
		   .fun<static_cast<void(Node::*)()>(&Node::_exit_tree)>("_exit_tree")
		   .fun<static_cast<void(Node::*)()>(&Node::_ready)>("_ready")
		   .fun<static_cast<PackedStringArray(Node::*)()const>(&Node::_get_configuration_warnings)>("_get_configuration_warnings")
		   .fun<static_cast<void(Node::*)(const Ref<InputEvent> &)>(&Node::_input)>("_input")
		   .fun<static_cast<void(Node::*)(const Ref<InputEvent> &)>(&Node::_shortcut_input)>("_shortcut_input")
		   .fun<static_cast<void(Node::*)(const Ref<InputEvent> &)>(&Node::_unhandled_input)>("_unhandled_input")
		   .fun<static_cast<void(Node::*)(const Ref<InputEvent> &)>(&Node::_unhandled_key_input)>("_unhandled_key_input")
            .static_fun<Node::print_orphan_nodes>("print_orphan_nodes")
		   .fun<static_cast<void(Node::*)(Node *,bool)>(&Node::add_sibling)>("add_sibling")
		   .fun<static_cast<void(Node::*)(Node *,bool,Node::InternalMode)>(&Node::add_child)>("add_child")
		   .fun<static_cast<void(Node::*)(Node *)>(&Node::remove_child)>("remove_child")
		   .fun<static_cast<void(Node::*)(Node *,bool)>(&Node::reparent)>("reparent")
		   .fun<static_cast<int32_t(Node::*)(bool)const>(&Node::get_child_count)>("get_child_count")
		   .fun<static_cast<TypedArray<Node>(Node::*)(bool)const>(&Node::get_children)>("get_children")
		   .fun<static_cast<Node *(Node::*)(int32_t,bool)const>(&Node::get_child)>("get_child")
		   .fun<static_cast<bool(Node::*)(const NodePath &)const>(&Node::has_node)>("has_node")
		   .fun<static_cast<Node *(Node::*)(const NodePath &)const>(&Node::get_node)>("get_node")
		   .fun<static_cast<Node *(Node::*)(const NodePath &)const>(&Node::get_node_or_null)>("get_node_or_null")
		   .fun<static_cast<Node *(Node::*)()const>(&Node::get_parent)>("get_parent")
		   .fun<static_cast<Node *(Node::*)(const String &,bool,bool)const>(&Node::find_child)>("find_child")
		   .fun<static_cast<TypedArray<Node>(Node::*)(const String &,const String &,bool,bool)const>(&Node::find_children)>("find_children")
		   .fun<static_cast<Node *(Node::*)(const String &)const>(&Node::find_parent)>("find_parent")
		   .fun<static_cast<bool(Node::*)(const NodePath &)const>(&Node::has_node_and_resource)>("has_node_and_resource")
		   .fun<static_cast<Array(Node::*)(const NodePath &)>(&Node::get_node_and_resource)>("get_node_and_resource")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_inside_tree)>("is_inside_tree")
		   .fun<static_cast<bool(Node::*)(Node *)const>(&Node::is_ancestor_of)>("is_ancestor_of")
		   .fun<static_cast<bool(Node::*)(Node *)const>(&Node::is_greater_than)>("is_greater_than")
		   .fun<static_cast<NodePath(Node::*)()const>(&Node::get_path)>("get_path")
		   .fun<static_cast<NodePath(Node::*)(Node *,bool)const>(&Node::get_path_to)>("get_path_to")
		   .fun<static_cast<void(Node::*)(const StringName &,bool)>(&Node::add_to_group)>("add_to_group")
		   .fun<static_cast<void(Node::*)(const StringName &)>(&Node::remove_from_group)>("remove_from_group")
		   .fun<static_cast<bool(Node::*)(const StringName &)const>(&Node::is_in_group)>("is_in_group")
		   .fun<static_cast<void(Node::*)(Node *,int32_t)>(&Node::move_child)>("move_child")
		   .fun<static_cast<TypedArray<StringName>(Node::*)()const>(&Node::get_groups)>("get_groups")
		   .fun<static_cast<int32_t(Node::*)(bool)const>(&Node::get_index)>("get_index")
		   .fun<static_cast<void(Node::*)()>(&Node::print_tree)>("print_tree")
		   .fun<static_cast<void(Node::*)()>(&Node::print_tree_pretty)>("print_tree_pretty")
		   .fun<static_cast<String(Node::*)()>(&Node::get_tree_string)>("get_tree_string")
		   .fun<static_cast<String(Node::*)()>(&Node::get_tree_string_pretty)>("get_tree_string_pretty")
		   .fun<static_cast<void(Node::*)(int32_t)>(&Node::propagate_notification)>("propagate_notification")
		   .fun<static_cast<void(Node::*)(const StringName &,const Array &,bool)>(&Node::propagate_call)>("propagate_call")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_physics_process)>("set_physics_process")
		   .fun<static_cast<double(Node::*)()const>(&Node::get_physics_process_delta_time)>("get_physics_process_delta_time")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_physics_processing)>("is_physics_processing")
		   .fun<static_cast<double(Node::*)()const>(&Node::get_process_delta_time)>("get_process_delta_time")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_process)>("set_process")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_processing)>("is_processing")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_process_input)>("set_process_input")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_processing_input)>("is_processing_input")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_process_shortcut_input)>("set_process_shortcut_input")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_processing_shortcut_input)>("is_processing_shortcut_input")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_process_unhandled_input)>("set_process_unhandled_input")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_processing_unhandled_input)>("is_processing_unhandled_input")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_process_unhandled_key_input)>("set_process_unhandled_key_input")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_processing_unhandled_key_input)>("is_processing_unhandled_key_input")
		   .fun<static_cast<bool(Node::*)()const>(&Node::can_process)>("can_process")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_display_folded)>("set_display_folded")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_displayed_folded)>("is_displayed_folded")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_process_internal)>("set_process_internal")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_processing_internal)>("is_processing_internal")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_physics_process_internal)>("set_physics_process_internal")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_physics_processing_internal)>("is_physics_processing_internal")
		   .fun<static_cast<Window *(Node::*)()const>(&Node::get_window)>("get_window")
		   .fun<static_cast<Window *(Node::*)()const>(&Node::get_last_exclusive_window)>("get_last_exclusive_window")
		   .fun<static_cast<SceneTree *(Node::*)()const>(&Node::get_tree)>("get_tree")
		   .fun<static_cast<Ref<Tween>(Node::*)()>(&Node::create_tween)>("create_tween")
		   .fun<static_cast<Node *(Node::*)(int32_t)const>(&Node::duplicate)>("duplicate")
		   .fun<static_cast<void(Node::*)(Node *,bool)>(&Node::replace_by)>("replace_by")
		   .fun<static_cast<void(Node::*)(bool)>(&Node::set_scene_instance_load_placeholder)>("set_scene_instance_load_placeholder")
		   .fun<static_cast<bool(Node::*)()const>(&Node::get_scene_instance_load_placeholder)>("get_scene_instance_load_placeholder")
		   .fun<static_cast<void(Node::*)(Node *,bool)>(&Node::set_editable_instance)>("set_editable_instance")
		   .fun<static_cast<bool(Node::*)(Node *)const>(&Node::is_editable_instance)>("is_editable_instance")
		   .fun<static_cast<Viewport *(Node::*)()const>(&Node::get_viewport)>("get_viewport")
		   .fun<static_cast<void(Node::*)()>(&Node::queue_free)>("queue_free")
		   .fun<static_cast<void(Node::*)()>(&Node::request_ready)>("request_ready")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_node_ready)>("is_node_ready")
		   .fun<static_cast<void(Node::*)(int32_t,bool)>(&Node::set_multiplayer_authority)>("set_multiplayer_authority")
		   .fun<static_cast<int32_t(Node::*)()const>(&Node::get_multiplayer_authority)>("get_multiplayer_authority")
		   .fun<static_cast<bool(Node::*)()const>(&Node::is_multiplayer_authority)>("is_multiplayer_authority")
		   .fun<static_cast<void(Node::*)(const StringName &,const Variant &)>(&Node::rpc_config)>("rpc_config")
		   .fun<static_cast<Error(Node::*)(const StringName &,rest<Variant> args)>(&Node::rpc)>("rpc")
		   .fun<static_cast<Error(Node::*)(int64_t,const StringName &,rest<Variant> args)>(&Node::rpc_id)>("rpc_id")
		   .fun<static_cast<void(Node::*)()>(&Node::update_configuration_warnings)>("update_configuration_warnings")
		   .fun<static_cast<Variant(Node::*)(const StringName &,rest<Variant> args)>(&Node::call_deferred_thread_group)>("call_deferred_thread_group")
		   .fun<static_cast<void(Node::*)(const StringName &,const Variant &)>(&Node::set_deferred_thread_group)>("set_deferred_thread_group")
		   .fun<static_cast<void(Node::*)(int32_t)>(&Node::notify_deferred_thread_group)>("notify_deferred_thread_group")
		   .fun<static_cast<Variant(Node::*)(const StringName &,rest<Variant> args)>(&Node::call_thread_safe)>("call_thread_safe")
		   .fun<static_cast<void(Node::*)(const StringName &,const Variant &)>(&Node::set_thread_safe)>("set_thread_safe")
		   .fun<static_cast<void(Node::*)(int32_t)>(&Node::notify_thread_safe)>("notify_thread_safe")
;}