#include <godot_cpp/classes/rendering_server.hpp>
#include <godot_cpp/classes/ref.hpp>
#include <godot_cpp/core/type_info.hpp>
#include <godot_cpp/variant/aabb.hpp>
#include <godot_cpp/variant/basis.hpp>
#include <godot_cpp/variant/color.hpp>
#include <godot_cpp/variant/plane.hpp>
#include <godot_cpp/variant/rect2.hpp>
#include <godot_cpp/variant/transform2d.hpp>
#include <godot_cpp/variant/transform3d.hpp>
#include <godot_cpp/variant/typed_array.hpp>
#include <godot_cpp/variant/variant.hpp>
#include <godot_cpp/variant/vector2.hpp>
#include <godot_cpp/variant/vector2i.hpp>
#include <godot_cpp/variant/vector3.hpp>
#include <godot_cpp/variant/vector3i.hpp>
#include <godot_cpp/classes/image.hpp>
#include <godot_cpp/classes/rendering_device.hpp>
#include <godot_cpp/variant/array.hpp>
#include <godot_cpp/variant/callable.hpp>
#include <godot_cpp/variant/dictionary.hpp>
#include <godot_cpp/variant/packed_byte_array.hpp>
#include <godot_cpp/variant/packed_color_array.hpp>
#include <godot_cpp/variant/packed_float32_array.hpp>
#include <godot_cpp/variant/packed_int32_array.hpp>
#include <godot_cpp/variant/packed_int64_array.hpp>
#include <godot_cpp/variant/packed_vector2_array.hpp>
#include <godot_cpp/variant/packed_vector3_array.hpp>
#include <godot_cpp/variant/rid.hpp>
#include <godot_cpp/variant/string.hpp>
#include <godot_cpp/variant/string_name.hpp>
#include <stdint.h>

#include "register/register_classes.h"
#include "qjspp/utils.h"
#include "qjspp.hpp"

using namespace godot;

void register_singletons_RenderingServer() {
	qjs::Value js_singleton = context->newObject();
    RenderingServer *singleton = RenderingServer::get_singleton();
    js_singleton.add("texture_2d_create", [singleton](const Ref<Image> & image)->RID{return singleton->texture_2d_create(image);});
    js_singleton.add("texture_2d_layered_create", [singleton](const TypedArray<Image> & layers,RenderingServer::TextureLayeredType layered_type)->RID{return singleton->texture_2d_layered_create(layers,layered_type);});
    js_singleton.add("texture_3d_create", [singleton](Image::Format format,int32_t width,int32_t height,int32_t depth,bool mipmaps,const TypedArray<Image> & data)->RID{return singleton->texture_3d_create(format,width,height,depth,mipmaps,data);});
    js_singleton.add("texture_proxy_create", [singleton](const RID & base)->RID{return singleton->texture_proxy_create(base);});
    js_singleton.add("texture_2d_update", [singleton](const RID & texture,const Ref<Image> & image,int32_t layer)->void{singleton->texture_2d_update(texture,image,layer);});
    js_singleton.add("texture_3d_update", [singleton](const RID & texture,const TypedArray<Image> & data)->void{singleton->texture_3d_update(texture,data);});
    js_singleton.add("texture_proxy_update", [singleton](const RID & texture,const RID & proxy_to)->void{singleton->texture_proxy_update(texture,proxy_to);});
    js_singleton.add("texture_2d_placeholder_create", [singleton]()->RID{return singleton->texture_2d_placeholder_create();});
    js_singleton.add("texture_2d_layered_placeholder_create", [singleton](RenderingServer::TextureLayeredType layered_type)->RID{return singleton->texture_2d_layered_placeholder_create(layered_type);});
    js_singleton.add("texture_3d_placeholder_create", [singleton]()->RID{return singleton->texture_3d_placeholder_create();});
    js_singleton.add("texture_2d_get", [singleton](const RID & texture)->Ref<Image>{return singleton->texture_2d_get(texture);});
    js_singleton.add("texture_2d_layer_get", [singleton](const RID & texture,int32_t layer)->Ref<Image>{return singleton->texture_2d_layer_get(texture,layer);});
    js_singleton.add("texture_3d_get", [singleton](const RID & texture)->TypedArray<Image>{return singleton->texture_3d_get(texture);});
    js_singleton.add("texture_replace", [singleton](const RID & texture,const RID & by_texture)->void{singleton->texture_replace(texture,by_texture);});
    js_singleton.add("texture_set_size_override", [singleton](const RID & texture,int32_t width,int32_t height)->void{singleton->texture_set_size_override(texture,width,height);});
    js_singleton.add("texture_set_path", [singleton](const RID & texture,const String & path)->void{singleton->texture_set_path(texture,path);});
    js_singleton.add("texture_get_path", [singleton](const RID & texture)->String{return singleton->texture_get_path(texture);});
    js_singleton.add("texture_get_format", [singleton](const RID & texture)->Image::Format{return singleton->texture_get_format(texture);});
    js_singleton.add("texture_set_force_redraw_if_visible", [singleton](const RID & texture,bool enable)->void{singleton->texture_set_force_redraw_if_visible(texture,enable);});
    js_singleton.add("texture_rd_create", [singleton](const RID & rd_texture,RenderingServer::TextureLayeredType layer_type)->RID{return singleton->texture_rd_create(rd_texture,layer_type);});
    js_singleton.add("texture_get_rd_texture", [singleton](const RID & texture,bool srgb)->RID{return singleton->texture_get_rd_texture(texture,srgb);});
    js_singleton.add("texture_get_native_handle", [singleton](const RID & texture,bool srgb)->int64_t{return singleton->texture_get_native_handle(texture,srgb);});
    js_singleton.add("shader_create", [singleton]()->RID{return singleton->shader_create();});
    js_singleton.add("shader_set_code", [singleton](const RID & shader,const String & code)->void{singleton->shader_set_code(shader,code);});
    js_singleton.add("shader_set_path_hint", [singleton](const RID & shader,const String & path)->void{singleton->shader_set_path_hint(shader,path);});
    js_singleton.add("shader_get_code", [singleton](const RID & shader)->String{return singleton->shader_get_code(shader);});
    js_singleton.add("get_shader_parameter_list", [singleton](const RID & shader)->TypedArray<Dictionary>{return singleton->get_shader_parameter_list(shader);});
    js_singleton.add("shader_get_parameter_default", [singleton](const RID & shader,const StringName & name)->Variant{return singleton->shader_get_parameter_default(shader,name);});
    js_singleton.add("shader_set_default_texture_parameter", [singleton](const RID & shader,const StringName & name,const RID & texture,int32_t index)->void{singleton->shader_set_default_texture_parameter(shader,name,texture,index);});
    js_singleton.add("shader_get_default_texture_parameter", [singleton](const RID & shader,const StringName & name,int32_t index)->RID{return singleton->shader_get_default_texture_parameter(shader,name,index);});
    js_singleton.add("material_create", [singleton]()->RID{return singleton->material_create();});
    js_singleton.add("material_set_shader", [singleton](const RID & shader_material,const RID & shader)->void{singleton->material_set_shader(shader_material,shader);});
    js_singleton.add("material_set_param", [singleton](const RID & material,const StringName & parameter,const Variant & value)->void{singleton->material_set_param(material,parameter,value);});
    js_singleton.add("material_get_param", [singleton](const RID & material,const StringName & parameter)->Variant{return singleton->material_get_param(material,parameter);});
    js_singleton.add("material_set_render_priority", [singleton](const RID & material,int32_t priority)->void{singleton->material_set_render_priority(material,priority);});
    js_singleton.add("material_set_next_pass", [singleton](const RID & material,const RID & next_material)->void{singleton->material_set_next_pass(material,next_material);});
    js_singleton.add("mesh_create_from_surfaces", [singleton](const TypedArray<Dictionary> & surfaces,int32_t blend_shape_count)->RID{return singleton->mesh_create_from_surfaces(surfaces,blend_shape_count);});
    js_singleton.add("mesh_create", [singleton]()->RID{return singleton->mesh_create();});
    js_singleton.add("mesh_surface_get_format_offset", [singleton](BitField<RenderingServer::ArrayFormat> format,int32_t vertex_count,int32_t array_index)->int64_t{return singleton->mesh_surface_get_format_offset(format,vertex_count,array_index);});
    js_singleton.add("mesh_surface_get_format_vertex_stride", [singleton](BitField<RenderingServer::ArrayFormat> format,int32_t vertex_count)->int64_t{return singleton->mesh_surface_get_format_vertex_stride(format,vertex_count);});
    js_singleton.add("mesh_surface_get_format_normal_tangent_stride", [singleton](BitField<RenderingServer::ArrayFormat> format,int32_t vertex_count)->int64_t{return singleton->mesh_surface_get_format_normal_tangent_stride(format,vertex_count);});
    js_singleton.add("mesh_surface_get_format_attribute_stride", [singleton](BitField<RenderingServer::ArrayFormat> format,int32_t vertex_count)->int64_t{return singleton->mesh_surface_get_format_attribute_stride(format,vertex_count);});
    js_singleton.add("mesh_surface_get_format_skin_stride", [singleton](BitField<RenderingServer::ArrayFormat> format,int32_t vertex_count)->int64_t{return singleton->mesh_surface_get_format_skin_stride(format,vertex_count);});
    js_singleton.add("mesh_add_surface", [singleton](const RID & mesh,const Dictionary & surface)->void{singleton->mesh_add_surface(mesh,surface);});
    js_singleton.add("mesh_add_surface_from_arrays", [singleton](const RID & mesh,RenderingServer::PrimitiveType primitive,const Array & arrays,const Array & blend_shapes,const Dictionary & lods,BitField<RenderingServer::ArrayFormat> compress_format)->void{singleton->mesh_add_surface_from_arrays(mesh,primitive,arrays,blend_shapes,lods,compress_format);});
    js_singleton.add("mesh_get_blend_shape_count", [singleton](const RID & mesh)->int64_t{return singleton->mesh_get_blend_shape_count(mesh);});
    js_singleton.add("mesh_set_blend_shape_mode", [singleton](const RID & mesh,RenderingServer::BlendShapeMode mode)->void{singleton->mesh_set_blend_shape_mode(mesh,mode);});
    js_singleton.add("mesh_get_blend_shape_mode", [singleton](const RID & mesh)->RenderingServer::BlendShapeMode{return singleton->mesh_get_blend_shape_mode(mesh);});
    js_singleton.add("mesh_surface_set_material", [singleton](const RID & mesh,int32_t surface,const RID & material)->void{singleton->mesh_surface_set_material(mesh,surface,material);});
    js_singleton.add("mesh_surface_get_material", [singleton](const RID & mesh,int32_t surface)->RID{return singleton->mesh_surface_get_material(mesh,surface);});
    js_singleton.add("mesh_get_surface", [singleton](const RID & mesh,int32_t surface)->Dictionary{return singleton->mesh_get_surface(mesh,surface);});
    js_singleton.add("mesh_surface_get_arrays", [singleton](const RID & mesh,int32_t surface)->Array{return singleton->mesh_surface_get_arrays(mesh,surface);});
    js_singleton.add("mesh_surface_get_blend_shape_arrays", [singleton](const RID & mesh,int32_t surface)->TypedArray<Array>{return singleton->mesh_surface_get_blend_shape_arrays(mesh,surface);});
    js_singleton.add("mesh_get_surface_count", [singleton](const RID & mesh)->int64_t{return singleton->mesh_get_surface_count(mesh);});
    js_singleton.add("mesh_set_custom_aabb", [singleton](const RID & mesh,const AABB & aabb)->void{singleton->mesh_set_custom_aabb(mesh,aabb);});
    js_singleton.add("mesh_get_custom_aabb", [singleton](const RID & mesh)->AABB{return singleton->mesh_get_custom_aabb(mesh);});
    js_singleton.add("mesh_clear", [singleton](const RID & mesh)->void{singleton->mesh_clear(mesh);});
    js_singleton.add("mesh_surface_update_vertex_region", [singleton](const RID & mesh,int32_t surface,int32_t offset,const PackedByteArray & data)->void{singleton->mesh_surface_update_vertex_region(mesh,surface,offset,data);});
    js_singleton.add("mesh_surface_update_attribute_region", [singleton](const RID & mesh,int32_t surface,int32_t offset,const PackedByteArray & data)->void{singleton->mesh_surface_update_attribute_region(mesh,surface,offset,data);});
    js_singleton.add("mesh_surface_update_skin_region", [singleton](const RID & mesh,int32_t surface,int32_t offset,const PackedByteArray & data)->void{singleton->mesh_surface_update_skin_region(mesh,surface,offset,data);});
    js_singleton.add("mesh_set_shadow_mesh", [singleton](const RID & mesh,const RID & shadow_mesh)->void{singleton->mesh_set_shadow_mesh(mesh,shadow_mesh);});
    js_singleton.add("multimesh_create", [singleton]()->RID{return singleton->multimesh_create();});
    js_singleton.add("multimesh_allocate_data", [singleton](const RID & multimesh,int32_t instances,RenderingServer::MultimeshTransformFormat transform_format,bool color_format,bool custom_data_format)->void{singleton->multimesh_allocate_data(multimesh,instances,transform_format,color_format,custom_data_format);});
    js_singleton.add("multimesh_get_instance_count", [singleton](const RID & multimesh)->int64_t{return singleton->multimesh_get_instance_count(multimesh);});
    js_singleton.add("multimesh_set_mesh", [singleton](const RID & multimesh,const RID & mesh)->void{singleton->multimesh_set_mesh(multimesh,mesh);});
    js_singleton.add("multimesh_instance_set_transform", [singleton](const RID & multimesh,int32_t index,const Transform3D & transform)->void{singleton->multimesh_instance_set_transform(multimesh,index,transform);});
    js_singleton.add("multimesh_instance_set_transform_2d", [singleton](const RID & multimesh,int32_t index,const Transform2D & transform)->void{singleton->multimesh_instance_set_transform_2d(multimesh,index,transform);});
    js_singleton.add("multimesh_instance_set_color", [singleton](const RID & multimesh,int32_t index,const Color & color)->void{singleton->multimesh_instance_set_color(multimesh,index,color);});
    js_singleton.add("multimesh_instance_set_custom_data", [singleton](const RID & multimesh,int32_t index,const Color & custom_data)->void{singleton->multimesh_instance_set_custom_data(multimesh,index,custom_data);});
    js_singleton.add("multimesh_get_mesh", [singleton](const RID & multimesh)->RID{return singleton->multimesh_get_mesh(multimesh);});
    js_singleton.add("multimesh_get_aabb", [singleton](const RID & multimesh)->AABB{return singleton->multimesh_get_aabb(multimesh);});
    js_singleton.add("multimesh_set_custom_aabb", [singleton](const RID & multimesh,const AABB & aabb)->void{singleton->multimesh_set_custom_aabb(multimesh,aabb);});
    js_singleton.add("multimesh_get_custom_aabb", [singleton](const RID & multimesh)->AABB{return singleton->multimesh_get_custom_aabb(multimesh);});
    js_singleton.add("multimesh_instance_get_transform", [singleton](const RID & multimesh,int32_t index)->Transform3D{return singleton->multimesh_instance_get_transform(multimesh,index);});
    js_singleton.add("multimesh_instance_get_transform_2d", [singleton](const RID & multimesh,int32_t index)->Transform2D{return singleton->multimesh_instance_get_transform_2d(multimesh,index);});
    js_singleton.add("multimesh_instance_get_color", [singleton](const RID & multimesh,int32_t index)->Color{return singleton->multimesh_instance_get_color(multimesh,index);});
    js_singleton.add("multimesh_instance_get_custom_data", [singleton](const RID & multimesh,int32_t index)->Color{return singleton->multimesh_instance_get_custom_data(multimesh,index);});
    js_singleton.add("multimesh_set_visible_instances", [singleton](const RID & multimesh,int32_t visible)->void{singleton->multimesh_set_visible_instances(multimesh,visible);});
    js_singleton.add("multimesh_get_visible_instances", [singleton](const RID & multimesh)->int64_t{return singleton->multimesh_get_visible_instances(multimesh);});
    js_singleton.add("multimesh_set_buffer", [singleton](const RID & multimesh,const PackedFloat32Array & buffer)->void{singleton->multimesh_set_buffer(multimesh,buffer);});
    js_singleton.add("multimesh_get_buffer", [singleton](const RID & multimesh)->PackedFloat32Array{return singleton->multimesh_get_buffer(multimesh);});
    js_singleton.add("skeleton_create", [singleton]()->RID{return singleton->skeleton_create();});
    js_singleton.add("skeleton_allocate_data", [singleton](const RID & skeleton,int32_t bones,bool is_2d_skeleton)->void{singleton->skeleton_allocate_data(skeleton,bones,is_2d_skeleton);});
    js_singleton.add("skeleton_get_bone_count", [singleton](const RID & skeleton)->int64_t{return singleton->skeleton_get_bone_count(skeleton);});
    js_singleton.add("skeleton_bone_set_transform", [singleton](const RID & skeleton,int32_t bone,const Transform3D & transform)->void{singleton->skeleton_bone_set_transform(skeleton,bone,transform);});
    js_singleton.add("skeleton_bone_get_transform", [singleton](const RID & skeleton,int32_t bone)->Transform3D{return singleton->skeleton_bone_get_transform(skeleton,bone);});
    js_singleton.add("skeleton_bone_set_transform_2d", [singleton](const RID & skeleton,int32_t bone,const Transform2D & transform)->void{singleton->skeleton_bone_set_transform_2d(skeleton,bone,transform);});
    js_singleton.add("skeleton_bone_get_transform_2d", [singleton](const RID & skeleton,int32_t bone)->Transform2D{return singleton->skeleton_bone_get_transform_2d(skeleton,bone);});
    js_singleton.add("skeleton_set_base_transform_2d", [singleton](const RID & skeleton,const Transform2D & base_transform)->void{singleton->skeleton_set_base_transform_2d(skeleton,base_transform);});
    js_singleton.add("directional_light_create", [singleton]()->RID{return singleton->directional_light_create();});
    js_singleton.add("omni_light_create", [singleton]()->RID{return singleton->omni_light_create();});
    js_singleton.add("spot_light_create", [singleton]()->RID{return singleton->spot_light_create();});
    js_singleton.add("light_set_color", [singleton](const RID & light,const Color & color)->void{singleton->light_set_color(light,color);});
    js_singleton.add("light_set_param", [singleton](const RID & light,RenderingServer::LightParam param,double value)->void{singleton->light_set_param(light,param,value);});
    js_singleton.add("light_set_shadow", [singleton](const RID & light,bool enabled)->void{singleton->light_set_shadow(light,enabled);});
    js_singleton.add("light_set_projector", [singleton](const RID & light,const RID & texture)->void{singleton->light_set_projector(light,texture);});
    js_singleton.add("light_set_negative", [singleton](const RID & light,bool enable)->void{singleton->light_set_negative(light,enable);});
    js_singleton.add("light_set_cull_mask", [singleton](const RID & light,uint32_t mask)->void{singleton->light_set_cull_mask(light,mask);});
    js_singleton.add("light_set_distance_fade", [singleton](const RID & decal,bool enabled,double begin,double shadow,double length)->void{singleton->light_set_distance_fade(decal,enabled,begin,shadow,length);});
    js_singleton.add("light_set_reverse_cull_face_mode", [singleton](const RID & light,bool enabled)->void{singleton->light_set_reverse_cull_face_mode(light,enabled);});
    js_singleton.add("light_set_bake_mode", [singleton](const RID & light,RenderingServer::LightBakeMode bake_mode)->void{singleton->light_set_bake_mode(light,bake_mode);});
    js_singleton.add("light_set_max_sdfgi_cascade", [singleton](const RID & light,uint32_t cascade)->void{singleton->light_set_max_sdfgi_cascade(light,cascade);});
    js_singleton.add("light_omni_set_shadow_mode", [singleton](const RID & light,RenderingServer::LightOmniShadowMode mode)->void{singleton->light_omni_set_shadow_mode(light,mode);});
    js_singleton.add("light_directional_set_shadow_mode", [singleton](const RID & light,RenderingServer::LightDirectionalShadowMode mode)->void{singleton->light_directional_set_shadow_mode(light,mode);});
    js_singleton.add("light_directional_set_blend_splits", [singleton](const RID & light,bool enable)->void{singleton->light_directional_set_blend_splits(light,enable);});
    js_singleton.add("light_directional_set_sky_mode", [singleton](const RID & light,RenderingServer::LightDirectionalSkyMode mode)->void{singleton->light_directional_set_sky_mode(light,mode);});
    js_singleton.add("light_projectors_set_filter", [singleton](RenderingServer::LightProjectorFilter filter)->void{singleton->light_projectors_set_filter(filter);});
    js_singleton.add("positional_soft_shadow_filter_set_quality", [singleton](RenderingServer::ShadowQuality quality)->void{singleton->positional_soft_shadow_filter_set_quality(quality);});
    js_singleton.add("directional_soft_shadow_filter_set_quality", [singleton](RenderingServer::ShadowQuality quality)->void{singleton->directional_soft_shadow_filter_set_quality(quality);});
    js_singleton.add("directional_shadow_atlas_set_size", [singleton](int32_t size,bool is_16bits)->void{singleton->directional_shadow_atlas_set_size(size,is_16bits);});
    js_singleton.add("reflection_probe_create", [singleton]()->RID{return singleton->reflection_probe_create();});
    js_singleton.add("reflection_probe_set_update_mode", [singleton](const RID & probe,RenderingServer::ReflectionProbeUpdateMode mode)->void{singleton->reflection_probe_set_update_mode(probe,mode);});
    js_singleton.add("reflection_probe_set_intensity", [singleton](const RID & probe,double intensity)->void{singleton->reflection_probe_set_intensity(probe,intensity);});
    js_singleton.add("reflection_probe_set_ambient_mode", [singleton](const RID & probe,RenderingServer::ReflectionProbeAmbientMode mode)->void{singleton->reflection_probe_set_ambient_mode(probe,mode);});
    js_singleton.add("reflection_probe_set_ambient_color", [singleton](const RID & probe,const Color & color)->void{singleton->reflection_probe_set_ambient_color(probe,color);});
    js_singleton.add("reflection_probe_set_ambient_energy", [singleton](const RID & probe,double energy)->void{singleton->reflection_probe_set_ambient_energy(probe,energy);});
    js_singleton.add("reflection_probe_set_max_distance", [singleton](const RID & probe,double distance)->void{singleton->reflection_probe_set_max_distance(probe,distance);});
    js_singleton.add("reflection_probe_set_size", [singleton](const RID & probe,const Vector3 & size)->void{singleton->reflection_probe_set_size(probe,size);});
    js_singleton.add("reflection_probe_set_origin_offset", [singleton](const RID & probe,const Vector3 & offset)->void{singleton->reflection_probe_set_origin_offset(probe,offset);});
    js_singleton.add("reflection_probe_set_as_interior", [singleton](const RID & probe,bool enable)->void{singleton->reflection_probe_set_as_interior(probe,enable);});
    js_singleton.add("reflection_probe_set_enable_box_projection", [singleton](const RID & probe,bool enable)->void{singleton->reflection_probe_set_enable_box_projection(probe,enable);});
    js_singleton.add("reflection_probe_set_enable_shadows", [singleton](const RID & probe,bool enable)->void{singleton->reflection_probe_set_enable_shadows(probe,enable);});
    js_singleton.add("reflection_probe_set_cull_mask", [singleton](const RID & probe,uint32_t layers)->void{singleton->reflection_probe_set_cull_mask(probe,layers);});
    js_singleton.add("reflection_probe_set_reflection_mask", [singleton](const RID & probe,uint32_t layers)->void{singleton->reflection_probe_set_reflection_mask(probe,layers);});
    js_singleton.add("reflection_probe_set_resolution", [singleton](const RID & probe,int32_t resolution)->void{singleton->reflection_probe_set_resolution(probe,resolution);});
    js_singleton.add("reflection_probe_set_mesh_lod_threshold", [singleton](const RID & probe,double pixels)->void{singleton->reflection_probe_set_mesh_lod_threshold(probe,pixels);});
    js_singleton.add("decal_create", [singleton]()->RID{return singleton->decal_create();});
    js_singleton.add("decal_set_size", [singleton](const RID & decal,const Vector3 & size)->void{singleton->decal_set_size(decal,size);});
    js_singleton.add("decal_set_texture", [singleton](const RID & decal,RenderingServer::DecalTexture type,const RID & texture)->void{singleton->decal_set_texture(decal,type,texture);});
    js_singleton.add("decal_set_emission_energy", [singleton](const RID & decal,double energy)->void{singleton->decal_set_emission_energy(decal,energy);});
    js_singleton.add("decal_set_albedo_mix", [singleton](const RID & decal,double albedo_mix)->void{singleton->decal_set_albedo_mix(decal,albedo_mix);});
    js_singleton.add("decal_set_modulate", [singleton](const RID & decal,const Color & color)->void{singleton->decal_set_modulate(decal,color);});
    js_singleton.add("decal_set_cull_mask", [singleton](const RID & decal,uint32_t mask)->void{singleton->decal_set_cull_mask(decal,mask);});
    js_singleton.add("decal_set_distance_fade", [singleton](const RID & decal,bool enabled,double begin,double length)->void{singleton->decal_set_distance_fade(decal,enabled,begin,length);});
    js_singleton.add("decal_set_fade", [singleton](const RID & decal,double above,double below)->void{singleton->decal_set_fade(decal,above,below);});
    js_singleton.add("decal_set_normal_fade", [singleton](const RID & decal,double fade)->void{singleton->decal_set_normal_fade(decal,fade);});
    js_singleton.add("decals_set_filter", [singleton](RenderingServer::DecalFilter filter)->void{singleton->decals_set_filter(filter);});
    js_singleton.add("gi_set_use_half_resolution", [singleton](bool half_resolution)->void{singleton->gi_set_use_half_resolution(half_resolution);});
    js_singleton.add("voxel_gi_create", [singleton]()->RID{return singleton->voxel_gi_create();});
    js_singleton.add("voxel_gi_allocate_data", [singleton](const RID & voxel_gi,const Transform3D & to_cell_xform,const AABB & aabb,const Vector3i & octree_size,const PackedByteArray & octree_cells,const PackedByteArray & data_cells,const PackedByteArray & distance_field,const PackedInt32Array & level_counts)->void{singleton->voxel_gi_allocate_data(voxel_gi,to_cell_xform,aabb,octree_size,octree_cells,data_cells,distance_field,level_counts);});
    js_singleton.add("voxel_gi_get_octree_size", [singleton](const RID & voxel_gi)->Vector3i{return singleton->voxel_gi_get_octree_size(voxel_gi);});
    js_singleton.add("voxel_gi_get_octree_cells", [singleton](const RID & voxel_gi)->PackedByteArray{return singleton->voxel_gi_get_octree_cells(voxel_gi);});
    js_singleton.add("voxel_gi_get_data_cells", [singleton](const RID & voxel_gi)->PackedByteArray{return singleton->voxel_gi_get_data_cells(voxel_gi);});
    js_singleton.add("voxel_gi_get_distance_field", [singleton](const RID & voxel_gi)->PackedByteArray{return singleton->voxel_gi_get_distance_field(voxel_gi);});
    js_singleton.add("voxel_gi_get_level_counts", [singleton](const RID & voxel_gi)->PackedInt32Array{return singleton->voxel_gi_get_level_counts(voxel_gi);});
    js_singleton.add("voxel_gi_get_to_cell_xform", [singleton](const RID & voxel_gi)->Transform3D{return singleton->voxel_gi_get_to_cell_xform(voxel_gi);});
    js_singleton.add("voxel_gi_set_dynamic_range", [singleton](const RID & voxel_gi,double range)->void{singleton->voxel_gi_set_dynamic_range(voxel_gi,range);});
    js_singleton.add("voxel_gi_set_propagation", [singleton](const RID & voxel_gi,double amount)->void{singleton->voxel_gi_set_propagation(voxel_gi,amount);});
    js_singleton.add("voxel_gi_set_energy", [singleton](const RID & voxel_gi,double energy)->void{singleton->voxel_gi_set_energy(voxel_gi,energy);});
    js_singleton.add("voxel_gi_set_baked_exposure_normalization", [singleton](const RID & voxel_gi,double baked_exposure)->void{singleton->voxel_gi_set_baked_exposure_normalization(voxel_gi,baked_exposure);});
    js_singleton.add("voxel_gi_set_bias", [singleton](const RID & voxel_gi,double bias)->void{singleton->voxel_gi_set_bias(voxel_gi,bias);});
    js_singleton.add("voxel_gi_set_normal_bias", [singleton](const RID & voxel_gi,double bias)->void{singleton->voxel_gi_set_normal_bias(voxel_gi,bias);});
    js_singleton.add("voxel_gi_set_interior", [singleton](const RID & voxel_gi,bool enable)->void{singleton->voxel_gi_set_interior(voxel_gi,enable);});
    js_singleton.add("voxel_gi_set_use_two_bounces", [singleton](const RID & voxel_gi,bool enable)->void{singleton->voxel_gi_set_use_two_bounces(voxel_gi,enable);});
    js_singleton.add("voxel_gi_set_quality", [singleton](RenderingServer::VoxelGIQuality quality)->void{singleton->voxel_gi_set_quality(quality);});
    js_singleton.add("lightmap_create", [singleton]()->RID{return singleton->lightmap_create();});
    js_singleton.add("lightmap_set_textures", [singleton](const RID & lightmap,const RID & light,bool uses_sh)->void{singleton->lightmap_set_textures(lightmap,light,uses_sh);});
    js_singleton.add("lightmap_set_probe_bounds", [singleton](const RID & lightmap,const AABB & bounds)->void{singleton->lightmap_set_probe_bounds(lightmap,bounds);});
    js_singleton.add("lightmap_set_probe_interior", [singleton](const RID & lightmap,bool interior)->void{singleton->lightmap_set_probe_interior(lightmap,interior);});
    js_singleton.add("lightmap_set_probe_capture_data", [singleton](const RID & lightmap,const PackedVector3Array & points,const PackedColorArray & point_sh,const PackedInt32Array & tetrahedra,const PackedInt32Array & bsp_tree)->void{singleton->lightmap_set_probe_capture_data(lightmap,points,point_sh,tetrahedra,bsp_tree);});
    js_singleton.add("lightmap_get_probe_capture_points", [singleton](const RID & lightmap)->PackedVector3Array{return singleton->lightmap_get_probe_capture_points(lightmap);});
    js_singleton.add("lightmap_get_probe_capture_sh", [singleton](const RID & lightmap)->PackedColorArray{return singleton->lightmap_get_probe_capture_sh(lightmap);});
    js_singleton.add("lightmap_get_probe_capture_tetrahedra", [singleton](const RID & lightmap)->PackedInt32Array{return singleton->lightmap_get_probe_capture_tetrahedra(lightmap);});
    js_singleton.add("lightmap_get_probe_capture_bsp_tree", [singleton](const RID & lightmap)->PackedInt32Array{return singleton->lightmap_get_probe_capture_bsp_tree(lightmap);});
    js_singleton.add("lightmap_set_baked_exposure_normalization", [singleton](const RID & lightmap,double baked_exposure)->void{singleton->lightmap_set_baked_exposure_normalization(lightmap,baked_exposure);});
    js_singleton.add("lightmap_set_probe_capture_update_speed", [singleton](double speed)->void{singleton->lightmap_set_probe_capture_update_speed(speed);});
    js_singleton.add("particles_create", [singleton]()->RID{return singleton->particles_create();});
    js_singleton.add("particles_set_mode", [singleton](const RID & particles,RenderingServer::ParticlesMode mode)->void{singleton->particles_set_mode(particles,mode);});
    js_singleton.add("particles_set_emitting", [singleton](const RID & particles,bool emitting)->void{singleton->particles_set_emitting(particles,emitting);});
    js_singleton.add("particles_get_emitting", [singleton](const RID & particles)->bool{return singleton->particles_get_emitting(particles);});
    js_singleton.add("particles_set_amount", [singleton](const RID & particles,int32_t amount)->void{singleton->particles_set_amount(particles,amount);});
    js_singleton.add("particles_set_amount_ratio", [singleton](const RID & particles,double ratio)->void{singleton->particles_set_amount_ratio(particles,ratio);});
    js_singleton.add("particles_set_lifetime", [singleton](const RID & particles,double lifetime)->void{singleton->particles_set_lifetime(particles,lifetime);});
    js_singleton.add("particles_set_one_shot", [singleton](const RID & particles,bool one_shot)->void{singleton->particles_set_one_shot(particles,one_shot);});
    js_singleton.add("particles_set_pre_process_time", [singleton](const RID & particles,double time)->void{singleton->particles_set_pre_process_time(particles,time);});
    js_singleton.add("particles_set_explosiveness_ratio", [singleton](const RID & particles,double ratio)->void{singleton->particles_set_explosiveness_ratio(particles,ratio);});
    js_singleton.add("particles_set_randomness_ratio", [singleton](const RID & particles,double ratio)->void{singleton->particles_set_randomness_ratio(particles,ratio);});
    js_singleton.add("particles_set_interp_to_end", [singleton](const RID & particles,double factor)->void{singleton->particles_set_interp_to_end(particles,factor);});
    js_singleton.add("particles_set_emitter_velocity", [singleton](const RID & particles,const Vector3 & velocity)->void{singleton->particles_set_emitter_velocity(particles,velocity);});
    js_singleton.add("particles_set_custom_aabb", [singleton](const RID & particles,const AABB & aabb)->void{singleton->particles_set_custom_aabb(particles,aabb);});
    js_singleton.add("particles_set_speed_scale", [singleton](const RID & particles,double scale)->void{singleton->particles_set_speed_scale(particles,scale);});
    js_singleton.add("particles_set_use_local_coordinates", [singleton](const RID & particles,bool enable)->void{singleton->particles_set_use_local_coordinates(particles,enable);});
    js_singleton.add("particles_set_process_material", [singleton](const RID & particles,const RID & material)->void{singleton->particles_set_process_material(particles,material);});
    js_singleton.add("particles_set_fixed_fps", [singleton](const RID & particles,int32_t fps)->void{singleton->particles_set_fixed_fps(particles,fps);});
    js_singleton.add("particles_set_interpolate", [singleton](const RID & particles,bool enable)->void{singleton->particles_set_interpolate(particles,enable);});
    js_singleton.add("particles_set_fractional_delta", [singleton](const RID & particles,bool enable)->void{singleton->particles_set_fractional_delta(particles,enable);});
    js_singleton.add("particles_set_collision_base_size", [singleton](const RID & particles,double size)->void{singleton->particles_set_collision_base_size(particles,size);});
    js_singleton.add("particles_set_transform_align", [singleton](const RID & particles,RenderingServer::ParticlesTransformAlign align)->void{singleton->particles_set_transform_align(particles,align);});
    js_singleton.add("particles_set_trails", [singleton](const RID & particles,bool enable,double length_sec)->void{singleton->particles_set_trails(particles,enable,length_sec);});
    js_singleton.add("particles_set_trail_bind_poses", [singleton](const RID & particles,const TypedArray<Transform3D> & bind_poses)->void{singleton->particles_set_trail_bind_poses(particles,bind_poses);});
    js_singleton.add("particles_is_inactive", [singleton](const RID & particles)->bool{return singleton->particles_is_inactive(particles);});
    js_singleton.add("particles_request_process", [singleton](const RID & particles)->void{singleton->particles_request_process(particles);});
    js_singleton.add("particles_restart", [singleton](const RID & particles)->void{singleton->particles_restart(particles);});
    js_singleton.add("particles_set_subemitter", [singleton](const RID & particles,const RID & subemitter_particles)->void{singleton->particles_set_subemitter(particles,subemitter_particles);});
    js_singleton.add("particles_emit", [singleton](const RID & particles,const Transform3D & transform,const Vector3 & velocity,const Color & color,const Color & custom,uint32_t emit_flags)->void{singleton->particles_emit(particles,transform,velocity,color,custom,emit_flags);});
    js_singleton.add("particles_set_draw_order", [singleton](const RID & particles,RenderingServer::ParticlesDrawOrder order)->void{singleton->particles_set_draw_order(particles,order);});
    js_singleton.add("particles_set_draw_passes", [singleton](const RID & particles,int32_t count)->void{singleton->particles_set_draw_passes(particles,count);});
    js_singleton.add("particles_set_draw_pass_mesh", [singleton](const RID & particles,int32_t pass,const RID & mesh)->void{singleton->particles_set_draw_pass_mesh(particles,pass,mesh);});
    js_singleton.add("particles_get_current_aabb", [singleton](const RID & particles)->AABB{return singleton->particles_get_current_aabb(particles);});
    js_singleton.add("particles_set_emission_transform", [singleton](const RID & particles,const Transform3D & transform)->void{singleton->particles_set_emission_transform(particles,transform);});
    js_singleton.add("particles_collision_create", [singleton]()->RID{return singleton->particles_collision_create();});
    js_singleton.add("particles_collision_set_collision_type", [singleton](const RID & particles_collision,RenderingServer::ParticlesCollisionType type)->void{singleton->particles_collision_set_collision_type(particles_collision,type);});
    js_singleton.add("particles_collision_set_cull_mask", [singleton](const RID & particles_collision,uint32_t mask)->void{singleton->particles_collision_set_cull_mask(particles_collision,mask);});
    js_singleton.add("particles_collision_set_sphere_radius", [singleton](const RID & particles_collision,double radius)->void{singleton->particles_collision_set_sphere_radius(particles_collision,radius);});
    js_singleton.add("particles_collision_set_box_extents", [singleton](const RID & particles_collision,const Vector3 & extents)->void{singleton->particles_collision_set_box_extents(particles_collision,extents);});
    js_singleton.add("particles_collision_set_attractor_strength", [singleton](const RID & particles_collision,double strength)->void{singleton->particles_collision_set_attractor_strength(particles_collision,strength);});
    js_singleton.add("particles_collision_set_attractor_directionality", [singleton](const RID & particles_collision,double amount)->void{singleton->particles_collision_set_attractor_directionality(particles_collision,amount);});
    js_singleton.add("particles_collision_set_attractor_attenuation", [singleton](const RID & particles_collision,double curve)->void{singleton->particles_collision_set_attractor_attenuation(particles_collision,curve);});
    js_singleton.add("particles_collision_set_field_texture", [singleton](const RID & particles_collision,const RID & texture)->void{singleton->particles_collision_set_field_texture(particles_collision,texture);});
    js_singleton.add("particles_collision_height_field_update", [singleton](const RID & particles_collision)->void{singleton->particles_collision_height_field_update(particles_collision);});
    js_singleton.add("particles_collision_set_height_field_resolution", [singleton](const RID & particles_collision,RenderingServer::ParticlesCollisionHeightfieldResolution resolution)->void{singleton->particles_collision_set_height_field_resolution(particles_collision,resolution);});
    js_singleton.add("fog_volume_create", [singleton]()->RID{return singleton->fog_volume_create();});
    js_singleton.add("fog_volume_set_shape", [singleton](const RID & fog_volume,RenderingServer::FogVolumeShape shape)->void{singleton->fog_volume_set_shape(fog_volume,shape);});
    js_singleton.add("fog_volume_set_size", [singleton](const RID & fog_volume,const Vector3 & size)->void{singleton->fog_volume_set_size(fog_volume,size);});
    js_singleton.add("fog_volume_set_material", [singleton](const RID & fog_volume,const RID & material)->void{singleton->fog_volume_set_material(fog_volume,material);});
    js_singleton.add("visibility_notifier_create", [singleton]()->RID{return singleton->visibility_notifier_create();});
    js_singleton.add("visibility_notifier_set_aabb", [singleton](const RID & notifier,const AABB & aabb)->void{singleton->visibility_notifier_set_aabb(notifier,aabb);});
    js_singleton.add("visibility_notifier_set_callbacks", [singleton](const RID & notifier,const Callable & enter_callable,const Callable & exit_callable)->void{singleton->visibility_notifier_set_callbacks(notifier,enter_callable,exit_callable);});
    js_singleton.add("occluder_create", [singleton]()->RID{return singleton->occluder_create();});
    js_singleton.add("occluder_set_mesh", [singleton](const RID & occluder,const PackedVector3Array & vertices,const PackedInt32Array & indices)->void{singleton->occluder_set_mesh(occluder,vertices,indices);});
    js_singleton.add("camera_create", [singleton]()->RID{return singleton->camera_create();});
    js_singleton.add("camera_set_perspective", [singleton](const RID & camera,double fovy_degrees,double z_near,double z_far)->void{singleton->camera_set_perspective(camera,fovy_degrees,z_near,z_far);});
    js_singleton.add("camera_set_orthogonal", [singleton](const RID & camera,double size,double z_near,double z_far)->void{singleton->camera_set_orthogonal(camera,size,z_near,z_far);});
    js_singleton.add("camera_set_frustum", [singleton](const RID & camera,double size,const Vector2 & offset,double z_near,double z_far)->void{singleton->camera_set_frustum(camera,size,offset,z_near,z_far);});
    js_singleton.add("camera_set_transform", [singleton](const RID & camera,const Transform3D & transform)->void{singleton->camera_set_transform(camera,transform);});
    js_singleton.add("camera_set_cull_mask", [singleton](const RID & camera,uint32_t layers)->void{singleton->camera_set_cull_mask(camera,layers);});
    js_singleton.add("camera_set_environment", [singleton](const RID & camera,const RID & env)->void{singleton->camera_set_environment(camera,env);});
    js_singleton.add("camera_set_camera_attributes", [singleton](const RID & camera,const RID & effects)->void{singleton->camera_set_camera_attributes(camera,effects);});
    js_singleton.add("camera_set_compositor", [singleton](const RID & camera,const RID & compositor)->void{singleton->camera_set_compositor(camera,compositor);});
    js_singleton.add("camera_set_use_vertical_aspect", [singleton](const RID & camera,bool enable)->void{singleton->camera_set_use_vertical_aspect(camera,enable);});
    js_singleton.add("viewport_create", [singleton]()->RID{return singleton->viewport_create();});
    js_singleton.add("viewport_set_use_xr", [singleton](const RID & viewport,bool use_xr)->void{singleton->viewport_set_use_xr(viewport,use_xr);});
    js_singleton.add("viewport_set_size", [singleton](const RID & viewport,int32_t width,int32_t height)->void{singleton->viewport_set_size(viewport,width,height);});
    js_singleton.add("viewport_set_active", [singleton](const RID & viewport,bool active)->void{singleton->viewport_set_active(viewport,active);});
    js_singleton.add("viewport_set_parent_viewport", [singleton](const RID & viewport,const RID & parent_viewport)->void{singleton->viewport_set_parent_viewport(viewport,parent_viewport);});
    js_singleton.add("viewport_attach_to_screen", [singleton](const RID & viewport,const Rect2 & rect,int32_t screen)->void{singleton->viewport_attach_to_screen(viewport,rect,screen);});
    js_singleton.add("viewport_set_render_direct_to_screen", [singleton](const RID & viewport,bool enabled)->void{singleton->viewport_set_render_direct_to_screen(viewport,enabled);});
    js_singleton.add("viewport_set_canvas_cull_mask", [singleton](const RID & viewport,uint32_t canvas_cull_mask)->void{singleton->viewport_set_canvas_cull_mask(viewport,canvas_cull_mask);});
    js_singleton.add("viewport_set_scaling_3d_mode", [singleton](const RID & viewport,RenderingServer::ViewportScaling3DMode scaling_3d_mode)->void{singleton->viewport_set_scaling_3d_mode(viewport,scaling_3d_mode);});
    js_singleton.add("viewport_set_scaling_3d_scale", [singleton](const RID & viewport,double scale)->void{singleton->viewport_set_scaling_3d_scale(viewport,scale);});
    js_singleton.add("viewport_set_fsr_sharpness", [singleton](const RID & viewport,double sharpness)->void{singleton->viewport_set_fsr_sharpness(viewport,sharpness);});
    js_singleton.add("viewport_set_texture_mipmap_bias", [singleton](const RID & viewport,double mipmap_bias)->void{singleton->viewport_set_texture_mipmap_bias(viewport,mipmap_bias);});
    js_singleton.add("viewport_set_update_mode", [singleton](const RID & viewport,RenderingServer::ViewportUpdateMode update_mode)->void{singleton->viewport_set_update_mode(viewport,update_mode);});
    js_singleton.add("viewport_get_update_mode", [singleton](const RID & viewport)->RenderingServer::ViewportUpdateMode{return singleton->viewport_get_update_mode(viewport);});
    js_singleton.add("viewport_set_clear_mode", [singleton](const RID & viewport,RenderingServer::ViewportClearMode clear_mode)->void{singleton->viewport_set_clear_mode(viewport,clear_mode);});
    js_singleton.add("viewport_get_render_target", [singleton](const RID & viewport)->RID{return singleton->viewport_get_render_target(viewport);});
    js_singleton.add("viewport_get_texture", [singleton](const RID & viewport)->RID{return singleton->viewport_get_texture(viewport);});
    js_singleton.add("viewport_set_disable_3d", [singleton](const RID & viewport,bool disable)->void{singleton->viewport_set_disable_3d(viewport,disable);});
    js_singleton.add("viewport_set_disable_2d", [singleton](const RID & viewport,bool disable)->void{singleton->viewport_set_disable_2d(viewport,disable);});
    js_singleton.add("viewport_set_environment_mode", [singleton](const RID & viewport,RenderingServer::ViewportEnvironmentMode mode)->void{singleton->viewport_set_environment_mode(viewport,mode);});
    js_singleton.add("viewport_attach_camera", [singleton](const RID & viewport,const RID & camera)->void{singleton->viewport_attach_camera(viewport,camera);});
    js_singleton.add("viewport_set_scenario", [singleton](const RID & viewport,const RID & scenario)->void{singleton->viewport_set_scenario(viewport,scenario);});
    js_singleton.add("viewport_attach_canvas", [singleton](const RID & viewport,const RID & canvas)->void{singleton->viewport_attach_canvas(viewport,canvas);});
    js_singleton.add("viewport_remove_canvas", [singleton](const RID & viewport,const RID & canvas)->void{singleton->viewport_remove_canvas(viewport,canvas);});
    js_singleton.add("viewport_set_snap_2d_transforms_to_pixel", [singleton](const RID & viewport,bool enabled)->void{singleton->viewport_set_snap_2d_transforms_to_pixel(viewport,enabled);});
    js_singleton.add("viewport_set_snap_2d_vertices_to_pixel", [singleton](const RID & viewport,bool enabled)->void{singleton->viewport_set_snap_2d_vertices_to_pixel(viewport,enabled);});
    js_singleton.add("viewport_set_default_canvas_item_texture_filter", [singleton](const RID & viewport,RenderingServer::CanvasItemTextureFilter filter)->void{singleton->viewport_set_default_canvas_item_texture_filter(viewport,filter);});
    js_singleton.add("viewport_set_default_canvas_item_texture_repeat", [singleton](const RID & viewport,RenderingServer::CanvasItemTextureRepeat repeat)->void{singleton->viewport_set_default_canvas_item_texture_repeat(viewport,repeat);});
    js_singleton.add("viewport_set_canvas_transform", [singleton](const RID & viewport,const RID & canvas,const Transform2D & offset)->void{singleton->viewport_set_canvas_transform(viewport,canvas,offset);});
    js_singleton.add("viewport_set_canvas_stacking", [singleton](const RID & viewport,const RID & canvas,int32_t layer,int32_t sublayer)->void{singleton->viewport_set_canvas_stacking(viewport,canvas,layer,sublayer);});
    js_singleton.add("viewport_set_transparent_background", [singleton](const RID & viewport,bool enabled)->void{singleton->viewport_set_transparent_background(viewport,enabled);});
    js_singleton.add("viewport_set_global_canvas_transform", [singleton](const RID & viewport,const Transform2D & transform)->void{singleton->viewport_set_global_canvas_transform(viewport,transform);});
    js_singleton.add("viewport_set_sdf_oversize_and_scale", [singleton](const RID & viewport,RenderingServer::ViewportSDFOversize oversize,RenderingServer::ViewportSDFScale scale)->void{singleton->viewport_set_sdf_oversize_and_scale(viewport,oversize,scale);});
    js_singleton.add("viewport_set_positional_shadow_atlas_size", [singleton](const RID & viewport,int32_t size,bool use_16_bits)->void{singleton->viewport_set_positional_shadow_atlas_size(viewport,size,use_16_bits);});
    js_singleton.add("viewport_set_positional_shadow_atlas_quadrant_subdivision", [singleton](const RID & viewport,int32_t quadrant,int32_t subdivision)->void{singleton->viewport_set_positional_shadow_atlas_quadrant_subdivision(viewport,quadrant,subdivision);});
    js_singleton.add("viewport_set_msaa_3d", [singleton](const RID & viewport,RenderingServer::ViewportMSAA msaa)->void{singleton->viewport_set_msaa_3d(viewport,msaa);});
    js_singleton.add("viewport_set_msaa_2d", [singleton](const RID & viewport,RenderingServer::ViewportMSAA msaa)->void{singleton->viewport_set_msaa_2d(viewport,msaa);});
    js_singleton.add("viewport_set_use_hdr_2d", [singleton](const RID & viewport,bool enabled)->void{singleton->viewport_set_use_hdr_2d(viewport,enabled);});
    js_singleton.add("viewport_set_screen_space_aa", [singleton](const RID & viewport,RenderingServer::ViewportScreenSpaceAA mode)->void{singleton->viewport_set_screen_space_aa(viewport,mode);});
    js_singleton.add("viewport_set_use_taa", [singleton](const RID & viewport,bool enable)->void{singleton->viewport_set_use_taa(viewport,enable);});
    js_singleton.add("viewport_set_use_debanding", [singleton](const RID & viewport,bool enable)->void{singleton->viewport_set_use_debanding(viewport,enable);});
    js_singleton.add("viewport_set_use_occlusion_culling", [singleton](const RID & viewport,bool enable)->void{singleton->viewport_set_use_occlusion_culling(viewport,enable);});
    js_singleton.add("viewport_set_occlusion_rays_per_thread", [singleton](int32_t rays_per_thread)->void{singleton->viewport_set_occlusion_rays_per_thread(rays_per_thread);});
    js_singleton.add("viewport_set_occlusion_culling_build_quality", [singleton](RenderingServer::ViewportOcclusionCullingBuildQuality quality)->void{singleton->viewport_set_occlusion_culling_build_quality(quality);});
    js_singleton.add("viewport_get_render_info", [singleton](const RID & viewport,RenderingServer::ViewportRenderInfoType type,RenderingServer::ViewportRenderInfo info)->int64_t{return singleton->viewport_get_render_info(viewport,type,info);});
    js_singleton.add("viewport_set_debug_draw", [singleton](const RID & viewport,RenderingServer::ViewportDebugDraw draw)->void{singleton->viewport_set_debug_draw(viewport,draw);});
    js_singleton.add("viewport_set_measure_render_time", [singleton](const RID & viewport,bool enable)->void{singleton->viewport_set_measure_render_time(viewport,enable);});
    js_singleton.add("viewport_get_measured_render_time_cpu", [singleton](const RID & viewport)->double{return singleton->viewport_get_measured_render_time_cpu(viewport);});
    js_singleton.add("viewport_get_measured_render_time_gpu", [singleton](const RID & viewport)->double{return singleton->viewport_get_measured_render_time_gpu(viewport);});
    js_singleton.add("viewport_set_vrs_mode", [singleton](const RID & viewport,RenderingServer::ViewportVRSMode mode)->void{singleton->viewport_set_vrs_mode(viewport,mode);});
    js_singleton.add("viewport_set_vrs_update_mode", [singleton](const RID & viewport,RenderingServer::ViewportVRSUpdateMode mode)->void{singleton->viewport_set_vrs_update_mode(viewport,mode);});
    js_singleton.add("viewport_set_vrs_texture", [singleton](const RID & viewport,const RID & texture)->void{singleton->viewport_set_vrs_texture(viewport,texture);});
    js_singleton.add("sky_create", [singleton]()->RID{return singleton->sky_create();});
    js_singleton.add("sky_set_radiance_size", [singleton](const RID & sky,int32_t radiance_size)->void{singleton->sky_set_radiance_size(sky,radiance_size);});
    js_singleton.add("sky_set_mode", [singleton](const RID & sky,RenderingServer::SkyMode mode)->void{singleton->sky_set_mode(sky,mode);});
    js_singleton.add("sky_set_material", [singleton](const RID & sky,const RID & material)->void{singleton->sky_set_material(sky,material);});
    js_singleton.add("sky_bake_panorama", [singleton](const RID & sky,double energy,bool bake_irradiance,const Vector2i & size)->Ref<Image>{return singleton->sky_bake_panorama(sky,energy,bake_irradiance,size);});
    js_singleton.add("compositor_effect_create", [singleton]()->RID{return singleton->compositor_effect_create();});
    js_singleton.add("compositor_effect_set_enabled", [singleton](const RID & effect,bool enabled)->void{singleton->compositor_effect_set_enabled(effect,enabled);});
    js_singleton.add("compositor_effect_set_callback", [singleton](const RID & effect,RenderingServer::CompositorEffectCallbackType callback_type,const Callable & callback)->void{singleton->compositor_effect_set_callback(effect,callback_type,callback);});
    js_singleton.add("compositor_effect_set_flag", [singleton](const RID & effect,RenderingServer::CompositorEffectFlags flag,bool set)->void{singleton->compositor_effect_set_flag(effect,flag,set);});
    js_singleton.add("compositor_create", [singleton]()->RID{return singleton->compositor_create();});
    js_singleton.add("compositor_set_compositor_effects", [singleton](const RID & compositor,const TypedArray<RID> & effects)->void{singleton->compositor_set_compositor_effects(compositor,effects);});
    js_singleton.add("environment_create", [singleton]()->RID{return singleton->environment_create();});
    js_singleton.add("environment_set_background", [singleton](const RID & env,RenderingServer::EnvironmentBG bg)->void{singleton->environment_set_background(env,bg);});
    js_singleton.add("environment_set_sky", [singleton](const RID & env,const RID & sky)->void{singleton->environment_set_sky(env,sky);});
    js_singleton.add("environment_set_sky_custom_fov", [singleton](const RID & env,double scale)->void{singleton->environment_set_sky_custom_fov(env,scale);});
    js_singleton.add("environment_set_sky_orientation", [singleton](const RID & env,const Basis & orientation)->void{singleton->environment_set_sky_orientation(env,orientation);});
    js_singleton.add("environment_set_bg_color", [singleton](const RID & env,const Color & color)->void{singleton->environment_set_bg_color(env,color);});
    js_singleton.add("environment_set_bg_energy", [singleton](const RID & env,double multiplier,double exposure_value)->void{singleton->environment_set_bg_energy(env,multiplier,exposure_value);});
    js_singleton.add("environment_set_canvas_max_layer", [singleton](const RID & env,int32_t max_layer)->void{singleton->environment_set_canvas_max_layer(env,max_layer);});
    js_singleton.add("environment_set_ambient_light", [singleton](const RID & env,const Color & color,RenderingServer::EnvironmentAmbientSource ambient,double energy,double sky_contibution,RenderingServer::EnvironmentReflectionSource reflection_source)->void{singleton->environment_set_ambient_light(env,color,ambient,energy,sky_contibution,reflection_source);});
    js_singleton.add("environment_set_glow", [singleton](const RID & env,bool enable,const PackedFloat32Array & levels,double intensity,double strength,double mix,double bloom_threshold,RenderingServer::EnvironmentGlowBlendMode blend_mode,double hdr_bleed_threshold,double hdr_bleed_scale,double hdr_luminance_cap,double glow_map_strength,const RID & glow_map)->void{singleton->environment_set_glow(env,enable,levels,intensity,strength,mix,bloom_threshold,blend_mode,hdr_bleed_threshold,hdr_bleed_scale,hdr_luminance_cap,glow_map_strength,glow_map);});
    js_singleton.add("environment_set_tonemap", [singleton](const RID & env,RenderingServer::EnvironmentToneMapper tone_mapper,double exposure,double white)->void{singleton->environment_set_tonemap(env,tone_mapper,exposure,white);});
    js_singleton.add("environment_set_adjustment", [singleton](const RID & env,bool enable,double brightness,double contrast,double saturation,bool use_1d_color_correction,const RID & color_correction)->void{singleton->environment_set_adjustment(env,enable,brightness,contrast,saturation,use_1d_color_correction,color_correction);});
    js_singleton.add("environment_set_ssr", [singleton](const RID & env,bool enable,int32_t max_steps,double fade_in,double fade_out,double depth_tolerance)->void{singleton->environment_set_ssr(env,enable,max_steps,fade_in,fade_out,depth_tolerance);});
    js_singleton.add("environment_set_ssao", [singleton](const RID & env,bool enable,double radius,double intensity,double power,double detail,double horizon,double sharpness,double light_affect,double ao_channel_affect)->void{singleton->environment_set_ssao(env,enable,radius,intensity,power,detail,horizon,sharpness,light_affect,ao_channel_affect);});
    js_singleton.add("environment_set_fog", [singleton](const RID & env,bool enable,const Color & light_color,double light_energy,double sun_scatter,double density,double height,double height_density,double aerial_perspective,double sky_affect,RenderingServer::EnvironmentFogMode fog_mode)->void{singleton->environment_set_fog(env,enable,light_color,light_energy,sun_scatter,density,height,height_density,aerial_perspective,sky_affect,fog_mode);});
    js_singleton.add("environment_set_sdfgi", [singleton](const RID & env,bool enable,int32_t cascades,double min_cell_size,RenderingServer::EnvironmentSDFGIYScale y_scale,bool use_occlusion,double bounce_feedback,bool read_sky,double energy,double normal_bias,double probe_bias)->void{singleton->environment_set_sdfgi(env,enable,cascades,min_cell_size,y_scale,use_occlusion,bounce_feedback,read_sky,energy,normal_bias,probe_bias);});
    js_singleton.add("environment_set_volumetric_fog", [singleton](const RID & env,bool enable,double density,const Color & albedo,const Color & emission,double emission_energy,double anisotropy,double length,double p_detail_spread,double gi_inject,bool temporal_reprojection,double temporal_reprojection_amount,double ambient_inject,double sky_affect)->void{singleton->environment_set_volumetric_fog(env,enable,density,albedo,emission,emission_energy,anisotropy,length,p_detail_spread,gi_inject,temporal_reprojection,temporal_reprojection_amount,ambient_inject,sky_affect);});
    js_singleton.add("environment_glow_set_use_bicubic_upscale", [singleton](bool enable)->void{singleton->environment_glow_set_use_bicubic_upscale(enable);});
    js_singleton.add("environment_set_ssr_roughness_quality", [singleton](RenderingServer::EnvironmentSSRRoughnessQuality quality)->void{singleton->environment_set_ssr_roughness_quality(quality);});
    js_singleton.add("environment_set_ssao_quality", [singleton](RenderingServer::EnvironmentSSAOQuality quality,bool half_size,double adaptive_target,int32_t blur_passes,double fadeout_from,double fadeout_to)->void{singleton->environment_set_ssao_quality(quality,half_size,adaptive_target,blur_passes,fadeout_from,fadeout_to);});
    js_singleton.add("environment_set_ssil_quality", [singleton](RenderingServer::EnvironmentSSILQuality quality,bool half_size,double adaptive_target,int32_t blur_passes,double fadeout_from,double fadeout_to)->void{singleton->environment_set_ssil_quality(quality,half_size,adaptive_target,blur_passes,fadeout_from,fadeout_to);});
    js_singleton.add("environment_set_sdfgi_ray_count", [singleton](RenderingServer::EnvironmentSDFGIRayCount ray_count)->void{singleton->environment_set_sdfgi_ray_count(ray_count);});
    js_singleton.add("environment_set_sdfgi_frames_to_converge", [singleton](RenderingServer::EnvironmentSDFGIFramesToConverge frames)->void{singleton->environment_set_sdfgi_frames_to_converge(frames);});
    js_singleton.add("environment_set_sdfgi_frames_to_update_light", [singleton](RenderingServer::EnvironmentSDFGIFramesToUpdateLight frames)->void{singleton->environment_set_sdfgi_frames_to_update_light(frames);});
    js_singleton.add("environment_set_volumetric_fog_volume_size", [singleton](int32_t size,int32_t depth)->void{singleton->environment_set_volumetric_fog_volume_size(size,depth);});
    js_singleton.add("environment_set_volumetric_fog_filter_active", [singleton](bool active)->void{singleton->environment_set_volumetric_fog_filter_active(active);});
    js_singleton.add("environment_bake_panorama", [singleton](const RID & environment,bool bake_irradiance,const Vector2i & size)->Ref<Image>{return singleton->environment_bake_panorama(environment,bake_irradiance,size);});
    js_singleton.add("screen_space_roughness_limiter_set_active", [singleton](bool enable,double amount,double limit)->void{singleton->screen_space_roughness_limiter_set_active(enable,amount,limit);});
    js_singleton.add("sub_surface_scattering_set_quality", [singleton](RenderingServer::SubSurfaceScatteringQuality quality)->void{singleton->sub_surface_scattering_set_quality(quality);});
    js_singleton.add("sub_surface_scattering_set_scale", [singleton](double scale,double depth_scale)->void{singleton->sub_surface_scattering_set_scale(scale,depth_scale);});
    js_singleton.add("camera_attributes_create", [singleton]()->RID{return singleton->camera_attributes_create();});
    js_singleton.add("camera_attributes_set_dof_blur_quality", [singleton](RenderingServer::DOFBlurQuality quality,bool use_jitter)->void{singleton->camera_attributes_set_dof_blur_quality(quality,use_jitter);});
    js_singleton.add("camera_attributes_set_dof_blur_bokeh_shape", [singleton](RenderingServer::DOFBokehShape shape)->void{singleton->camera_attributes_set_dof_blur_bokeh_shape(shape);});
    js_singleton.add("camera_attributes_set_dof_blur", [singleton](const RID & camera_attributes,bool far_enable,double far_distance,double far_transition,bool near_enable,double near_distance,double near_transition,double amount)->void{singleton->camera_attributes_set_dof_blur(camera_attributes,far_enable,far_distance,far_transition,near_enable,near_distance,near_transition,amount);});
    js_singleton.add("camera_attributes_set_exposure", [singleton](const RID & camera_attributes,double multiplier,double normalization)->void{singleton->camera_attributes_set_exposure(camera_attributes,multiplier,normalization);});
    js_singleton.add("camera_attributes_set_auto_exposure", [singleton](const RID & camera_attributes,bool enable,double min_sensitivity,double max_sensitivity,double speed,double scale)->void{singleton->camera_attributes_set_auto_exposure(camera_attributes,enable,min_sensitivity,max_sensitivity,speed,scale);});
    js_singleton.add("scenario_create", [singleton]()->RID{return singleton->scenario_create();});
    js_singleton.add("scenario_set_environment", [singleton](const RID & scenario,const RID & environment)->void{singleton->scenario_set_environment(scenario,environment);});
    js_singleton.add("scenario_set_fallback_environment", [singleton](const RID & scenario,const RID & environment)->void{singleton->scenario_set_fallback_environment(scenario,environment);});
    js_singleton.add("scenario_set_camera_attributes", [singleton](const RID & scenario,const RID & effects)->void{singleton->scenario_set_camera_attributes(scenario,effects);});
    js_singleton.add("scenario_set_compositor", [singleton](const RID & scenario,const RID & compositor)->void{singleton->scenario_set_compositor(scenario,compositor);});
    js_singleton.add("instance_create2", [singleton](const RID & base,const RID & scenario)->RID{return singleton->instance_create2(base,scenario);});
    js_singleton.add("instance_create", [singleton]()->RID{return singleton->instance_create();});
    js_singleton.add("instance_set_base", [singleton](const RID & instance,const RID & base)->void{singleton->instance_set_base(instance,base);});
    js_singleton.add("instance_set_scenario", [singleton](const RID & instance,const RID & scenario)->void{singleton->instance_set_scenario(instance,scenario);});
    js_singleton.add("instance_set_layer_mask", [singleton](const RID & instance,uint32_t mask)->void{singleton->instance_set_layer_mask(instance,mask);});
    js_singleton.add("instance_set_pivot_data", [singleton](const RID & instance,double sorting_offset,bool use_aabb_center)->void{singleton->instance_set_pivot_data(instance,sorting_offset,use_aabb_center);});
    js_singleton.add("instance_set_transform", [singleton](const RID & instance,const Transform3D & transform)->void{singleton->instance_set_transform(instance,transform);});
    js_singleton.add("instance_attach_object_instance_id", [singleton](const RID & instance,uint64_t id)->void{singleton->instance_attach_object_instance_id(instance,id);});
    js_singleton.add("instance_set_blend_shape_weight", [singleton](const RID & instance,int32_t shape,double weight)->void{singleton->instance_set_blend_shape_weight(instance,shape,weight);});
    js_singleton.add("instance_set_surface_override_material", [singleton](const RID & instance,int32_t surface,const RID & material)->void{singleton->instance_set_surface_override_material(instance,surface,material);});
    js_singleton.add("instance_set_visible", [singleton](const RID & instance,bool visible)->void{singleton->instance_set_visible(instance,visible);});
    js_singleton.add("instance_geometry_set_transparency", [singleton](const RID & instance,double transparency)->void{singleton->instance_geometry_set_transparency(instance,transparency);});
    js_singleton.add("instance_set_custom_aabb", [singleton](const RID & instance,const AABB & aabb)->void{singleton->instance_set_custom_aabb(instance,aabb);});
    js_singleton.add("instance_attach_skeleton", [singleton](const RID & instance,const RID & skeleton)->void{singleton->instance_attach_skeleton(instance,skeleton);});
    js_singleton.add("instance_set_extra_visibility_margin", [singleton](const RID & instance,double margin)->void{singleton->instance_set_extra_visibility_margin(instance,margin);});
    js_singleton.add("instance_set_visibility_parent", [singleton](const RID & instance,const RID & parent)->void{singleton->instance_set_visibility_parent(instance,parent);});
    js_singleton.add("instance_set_ignore_culling", [singleton](const RID & instance,bool enabled)->void{singleton->instance_set_ignore_culling(instance,enabled);});
    js_singleton.add("instance_geometry_set_flag", [singleton](const RID & instance,RenderingServer::InstanceFlags flag,bool enabled)->void{singleton->instance_geometry_set_flag(instance,flag,enabled);});
    js_singleton.add("instance_geometry_set_cast_shadows_setting", [singleton](const RID & instance,RenderingServer::ShadowCastingSetting shadow_casting_setting)->void{singleton->instance_geometry_set_cast_shadows_setting(instance,shadow_casting_setting);});
    js_singleton.add("instance_geometry_set_material_override", [singleton](const RID & instance,const RID & material)->void{singleton->instance_geometry_set_material_override(instance,material);});
    js_singleton.add("instance_geometry_set_material_overlay", [singleton](const RID & instance,const RID & material)->void{singleton->instance_geometry_set_material_overlay(instance,material);});
    js_singleton.add("instance_geometry_set_visibility_range", [singleton](const RID & instance,double min,double max,double min_margin,double max_margin,RenderingServer::VisibilityRangeFadeMode fade_mode)->void{singleton->instance_geometry_set_visibility_range(instance,min,max,min_margin,max_margin,fade_mode);});
    js_singleton.add("instance_geometry_set_lightmap", [singleton](const RID & instance,const RID & lightmap,const Rect2 & lightmap_uv_scale,int32_t lightmap_slice)->void{singleton->instance_geometry_set_lightmap(instance,lightmap,lightmap_uv_scale,lightmap_slice);});
    js_singleton.add("instance_geometry_set_lod_bias", [singleton](const RID & instance,double lod_bias)->void{singleton->instance_geometry_set_lod_bias(instance,lod_bias);});
    js_singleton.add("instance_geometry_set_shader_parameter", [singleton](const RID & instance,const StringName & parameter,const Variant & value)->void{singleton->instance_geometry_set_shader_parameter(instance,parameter,value);});
    js_singleton.add("instance_geometry_get_shader_parameter", [singleton](const RID & instance,const StringName & parameter)->Variant{return singleton->instance_geometry_get_shader_parameter(instance,parameter);});
    js_singleton.add("instance_geometry_get_shader_parameter_default_value", [singleton](const RID & instance,const StringName & parameter)->Variant{return singleton->instance_geometry_get_shader_parameter_default_value(instance,parameter);});
    js_singleton.add("instance_geometry_get_shader_parameter_list", [singleton](const RID & instance)->TypedArray<Dictionary>{return singleton->instance_geometry_get_shader_parameter_list(instance);});
    js_singleton.add("instances_cull_aabb", [singleton](const AABB & aabb,const RID & scenario)->PackedInt64Array{return singleton->instances_cull_aabb(aabb,scenario);});
    js_singleton.add("instances_cull_ray", [singleton](const Vector3 & from,const Vector3 & to,const RID & scenario)->PackedInt64Array{return singleton->instances_cull_ray(from,to,scenario);});
    js_singleton.add("instances_cull_convex", [singleton](const TypedArray<Plane> & convex,const RID & scenario)->PackedInt64Array{return singleton->instances_cull_convex(convex,scenario);});
    js_singleton.add("bake_render_uv2", [singleton](const RID & base,const TypedArray<RID> & material_overrides,const Vector2i & image_size)->TypedArray<Image>{return singleton->bake_render_uv2(base,material_overrides,image_size);});
    js_singleton.add("canvas_create", [singleton]()->RID{return singleton->canvas_create();});
    js_singleton.add("canvas_set_item_mirroring", [singleton](const RID & canvas,const RID & item,const Vector2 & mirroring)->void{singleton->canvas_set_item_mirroring(canvas,item,mirroring);});
    js_singleton.add("canvas_set_item_repeat", [singleton](const RID & item,const Vector2 & repeat_size,int32_t repeat_times)->void{singleton->canvas_set_item_repeat(item,repeat_size,repeat_times);});
    js_singleton.add("canvas_set_modulate", [singleton](const RID & canvas,const Color & color)->void{singleton->canvas_set_modulate(canvas,color);});
    js_singleton.add("canvas_set_disable_scale", [singleton](bool disable)->void{singleton->canvas_set_disable_scale(disable);});
    js_singleton.add("canvas_texture_create", [singleton]()->RID{return singleton->canvas_texture_create();});
    js_singleton.add("canvas_texture_set_channel", [singleton](const RID & canvas_texture,RenderingServer::CanvasTextureChannel channel,const RID & texture)->void{singleton->canvas_texture_set_channel(canvas_texture,channel,texture);});
    js_singleton.add("canvas_texture_set_shading_parameters", [singleton](const RID & canvas_texture,const Color & base_color,double shininess)->void{singleton->canvas_texture_set_shading_parameters(canvas_texture,base_color,shininess);});
    js_singleton.add("canvas_texture_set_texture_filter", [singleton](const RID & canvas_texture,RenderingServer::CanvasItemTextureFilter filter)->void{singleton->canvas_texture_set_texture_filter(canvas_texture,filter);});
    js_singleton.add("canvas_texture_set_texture_repeat", [singleton](const RID & canvas_texture,RenderingServer::CanvasItemTextureRepeat repeat)->void{singleton->canvas_texture_set_texture_repeat(canvas_texture,repeat);});
    js_singleton.add("canvas_item_create", [singleton]()->RID{return singleton->canvas_item_create();});
    js_singleton.add("canvas_item_set_parent", [singleton](const RID & item,const RID & parent)->void{singleton->canvas_item_set_parent(item,parent);});
    js_singleton.add("canvas_item_set_default_texture_filter", [singleton](const RID & item,RenderingServer::CanvasItemTextureFilter filter)->void{singleton->canvas_item_set_default_texture_filter(item,filter);});
    js_singleton.add("canvas_item_set_default_texture_repeat", [singleton](const RID & item,RenderingServer::CanvasItemTextureRepeat repeat)->void{singleton->canvas_item_set_default_texture_repeat(item,repeat);});
    js_singleton.add("canvas_item_set_visible", [singleton](const RID & item,bool visible)->void{singleton->canvas_item_set_visible(item,visible);});
    js_singleton.add("canvas_item_set_light_mask", [singleton](const RID & item,int32_t mask)->void{singleton->canvas_item_set_light_mask(item,mask);});
    js_singleton.add("canvas_item_set_visibility_layer", [singleton](const RID & item,uint32_t visibility_layer)->void{singleton->canvas_item_set_visibility_layer(item,visibility_layer);});
    js_singleton.add("canvas_item_set_transform", [singleton](const RID & item,const Transform2D & transform)->void{singleton->canvas_item_set_transform(item,transform);});
    js_singleton.add("canvas_item_set_clip", [singleton](const RID & item,bool clip)->void{singleton->canvas_item_set_clip(item,clip);});
    js_singleton.add("canvas_item_set_distance_field_mode", [singleton](const RID & item,bool enabled)->void{singleton->canvas_item_set_distance_field_mode(item,enabled);});
    js_singleton.add("canvas_item_set_custom_rect", [singleton](const RID & item,bool use_custom_rect,const Rect2 & rect)->void{singleton->canvas_item_set_custom_rect(item,use_custom_rect,rect);});
    js_singleton.add("canvas_item_set_modulate", [singleton](const RID & item,const Color & color)->void{singleton->canvas_item_set_modulate(item,color);});
    js_singleton.add("canvas_item_set_self_modulate", [singleton](const RID & item,const Color & color)->void{singleton->canvas_item_set_self_modulate(item,color);});
    js_singleton.add("canvas_item_set_draw_behind_parent", [singleton](const RID & item,bool enabled)->void{singleton->canvas_item_set_draw_behind_parent(item,enabled);});
    js_singleton.add("canvas_item_set_interpolated", [singleton](const RID & item,bool interpolated)->void{singleton->canvas_item_set_interpolated(item,interpolated);});
    js_singleton.add("canvas_item_reset_physics_interpolation", [singleton](const RID & item)->void{singleton->canvas_item_reset_physics_interpolation(item);});
    js_singleton.add("canvas_item_transform_physics_interpolation", [singleton](const RID & item,const Transform2D & transform)->void{singleton->canvas_item_transform_physics_interpolation(item,transform);});
    js_singleton.add("canvas_item_add_line", [singleton](const RID & item,const Vector2 & from,const Vector2 & to,const Color & color,double width,bool antialiased)->void{singleton->canvas_item_add_line(item,from,to,color,width,antialiased);});
    js_singleton.add("canvas_item_add_polyline", [singleton](const RID & item,const PackedVector2Array & points,const PackedColorArray & colors,double width,bool antialiased)->void{singleton->canvas_item_add_polyline(item,points,colors,width,antialiased);});
    js_singleton.add("canvas_item_add_multiline", [singleton](const RID & item,const PackedVector2Array & points,const PackedColorArray & colors,double width,bool antialiased)->void{singleton->canvas_item_add_multiline(item,points,colors,width,antialiased);});
    js_singleton.add("canvas_item_add_rect", [singleton](const RID & item,const Rect2 & rect,const Color & color,bool antialiased)->void{singleton->canvas_item_add_rect(item,rect,color,antialiased);});
    js_singleton.add("canvas_item_add_circle", [singleton](const RID & item,const Vector2 & pos,double radius,const Color & color,bool antialiased)->void{singleton->canvas_item_add_circle(item,pos,radius,color,antialiased);});
    js_singleton.add("canvas_item_add_texture_rect", [singleton](const RID & item,const Rect2 & rect,const RID & texture,bool tile,const Color & modulate,bool transpose)->void{singleton->canvas_item_add_texture_rect(item,rect,texture,tile,modulate,transpose);});
    js_singleton.add("canvas_item_add_msdf_texture_rect_region", [singleton](const RID & item,const Rect2 & rect,const RID & texture,const Rect2 & src_rect,const Color & modulate,int32_t outline_size,double px_range,double scale)->void{singleton->canvas_item_add_msdf_texture_rect_region(item,rect,texture,src_rect,modulate,outline_size,px_range,scale);});
    js_singleton.add("canvas_item_add_lcd_texture_rect_region", [singleton](const RID & item,const Rect2 & rect,const RID & texture,const Rect2 & src_rect,const Color & modulate)->void{singleton->canvas_item_add_lcd_texture_rect_region(item,rect,texture,src_rect,modulate);});
    js_singleton.add("canvas_item_add_texture_rect_region", [singleton](const RID & item,const Rect2 & rect,const RID & texture,const Rect2 & src_rect,const Color & modulate,bool transpose,bool clip_uv)->void{singleton->canvas_item_add_texture_rect_region(item,rect,texture,src_rect,modulate,transpose,clip_uv);});
    js_singleton.add("canvas_item_add_nine_patch", [singleton](const RID & item,const Rect2 & rect,const Rect2 & source,const RID & texture,const Vector2 & topleft,const Vector2 & bottomright,RenderingServer::NinePatchAxisMode x_axis_mode,RenderingServer::NinePatchAxisMode y_axis_mode,bool draw_center,const Color & modulate)->void{singleton->canvas_item_add_nine_patch(item,rect,source,texture,topleft,bottomright,x_axis_mode,y_axis_mode,draw_center,modulate);});
    js_singleton.add("canvas_item_add_primitive", [singleton](const RID & item,const PackedVector2Array & points,const PackedColorArray & colors,const PackedVector2Array & uvs,const RID & texture)->void{singleton->canvas_item_add_primitive(item,points,colors,uvs,texture);});
    js_singleton.add("canvas_item_add_polygon", [singleton](const RID & item,const PackedVector2Array & points,const PackedColorArray & colors,const PackedVector2Array & uvs,const RID & texture)->void{singleton->canvas_item_add_polygon(item,points,colors,uvs,texture);});
    js_singleton.add("canvas_item_add_triangle_array", [singleton](const RID & item,const PackedInt32Array & indices,const PackedVector2Array & points,const PackedColorArray & colors,const PackedVector2Array & uvs,const PackedInt32Array & bones,const PackedFloat32Array & weights,const RID & texture,int32_t count)->void{singleton->canvas_item_add_triangle_array(item,indices,points,colors,uvs,bones,weights,texture,count);});
    js_singleton.add("canvas_item_add_mesh", [singleton](const RID & item,const RID & mesh,const Transform2D & transform,const Color & modulate,const RID & texture)->void{singleton->canvas_item_add_mesh(item,mesh,transform,modulate,texture);});
    js_singleton.add("canvas_item_add_multimesh", [singleton](const RID & item,const RID & mesh,const RID & texture)->void{singleton->canvas_item_add_multimesh(item,mesh,texture);});
    js_singleton.add("canvas_item_add_particles", [singleton](const RID & item,const RID & particles,const RID & texture)->void{singleton->canvas_item_add_particles(item,particles,texture);});
    js_singleton.add("canvas_item_add_set_transform", [singleton](const RID & item,const Transform2D & transform)->void{singleton->canvas_item_add_set_transform(item,transform);});
    js_singleton.add("canvas_item_add_clip_ignore", [singleton](const RID & item,bool ignore)->void{singleton->canvas_item_add_clip_ignore(item,ignore);});
    js_singleton.add("canvas_item_add_animation_slice", [singleton](const RID & item,double animation_length,double slice_begin,double slice_end,double offset)->void{singleton->canvas_item_add_animation_slice(item,animation_length,slice_begin,slice_end,offset);});
    js_singleton.add("canvas_item_set_sort_children_by_y", [singleton](const RID & item,bool enabled)->void{singleton->canvas_item_set_sort_children_by_y(item,enabled);});
    js_singleton.add("canvas_item_set_z_index", [singleton](const RID & item,int32_t z_index)->void{singleton->canvas_item_set_z_index(item,z_index);});
    js_singleton.add("canvas_item_set_z_as_relative_to_parent", [singleton](const RID & item,bool enabled)->void{singleton->canvas_item_set_z_as_relative_to_parent(item,enabled);});
    js_singleton.add("canvas_item_set_copy_to_backbuffer", [singleton](const RID & item,bool enabled,const Rect2 & rect)->void{singleton->canvas_item_set_copy_to_backbuffer(item,enabled,rect);});
    js_singleton.add("canvas_item_clear", [singleton](const RID & item)->void{singleton->canvas_item_clear(item);});
    js_singleton.add("canvas_item_set_draw_index", [singleton](const RID & item,int32_t index)->void{singleton->canvas_item_set_draw_index(item,index);});
    js_singleton.add("canvas_item_set_material", [singleton](const RID & item,const RID & material)->void{singleton->canvas_item_set_material(item,material);});
    js_singleton.add("canvas_item_set_use_parent_material", [singleton](const RID & item,bool enabled)->void{singleton->canvas_item_set_use_parent_material(item,enabled);});
    js_singleton.add("canvas_item_set_visibility_notifier", [singleton](const RID & item,bool enable,const Rect2 & area,const Callable & enter_callable,const Callable & exit_callable)->void{singleton->canvas_item_set_visibility_notifier(item,enable,area,enter_callable,exit_callable);});
    js_singleton.add("canvas_item_set_canvas_group_mode", [singleton](const RID & item,RenderingServer::CanvasGroupMode mode,double clear_margin,bool fit_empty,double fit_margin,bool blur_mipmaps)->void{singleton->canvas_item_set_canvas_group_mode(item,mode,clear_margin,fit_empty,fit_margin,blur_mipmaps);});
    js_singleton.add("debug_canvas_item_get_rect", [singleton](const RID & item)->Rect2{return singleton->debug_canvas_item_get_rect(item);});
    js_singleton.add("canvas_light_create", [singleton]()->RID{return singleton->canvas_light_create();});
    js_singleton.add("canvas_light_attach_to_canvas", [singleton](const RID & light,const RID & canvas)->void{singleton->canvas_light_attach_to_canvas(light,canvas);});
    js_singleton.add("canvas_light_set_enabled", [singleton](const RID & light,bool enabled)->void{singleton->canvas_light_set_enabled(light,enabled);});
    js_singleton.add("canvas_light_set_texture_scale", [singleton](const RID & light,double scale)->void{singleton->canvas_light_set_texture_scale(light,scale);});
    js_singleton.add("canvas_light_set_transform", [singleton](const RID & light,const Transform2D & transform)->void{singleton->canvas_light_set_transform(light,transform);});
    js_singleton.add("canvas_light_set_texture", [singleton](const RID & light,const RID & texture)->void{singleton->canvas_light_set_texture(light,texture);});
    js_singleton.add("canvas_light_set_texture_offset", [singleton](const RID & light,const Vector2 & offset)->void{singleton->canvas_light_set_texture_offset(light,offset);});
    js_singleton.add("canvas_light_set_color", [singleton](const RID & light,const Color & color)->void{singleton->canvas_light_set_color(light,color);});
    js_singleton.add("canvas_light_set_height", [singleton](const RID & light,double height)->void{singleton->canvas_light_set_height(light,height);});
    js_singleton.add("canvas_light_set_energy", [singleton](const RID & light,double energy)->void{singleton->canvas_light_set_energy(light,energy);});
    js_singleton.add("canvas_light_set_z_range", [singleton](const RID & light,int32_t min_z,int32_t max_z)->void{singleton->canvas_light_set_z_range(light,min_z,max_z);});
    js_singleton.add("canvas_light_set_layer_range", [singleton](const RID & light,int32_t min_layer,int32_t max_layer)->void{singleton->canvas_light_set_layer_range(light,min_layer,max_layer);});
    js_singleton.add("canvas_light_set_item_cull_mask", [singleton](const RID & light,int32_t mask)->void{singleton->canvas_light_set_item_cull_mask(light,mask);});
    js_singleton.add("canvas_light_set_item_shadow_cull_mask", [singleton](const RID & light,int32_t mask)->void{singleton->canvas_light_set_item_shadow_cull_mask(light,mask);});
    js_singleton.add("canvas_light_set_mode", [singleton](const RID & light,RenderingServer::CanvasLightMode mode)->void{singleton->canvas_light_set_mode(light,mode);});
    js_singleton.add("canvas_light_set_shadow_enabled", [singleton](const RID & light,bool enabled)->void{singleton->canvas_light_set_shadow_enabled(light,enabled);});
    js_singleton.add("canvas_light_set_shadow_filter", [singleton](const RID & light,RenderingServer::CanvasLightShadowFilter filter)->void{singleton->canvas_light_set_shadow_filter(light,filter);});
    js_singleton.add("canvas_light_set_shadow_color", [singleton](const RID & light,const Color & color)->void{singleton->canvas_light_set_shadow_color(light,color);});
    js_singleton.add("canvas_light_set_shadow_smooth", [singleton](const RID & light,double smooth)->void{singleton->canvas_light_set_shadow_smooth(light,smooth);});
    js_singleton.add("canvas_light_set_blend_mode", [singleton](const RID & light,RenderingServer::CanvasLightBlendMode mode)->void{singleton->canvas_light_set_blend_mode(light,mode);});
    js_singleton.add("canvas_light_set_interpolated", [singleton](const RID & light,bool interpolated)->void{singleton->canvas_light_set_interpolated(light,interpolated);});
    js_singleton.add("canvas_light_reset_physics_interpolation", [singleton](const RID & light)->void{singleton->canvas_light_reset_physics_interpolation(light);});
    js_singleton.add("canvas_light_transform_physics_interpolation", [singleton](const RID & light,const Transform2D & transform)->void{singleton->canvas_light_transform_physics_interpolation(light,transform);});
    js_singleton.add("canvas_light_occluder_create", [singleton]()->RID{return singleton->canvas_light_occluder_create();});
    js_singleton.add("canvas_light_occluder_attach_to_canvas", [singleton](const RID & occluder,const RID & canvas)->void{singleton->canvas_light_occluder_attach_to_canvas(occluder,canvas);});
    js_singleton.add("canvas_light_occluder_set_enabled", [singleton](const RID & occluder,bool enabled)->void{singleton->canvas_light_occluder_set_enabled(occluder,enabled);});
    js_singleton.add("canvas_light_occluder_set_polygon", [singleton](const RID & occluder,const RID & polygon)->void{singleton->canvas_light_occluder_set_polygon(occluder,polygon);});
    js_singleton.add("canvas_light_occluder_set_as_sdf_collision", [singleton](const RID & occluder,bool enable)->void{singleton->canvas_light_occluder_set_as_sdf_collision(occluder,enable);});
    js_singleton.add("canvas_light_occluder_set_transform", [singleton](const RID & occluder,const Transform2D & transform)->void{singleton->canvas_light_occluder_set_transform(occluder,transform);});
    js_singleton.add("canvas_light_occluder_set_light_mask", [singleton](const RID & occluder,int32_t mask)->void{singleton->canvas_light_occluder_set_light_mask(occluder,mask);});
    js_singleton.add("canvas_light_occluder_set_interpolated", [singleton](const RID & occluder,bool interpolated)->void{singleton->canvas_light_occluder_set_interpolated(occluder,interpolated);});
    js_singleton.add("canvas_light_occluder_reset_physics_interpolation", [singleton](const RID & occluder)->void{singleton->canvas_light_occluder_reset_physics_interpolation(occluder);});
    js_singleton.add("canvas_light_occluder_transform_physics_interpolation", [singleton](const RID & occluder,const Transform2D & transform)->void{singleton->canvas_light_occluder_transform_physics_interpolation(occluder,transform);});
    js_singleton.add("canvas_occluder_polygon_create", [singleton]()->RID{return singleton->canvas_occluder_polygon_create();});
    js_singleton.add("canvas_occluder_polygon_set_shape", [singleton](const RID & occluder_polygon,const PackedVector2Array & shape,bool closed)->void{singleton->canvas_occluder_polygon_set_shape(occluder_polygon,shape,closed);});
    js_singleton.add("canvas_occluder_polygon_set_cull_mode", [singleton](const RID & occluder_polygon,RenderingServer::CanvasOccluderPolygonCullMode mode)->void{singleton->canvas_occluder_polygon_set_cull_mode(occluder_polygon,mode);});
    js_singleton.add("canvas_set_shadow_texture_size", [singleton](int32_t size)->void{singleton->canvas_set_shadow_texture_size(size);});
    js_singleton.add("global_shader_parameter_add", [singleton](const StringName & name,RenderingServer::GlobalShaderParameterType type,const Variant & default_value)->void{singleton->global_shader_parameter_add(name,type,default_value);});
    js_singleton.add("global_shader_parameter_remove", [singleton](const StringName & name)->void{singleton->global_shader_parameter_remove(name);});
    js_singleton.add("global_shader_parameter_get_list", [singleton]()->TypedArray<StringName>{return singleton->global_shader_parameter_get_list();});
    js_singleton.add("global_shader_parameter_set", [singleton](const StringName & name,const Variant & value)->void{singleton->global_shader_parameter_set(name,value);});
    js_singleton.add("global_shader_parameter_set_override", [singleton](const StringName & name,const Variant & value)->void{singleton->global_shader_parameter_set_override(name,value);});
    js_singleton.add("global_shader_parameter_get", [singleton](const StringName & name)->Variant{return singleton->global_shader_parameter_get(name);});
    js_singleton.add("global_shader_parameter_get_type", [singleton](const StringName & name)->RenderingServer::GlobalShaderParameterType{return singleton->global_shader_parameter_get_type(name);});
    js_singleton.add("free_rid", [singleton](const RID & rid)->void{singleton->free_rid(rid);});
    js_singleton.add("request_frame_drawn_callback", [singleton](const Callable & callable)->void{singleton->request_frame_drawn_callback(callable);});
    js_singleton.add("has_changed", [singleton]()->bool{return singleton->has_changed();});
    js_singleton.add("get_rendering_info", [singleton](RenderingServer::RenderingInfo info)->int64_t{return singleton->get_rendering_info(info);});
    js_singleton.add("get_video_adapter_name", [singleton]()->String{return singleton->get_video_adapter_name();});
    js_singleton.add("get_video_adapter_vendor", [singleton]()->String{return singleton->get_video_adapter_vendor();});
    js_singleton.add("get_video_adapter_type", [singleton]()->RenderingDevice::DeviceType{return singleton->get_video_adapter_type();});
    js_singleton.add("get_video_adapter_api_version", [singleton]()->String{return singleton->get_video_adapter_api_version();});
    js_singleton.add("make_sphere_mesh", [singleton](int32_t latitudes,int32_t longitudes,double radius)->RID{return singleton->make_sphere_mesh(latitudes,longitudes,radius);});
    js_singleton.add("get_test_cube", [singleton]()->RID{return singleton->get_test_cube();});
    js_singleton.add("get_test_texture", [singleton]()->RID{return singleton->get_test_texture();});
    js_singleton.add("get_white_texture", [singleton]()->RID{return singleton->get_white_texture();});
    js_singleton.add("set_boot_image", [singleton](const Ref<Image> & image,const Color & color,bool scale,bool use_filter)->void{singleton->set_boot_image(image,color,scale,use_filter);});
    js_singleton.add("get_default_clear_color", [singleton]()->Color{return singleton->get_default_clear_color();});
    js_singleton.add("set_default_clear_color", [singleton](const Color & color)->void{singleton->set_default_clear_color(color);});
    js_singleton.add("has_os_feature", [singleton](const String & feature)->bool{return singleton->has_os_feature(feature);});
    js_singleton.add("set_debug_generate_wireframes", [singleton](bool generate)->void{singleton->set_debug_generate_wireframes(generate);});
    js_singleton.add("is_render_loop_enabled", [singleton]()->bool{return singleton->is_render_loop_enabled();});
    js_singleton.add("set_render_loop_enabled", [singleton](bool enabled)->void{singleton->set_render_loop_enabled(enabled);});
    js_singleton.add("get_frame_setup_time_cpu", [singleton]()->double{return singleton->get_frame_setup_time_cpu();});
    js_singleton.add("force_sync", [singleton]()->void{singleton->force_sync();});
    js_singleton.add("force_draw", [singleton](bool swap_buffers,double frame_step)->void{singleton->force_draw(swap_buffers,frame_step);});
    js_singleton.add("get_rendering_device", [singleton]()->RenderingDevice *{return singleton->get_rendering_device();});
    js_singleton.add("create_local_rendering_device", [singleton]()->RenderingDevice *{return singleton->create_local_rendering_device();});
    js_singleton.add("is_on_render_thread", [singleton]()->bool{return singleton->is_on_render_thread();});
    js_singleton.add("call_on_render_thread", [singleton](const Callable & callable)->void{singleton->call_on_render_thread(callable);});
    js_singleton.add("has_feature", [singleton](RenderingServer::Features feature)->bool{return singleton->has_feature(feature);});
    context->global()["RenderingServer"] = js_singleton;

    qjs::Value _TextureLayeredType = context->newObject();
    _TextureLayeredType["TEXTURE_LAYERED_2D_ARRAY"] = RenderingServer::TextureLayeredType::TEXTURE_LAYERED_2D_ARRAY;
    _TextureLayeredType["TEXTURE_LAYERED_CUBEMAP"] = RenderingServer::TextureLayeredType::TEXTURE_LAYERED_CUBEMAP;
    _TextureLayeredType["TEXTURE_LAYERED_CUBEMAP_ARRAY"] = RenderingServer::TextureLayeredType::TEXTURE_LAYERED_CUBEMAP_ARRAY;
    js_singleton["TextureLayeredType"] = _TextureLayeredType;
    qjs::Value _CubeMapLayer = context->newObject();
    _CubeMapLayer["CUBEMAP_LAYER_LEFT"] = RenderingServer::CubeMapLayer::CUBEMAP_LAYER_LEFT;
    _CubeMapLayer["CUBEMAP_LAYER_RIGHT"] = RenderingServer::CubeMapLayer::CUBEMAP_LAYER_RIGHT;
    _CubeMapLayer["CUBEMAP_LAYER_BOTTOM"] = RenderingServer::CubeMapLayer::CUBEMAP_LAYER_BOTTOM;
    _CubeMapLayer["CUBEMAP_LAYER_TOP"] = RenderingServer::CubeMapLayer::CUBEMAP_LAYER_TOP;
    _CubeMapLayer["CUBEMAP_LAYER_FRONT"] = RenderingServer::CubeMapLayer::CUBEMAP_LAYER_FRONT;
    _CubeMapLayer["CUBEMAP_LAYER_BACK"] = RenderingServer::CubeMapLayer::CUBEMAP_LAYER_BACK;
    js_singleton["CubeMapLayer"] = _CubeMapLayer;
    qjs::Value _ShaderMode = context->newObject();
    _ShaderMode["SHADER_SPATIAL"] = RenderingServer::ShaderMode::SHADER_SPATIAL;
    _ShaderMode["SHADER_CANVAS_ITEM"] = RenderingServer::ShaderMode::SHADER_CANVAS_ITEM;
    _ShaderMode["SHADER_PARTICLES"] = RenderingServer::ShaderMode::SHADER_PARTICLES;
    _ShaderMode["SHADER_SKY"] = RenderingServer::ShaderMode::SHADER_SKY;
    _ShaderMode["SHADER_FOG"] = RenderingServer::ShaderMode::SHADER_FOG;
    _ShaderMode["SHADER_MAX"] = RenderingServer::ShaderMode::SHADER_MAX;
    js_singleton["ShaderMode"] = _ShaderMode;
    qjs::Value _ArrayType = context->newObject();
    _ArrayType["ARRAY_VERTEX"] = RenderingServer::ArrayType::ARRAY_VERTEX;
    _ArrayType["ARRAY_NORMAL"] = RenderingServer::ArrayType::ARRAY_NORMAL;
    _ArrayType["ARRAY_TANGENT"] = RenderingServer::ArrayType::ARRAY_TANGENT;
    _ArrayType["ARRAY_COLOR"] = RenderingServer::ArrayType::ARRAY_COLOR;
    _ArrayType["ARRAY_TEX_UV"] = RenderingServer::ArrayType::ARRAY_TEX_UV;
    _ArrayType["ARRAY_TEX_UV2"] = RenderingServer::ArrayType::ARRAY_TEX_UV2;
    _ArrayType["ARRAY_CUSTOM0"] = RenderingServer::ArrayType::ARRAY_CUSTOM0;
    _ArrayType["ARRAY_CUSTOM1"] = RenderingServer::ArrayType::ARRAY_CUSTOM1;
    _ArrayType["ARRAY_CUSTOM2"] = RenderingServer::ArrayType::ARRAY_CUSTOM2;
    _ArrayType["ARRAY_CUSTOM3"] = RenderingServer::ArrayType::ARRAY_CUSTOM3;
    _ArrayType["ARRAY_BONES"] = RenderingServer::ArrayType::ARRAY_BONES;
    _ArrayType["ARRAY_WEIGHTS"] = RenderingServer::ArrayType::ARRAY_WEIGHTS;
    _ArrayType["ARRAY_INDEX"] = RenderingServer::ArrayType::ARRAY_INDEX;
    _ArrayType["ARRAY_MAX"] = RenderingServer::ArrayType::ARRAY_MAX;
    js_singleton["ArrayType"] = _ArrayType;
    qjs::Value _ArrayCustomFormat = context->newObject();
    _ArrayCustomFormat["ARRAY_CUSTOM_RGBA8_UNORM"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_RGBA8_UNORM;
    _ArrayCustomFormat["ARRAY_CUSTOM_RGBA8_SNORM"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_RGBA8_SNORM;
    _ArrayCustomFormat["ARRAY_CUSTOM_RG_HALF"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_RG_HALF;
    _ArrayCustomFormat["ARRAY_CUSTOM_RGBA_HALF"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_RGBA_HALF;
    _ArrayCustomFormat["ARRAY_CUSTOM_R_FLOAT"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_R_FLOAT;
    _ArrayCustomFormat["ARRAY_CUSTOM_RG_FLOAT"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_RG_FLOAT;
    _ArrayCustomFormat["ARRAY_CUSTOM_RGB_FLOAT"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_RGB_FLOAT;
    _ArrayCustomFormat["ARRAY_CUSTOM_RGBA_FLOAT"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_RGBA_FLOAT;
    _ArrayCustomFormat["ARRAY_CUSTOM_MAX"] = RenderingServer::ArrayCustomFormat::ARRAY_CUSTOM_MAX;
    js_singleton["ArrayCustomFormat"] = _ArrayCustomFormat;
    qjs::Value _ArrayFormat = context->newObject();
    _ArrayFormat["ARRAY_FORMAT_VERTEX"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_VERTEX;
    _ArrayFormat["ARRAY_FORMAT_NORMAL"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_NORMAL;
    _ArrayFormat["ARRAY_FORMAT_TANGENT"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_TANGENT;
    _ArrayFormat["ARRAY_FORMAT_COLOR"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_COLOR;
    _ArrayFormat["ARRAY_FORMAT_TEX_UV"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_TEX_UV;
    _ArrayFormat["ARRAY_FORMAT_TEX_UV2"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_TEX_UV2;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM0"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM0;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM1"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM1;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM2"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM2;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM3"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM3;
    _ArrayFormat["ARRAY_FORMAT_BONES"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_BONES;
    _ArrayFormat["ARRAY_FORMAT_WEIGHTS"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_WEIGHTS;
    _ArrayFormat["ARRAY_FORMAT_INDEX"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_INDEX;
    _ArrayFormat["ARRAY_FORMAT_BLEND_SHAPE_MASK"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_BLEND_SHAPE_MASK;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM_BASE"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM_BASE;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM_BITS"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM_BITS;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM0_SHIFT"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM0_SHIFT;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM1_SHIFT"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM1_SHIFT;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM2_SHIFT"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM2_SHIFT;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM3_SHIFT"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM3_SHIFT;
    _ArrayFormat["ARRAY_FORMAT_CUSTOM_MASK"] = RenderingServer::ArrayFormat::ARRAY_FORMAT_CUSTOM_MASK;
    _ArrayFormat["ARRAY_COMPRESS_FLAGS_BASE"] = RenderingServer::ArrayFormat::ARRAY_COMPRESS_FLAGS_BASE;
    _ArrayFormat["ARRAY_FLAG_USE_2D_VERTICES"] = RenderingServer::ArrayFormat::ARRAY_FLAG_USE_2D_VERTICES;
    _ArrayFormat["ARRAY_FLAG_USE_DYNAMIC_UPDATE"] = RenderingServer::ArrayFormat::ARRAY_FLAG_USE_DYNAMIC_UPDATE;
    _ArrayFormat["ARRAY_FLAG_USE_8_BONE_WEIGHTS"] = RenderingServer::ArrayFormat::ARRAY_FLAG_USE_8_BONE_WEIGHTS;
    _ArrayFormat["ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY"] = RenderingServer::ArrayFormat::ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY;
    _ArrayFormat["ARRAY_FLAG_COMPRESS_ATTRIBUTES"] = RenderingServer::ArrayFormat::ARRAY_FLAG_COMPRESS_ATTRIBUTES;
    _ArrayFormat["ARRAY_FLAG_FORMAT_VERSION_BASE"] = RenderingServer::ArrayFormat::ARRAY_FLAG_FORMAT_VERSION_BASE;
    _ArrayFormat["ARRAY_FLAG_FORMAT_VERSION_SHIFT"] = RenderingServer::ArrayFormat::ARRAY_FLAG_FORMAT_VERSION_SHIFT;
    _ArrayFormat["ARRAY_FLAG_FORMAT_VERSION_1"] = RenderingServer::ArrayFormat::ARRAY_FLAG_FORMAT_VERSION_1;
    _ArrayFormat["ARRAY_FLAG_FORMAT_VERSION_2"] = RenderingServer::ArrayFormat::ARRAY_FLAG_FORMAT_VERSION_2;
    _ArrayFormat["ARRAY_FLAG_FORMAT_CURRENT_VERSION"] = RenderingServer::ArrayFormat::ARRAY_FLAG_FORMAT_CURRENT_VERSION;
    _ArrayFormat["ARRAY_FLAG_FORMAT_VERSION_MASK"] = RenderingServer::ArrayFormat::ARRAY_FLAG_FORMAT_VERSION_MASK;
    js_singleton["ArrayFormat"] = _ArrayFormat;
    qjs::Value _PrimitiveType = context->newObject();
    _PrimitiveType["PRIMITIVE_POINTS"] = RenderingServer::PrimitiveType::PRIMITIVE_POINTS;
    _PrimitiveType["PRIMITIVE_LINES"] = RenderingServer::PrimitiveType::PRIMITIVE_LINES;
    _PrimitiveType["PRIMITIVE_LINE_STRIP"] = RenderingServer::PrimitiveType::PRIMITIVE_LINE_STRIP;
    _PrimitiveType["PRIMITIVE_TRIANGLES"] = RenderingServer::PrimitiveType::PRIMITIVE_TRIANGLES;
    _PrimitiveType["PRIMITIVE_TRIANGLE_STRIP"] = RenderingServer::PrimitiveType::PRIMITIVE_TRIANGLE_STRIP;
    _PrimitiveType["PRIMITIVE_MAX"] = RenderingServer::PrimitiveType::PRIMITIVE_MAX;
    js_singleton["PrimitiveType"] = _PrimitiveType;
    qjs::Value _BlendShapeMode = context->newObject();
    _BlendShapeMode["BLEND_SHAPE_MODE_NORMALIZED"] = RenderingServer::BlendShapeMode::BLEND_SHAPE_MODE_NORMALIZED;
    _BlendShapeMode["BLEND_SHAPE_MODE_RELATIVE"] = RenderingServer::BlendShapeMode::BLEND_SHAPE_MODE_RELATIVE;
    js_singleton["BlendShapeMode"] = _BlendShapeMode;
    qjs::Value _MultimeshTransformFormat = context->newObject();
    _MultimeshTransformFormat["MULTIMESH_TRANSFORM_2D"] = RenderingServer::MultimeshTransformFormat::MULTIMESH_TRANSFORM_2D;
    _MultimeshTransformFormat["MULTIMESH_TRANSFORM_3D"] = RenderingServer::MultimeshTransformFormat::MULTIMESH_TRANSFORM_3D;
    js_singleton["MultimeshTransformFormat"] = _MultimeshTransformFormat;
    qjs::Value _LightProjectorFilter = context->newObject();
    _LightProjectorFilter["LIGHT_PROJECTOR_FILTER_NEAREST"] = RenderingServer::LightProjectorFilter::LIGHT_PROJECTOR_FILTER_NEAREST;
    _LightProjectorFilter["LIGHT_PROJECTOR_FILTER_LINEAR"] = RenderingServer::LightProjectorFilter::LIGHT_PROJECTOR_FILTER_LINEAR;
    _LightProjectorFilter["LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS"] = RenderingServer::LightProjectorFilter::LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS;
    _LightProjectorFilter["LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS"] = RenderingServer::LightProjectorFilter::LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS;
    _LightProjectorFilter["LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS_ANISOTROPIC"] = RenderingServer::LightProjectorFilter::LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS_ANISOTROPIC;
    _LightProjectorFilter["LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS_ANISOTROPIC"] = RenderingServer::LightProjectorFilter::LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS_ANISOTROPIC;
    js_singleton["LightProjectorFilter"] = _LightProjectorFilter;
    qjs::Value _LightType = context->newObject();
    _LightType["LIGHT_DIRECTIONAL"] = RenderingServer::LightType::LIGHT_DIRECTIONAL;
    _LightType["LIGHT_OMNI"] = RenderingServer::LightType::LIGHT_OMNI;
    _LightType["LIGHT_SPOT"] = RenderingServer::LightType::LIGHT_SPOT;
    js_singleton["LightType"] = _LightType;
    qjs::Value _LightParam = context->newObject();
    _LightParam["LIGHT_PARAM_ENERGY"] = RenderingServer::LightParam::LIGHT_PARAM_ENERGY;
    _LightParam["LIGHT_PARAM_INDIRECT_ENERGY"] = RenderingServer::LightParam::LIGHT_PARAM_INDIRECT_ENERGY;
    _LightParam["LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY"] = RenderingServer::LightParam::LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY;
    _LightParam["LIGHT_PARAM_SPECULAR"] = RenderingServer::LightParam::LIGHT_PARAM_SPECULAR;
    _LightParam["LIGHT_PARAM_RANGE"] = RenderingServer::LightParam::LIGHT_PARAM_RANGE;
    _LightParam["LIGHT_PARAM_SIZE"] = RenderingServer::LightParam::LIGHT_PARAM_SIZE;
    _LightParam["LIGHT_PARAM_ATTENUATION"] = RenderingServer::LightParam::LIGHT_PARAM_ATTENUATION;
    _LightParam["LIGHT_PARAM_SPOT_ANGLE"] = RenderingServer::LightParam::LIGHT_PARAM_SPOT_ANGLE;
    _LightParam["LIGHT_PARAM_SPOT_ATTENUATION"] = RenderingServer::LightParam::LIGHT_PARAM_SPOT_ATTENUATION;
    _LightParam["LIGHT_PARAM_SHADOW_MAX_DISTANCE"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_MAX_DISTANCE;
    _LightParam["LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET;
    _LightParam["LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET;
    _LightParam["LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET;
    _LightParam["LIGHT_PARAM_SHADOW_FADE_START"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_FADE_START;
    _LightParam["LIGHT_PARAM_SHADOW_NORMAL_BIAS"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_NORMAL_BIAS;
    _LightParam["LIGHT_PARAM_SHADOW_BIAS"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_BIAS;
    _LightParam["LIGHT_PARAM_SHADOW_PANCAKE_SIZE"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_PANCAKE_SIZE;
    _LightParam["LIGHT_PARAM_SHADOW_OPACITY"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_OPACITY;
    _LightParam["LIGHT_PARAM_SHADOW_BLUR"] = RenderingServer::LightParam::LIGHT_PARAM_SHADOW_BLUR;
    _LightParam["LIGHT_PARAM_TRANSMITTANCE_BIAS"] = RenderingServer::LightParam::LIGHT_PARAM_TRANSMITTANCE_BIAS;
    _LightParam["LIGHT_PARAM_INTENSITY"] = RenderingServer::LightParam::LIGHT_PARAM_INTENSITY;
    _LightParam["LIGHT_PARAM_MAX"] = RenderingServer::LightParam::LIGHT_PARAM_MAX;
    js_singleton["LightParam"] = _LightParam;
    qjs::Value _LightBakeMode = context->newObject();
    _LightBakeMode["LIGHT_BAKE_DISABLED"] = RenderingServer::LightBakeMode::LIGHT_BAKE_DISABLED;
    _LightBakeMode["LIGHT_BAKE_STATIC"] = RenderingServer::LightBakeMode::LIGHT_BAKE_STATIC;
    _LightBakeMode["LIGHT_BAKE_DYNAMIC"] = RenderingServer::LightBakeMode::LIGHT_BAKE_DYNAMIC;
    js_singleton["LightBakeMode"] = _LightBakeMode;
    qjs::Value _LightOmniShadowMode = context->newObject();
    _LightOmniShadowMode["LIGHT_OMNI_SHADOW_DUAL_PARABOLOID"] = RenderingServer::LightOmniShadowMode::LIGHT_OMNI_SHADOW_DUAL_PARABOLOID;
    _LightOmniShadowMode["LIGHT_OMNI_SHADOW_CUBE"] = RenderingServer::LightOmniShadowMode::LIGHT_OMNI_SHADOW_CUBE;
    js_singleton["LightOmniShadowMode"] = _LightOmniShadowMode;
    qjs::Value _LightDirectionalShadowMode = context->newObject();
    _LightDirectionalShadowMode["LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL"] = RenderingServer::LightDirectionalShadowMode::LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL;
    _LightDirectionalShadowMode["LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS"] = RenderingServer::LightDirectionalShadowMode::LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS;
    _LightDirectionalShadowMode["LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS"] = RenderingServer::LightDirectionalShadowMode::LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS;
    js_singleton["LightDirectionalShadowMode"] = _LightDirectionalShadowMode;
    qjs::Value _LightDirectionalSkyMode = context->newObject();
    _LightDirectionalSkyMode["LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_AND_SKY"] = RenderingServer::LightDirectionalSkyMode::LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_AND_SKY;
    _LightDirectionalSkyMode["LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_ONLY"] = RenderingServer::LightDirectionalSkyMode::LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_ONLY;
    _LightDirectionalSkyMode["LIGHT_DIRECTIONAL_SKY_MODE_SKY_ONLY"] = RenderingServer::LightDirectionalSkyMode::LIGHT_DIRECTIONAL_SKY_MODE_SKY_ONLY;
    js_singleton["LightDirectionalSkyMode"] = _LightDirectionalSkyMode;
    qjs::Value _ShadowQuality = context->newObject();
    _ShadowQuality["SHADOW_QUALITY_HARD"] = RenderingServer::ShadowQuality::SHADOW_QUALITY_HARD;
    _ShadowQuality["SHADOW_QUALITY_SOFT_VERY_LOW"] = RenderingServer::ShadowQuality::SHADOW_QUALITY_SOFT_VERY_LOW;
    _ShadowQuality["SHADOW_QUALITY_SOFT_LOW"] = RenderingServer::ShadowQuality::SHADOW_QUALITY_SOFT_LOW;
    _ShadowQuality["SHADOW_QUALITY_SOFT_MEDIUM"] = RenderingServer::ShadowQuality::SHADOW_QUALITY_SOFT_MEDIUM;
    _ShadowQuality["SHADOW_QUALITY_SOFT_HIGH"] = RenderingServer::ShadowQuality::SHADOW_QUALITY_SOFT_HIGH;
    _ShadowQuality["SHADOW_QUALITY_SOFT_ULTRA"] = RenderingServer::ShadowQuality::SHADOW_QUALITY_SOFT_ULTRA;
    _ShadowQuality["SHADOW_QUALITY_MAX"] = RenderingServer::ShadowQuality::SHADOW_QUALITY_MAX;
    js_singleton["ShadowQuality"] = _ShadowQuality;
    qjs::Value _ReflectionProbeUpdateMode = context->newObject();
    _ReflectionProbeUpdateMode["REFLECTION_PROBE_UPDATE_ONCE"] = RenderingServer::ReflectionProbeUpdateMode::REFLECTION_PROBE_UPDATE_ONCE;
    _ReflectionProbeUpdateMode["REFLECTION_PROBE_UPDATE_ALWAYS"] = RenderingServer::ReflectionProbeUpdateMode::REFLECTION_PROBE_UPDATE_ALWAYS;
    js_singleton["ReflectionProbeUpdateMode"] = _ReflectionProbeUpdateMode;
    qjs::Value _ReflectionProbeAmbientMode = context->newObject();
    _ReflectionProbeAmbientMode["REFLECTION_PROBE_AMBIENT_DISABLED"] = RenderingServer::ReflectionProbeAmbientMode::REFLECTION_PROBE_AMBIENT_DISABLED;
    _ReflectionProbeAmbientMode["REFLECTION_PROBE_AMBIENT_ENVIRONMENT"] = RenderingServer::ReflectionProbeAmbientMode::REFLECTION_PROBE_AMBIENT_ENVIRONMENT;
    _ReflectionProbeAmbientMode["REFLECTION_PROBE_AMBIENT_COLOR"] = RenderingServer::ReflectionProbeAmbientMode::REFLECTION_PROBE_AMBIENT_COLOR;
    js_singleton["ReflectionProbeAmbientMode"] = _ReflectionProbeAmbientMode;
    qjs::Value _DecalTexture = context->newObject();
    _DecalTexture["DECAL_TEXTURE_ALBEDO"] = RenderingServer::DecalTexture::DECAL_TEXTURE_ALBEDO;
    _DecalTexture["DECAL_TEXTURE_NORMAL"] = RenderingServer::DecalTexture::DECAL_TEXTURE_NORMAL;
    _DecalTexture["DECAL_TEXTURE_ORM"] = RenderingServer::DecalTexture::DECAL_TEXTURE_ORM;
    _DecalTexture["DECAL_TEXTURE_EMISSION"] = RenderingServer::DecalTexture::DECAL_TEXTURE_EMISSION;
    _DecalTexture["DECAL_TEXTURE_MAX"] = RenderingServer::DecalTexture::DECAL_TEXTURE_MAX;
    js_singleton["DecalTexture"] = _DecalTexture;
    qjs::Value _DecalFilter = context->newObject();
    _DecalFilter["DECAL_FILTER_NEAREST"] = RenderingServer::DecalFilter::DECAL_FILTER_NEAREST;
    _DecalFilter["DECAL_FILTER_LINEAR"] = RenderingServer::DecalFilter::DECAL_FILTER_LINEAR;
    _DecalFilter["DECAL_FILTER_NEAREST_MIPMAPS"] = RenderingServer::DecalFilter::DECAL_FILTER_NEAREST_MIPMAPS;
    _DecalFilter["DECAL_FILTER_LINEAR_MIPMAPS"] = RenderingServer::DecalFilter::DECAL_FILTER_LINEAR_MIPMAPS;
    _DecalFilter["DECAL_FILTER_NEAREST_MIPMAPS_ANISOTROPIC"] = RenderingServer::DecalFilter::DECAL_FILTER_NEAREST_MIPMAPS_ANISOTROPIC;
    _DecalFilter["DECAL_FILTER_LINEAR_MIPMAPS_ANISOTROPIC"] = RenderingServer::DecalFilter::DECAL_FILTER_LINEAR_MIPMAPS_ANISOTROPIC;
    js_singleton["DecalFilter"] = _DecalFilter;
    qjs::Value _VoxelGIQuality = context->newObject();
    _VoxelGIQuality["VOXEL_GI_QUALITY_LOW"] = RenderingServer::VoxelGIQuality::VOXEL_GI_QUALITY_LOW;
    _VoxelGIQuality["VOXEL_GI_QUALITY_HIGH"] = RenderingServer::VoxelGIQuality::VOXEL_GI_QUALITY_HIGH;
    js_singleton["VoxelGIQuality"] = _VoxelGIQuality;
    qjs::Value _ParticlesMode = context->newObject();
    _ParticlesMode["PARTICLES_MODE_2D"] = RenderingServer::ParticlesMode::PARTICLES_MODE_2D;
    _ParticlesMode["PARTICLES_MODE_3D"] = RenderingServer::ParticlesMode::PARTICLES_MODE_3D;
    js_singleton["ParticlesMode"] = _ParticlesMode;
    qjs::Value _ParticlesTransformAlign = context->newObject();
    _ParticlesTransformAlign["PARTICLES_TRANSFORM_ALIGN_DISABLED"] = RenderingServer::ParticlesTransformAlign::PARTICLES_TRANSFORM_ALIGN_DISABLED;
    _ParticlesTransformAlign["PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD"] = RenderingServer::ParticlesTransformAlign::PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD;
    _ParticlesTransformAlign["PARTICLES_TRANSFORM_ALIGN_Y_TO_VELOCITY"] = RenderingServer::ParticlesTransformAlign::PARTICLES_TRANSFORM_ALIGN_Y_TO_VELOCITY;
    _ParticlesTransformAlign["PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY"] = RenderingServer::ParticlesTransformAlign::PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY;
    js_singleton["ParticlesTransformAlign"] = _ParticlesTransformAlign;
    qjs::Value _ParticlesDrawOrder = context->newObject();
    _ParticlesDrawOrder["PARTICLES_DRAW_ORDER_INDEX"] = RenderingServer::ParticlesDrawOrder::PARTICLES_DRAW_ORDER_INDEX;
    _ParticlesDrawOrder["PARTICLES_DRAW_ORDER_LIFETIME"] = RenderingServer::ParticlesDrawOrder::PARTICLES_DRAW_ORDER_LIFETIME;
    _ParticlesDrawOrder["PARTICLES_DRAW_ORDER_REVERSE_LIFETIME"] = RenderingServer::ParticlesDrawOrder::PARTICLES_DRAW_ORDER_REVERSE_LIFETIME;
    _ParticlesDrawOrder["PARTICLES_DRAW_ORDER_VIEW_DEPTH"] = RenderingServer::ParticlesDrawOrder::PARTICLES_DRAW_ORDER_VIEW_DEPTH;
    js_singleton["ParticlesDrawOrder"] = _ParticlesDrawOrder;
    qjs::Value _ParticlesCollisionType = context->newObject();
    _ParticlesCollisionType["PARTICLES_COLLISION_TYPE_SPHERE_ATTRACT"] = RenderingServer::ParticlesCollisionType::PARTICLES_COLLISION_TYPE_SPHERE_ATTRACT;
    _ParticlesCollisionType["PARTICLES_COLLISION_TYPE_BOX_ATTRACT"] = RenderingServer::ParticlesCollisionType::PARTICLES_COLLISION_TYPE_BOX_ATTRACT;
    _ParticlesCollisionType["PARTICLES_COLLISION_TYPE_VECTOR_FIELD_ATTRACT"] = RenderingServer::ParticlesCollisionType::PARTICLES_COLLISION_TYPE_VECTOR_FIELD_ATTRACT;
    _ParticlesCollisionType["PARTICLES_COLLISION_TYPE_SPHERE_COLLIDE"] = RenderingServer::ParticlesCollisionType::PARTICLES_COLLISION_TYPE_SPHERE_COLLIDE;
    _ParticlesCollisionType["PARTICLES_COLLISION_TYPE_BOX_COLLIDE"] = RenderingServer::ParticlesCollisionType::PARTICLES_COLLISION_TYPE_BOX_COLLIDE;
    _ParticlesCollisionType["PARTICLES_COLLISION_TYPE_SDF_COLLIDE"] = RenderingServer::ParticlesCollisionType::PARTICLES_COLLISION_TYPE_SDF_COLLIDE;
    _ParticlesCollisionType["PARTICLES_COLLISION_TYPE_HEIGHTFIELD_COLLIDE"] = RenderingServer::ParticlesCollisionType::PARTICLES_COLLISION_TYPE_HEIGHTFIELD_COLLIDE;
    js_singleton["ParticlesCollisionType"] = _ParticlesCollisionType;
    qjs::Value _ParticlesCollisionHeightfieldResolution = context->newObject();
    _ParticlesCollisionHeightfieldResolution["PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_256"] = RenderingServer::ParticlesCollisionHeightfieldResolution::PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_256;
    _ParticlesCollisionHeightfieldResolution["PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_512"] = RenderingServer::ParticlesCollisionHeightfieldResolution::PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_512;
    _ParticlesCollisionHeightfieldResolution["PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_1024"] = RenderingServer::ParticlesCollisionHeightfieldResolution::PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_1024;
    _ParticlesCollisionHeightfieldResolution["PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_2048"] = RenderingServer::ParticlesCollisionHeightfieldResolution::PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_2048;
    _ParticlesCollisionHeightfieldResolution["PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_4096"] = RenderingServer::ParticlesCollisionHeightfieldResolution::PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_4096;
    _ParticlesCollisionHeightfieldResolution["PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_8192"] = RenderingServer::ParticlesCollisionHeightfieldResolution::PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_8192;
    _ParticlesCollisionHeightfieldResolution["PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_MAX"] = RenderingServer::ParticlesCollisionHeightfieldResolution::PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_MAX;
    js_singleton["ParticlesCollisionHeightfieldResolution"] = _ParticlesCollisionHeightfieldResolution;
    qjs::Value _FogVolumeShape = context->newObject();
    _FogVolumeShape["FOG_VOLUME_SHAPE_ELLIPSOID"] = RenderingServer::FogVolumeShape::FOG_VOLUME_SHAPE_ELLIPSOID;
    _FogVolumeShape["FOG_VOLUME_SHAPE_CONE"] = RenderingServer::FogVolumeShape::FOG_VOLUME_SHAPE_CONE;
    _FogVolumeShape["FOG_VOLUME_SHAPE_CYLINDER"] = RenderingServer::FogVolumeShape::FOG_VOLUME_SHAPE_CYLINDER;
    _FogVolumeShape["FOG_VOLUME_SHAPE_BOX"] = RenderingServer::FogVolumeShape::FOG_VOLUME_SHAPE_BOX;
    _FogVolumeShape["FOG_VOLUME_SHAPE_WORLD"] = RenderingServer::FogVolumeShape::FOG_VOLUME_SHAPE_WORLD;
    _FogVolumeShape["FOG_VOLUME_SHAPE_MAX"] = RenderingServer::FogVolumeShape::FOG_VOLUME_SHAPE_MAX;
    js_singleton["FogVolumeShape"] = _FogVolumeShape;
    qjs::Value _ViewportScaling3DMode = context->newObject();
    _ViewportScaling3DMode["VIEWPORT_SCALING_3D_MODE_BILINEAR"] = RenderingServer::ViewportScaling3DMode::VIEWPORT_SCALING_3D_MODE_BILINEAR;
    _ViewportScaling3DMode["VIEWPORT_SCALING_3D_MODE_FSR"] = RenderingServer::ViewportScaling3DMode::VIEWPORT_SCALING_3D_MODE_FSR;
    _ViewportScaling3DMode["VIEWPORT_SCALING_3D_MODE_FSR2"] = RenderingServer::ViewportScaling3DMode::VIEWPORT_SCALING_3D_MODE_FSR2;
    _ViewportScaling3DMode["VIEWPORT_SCALING_3D_MODE_MAX"] = RenderingServer::ViewportScaling3DMode::VIEWPORT_SCALING_3D_MODE_MAX;
    js_singleton["ViewportScaling3DMode"] = _ViewportScaling3DMode;
    qjs::Value _ViewportUpdateMode = context->newObject();
    _ViewportUpdateMode["VIEWPORT_UPDATE_DISABLED"] = RenderingServer::ViewportUpdateMode::VIEWPORT_UPDATE_DISABLED;
    _ViewportUpdateMode["VIEWPORT_UPDATE_ONCE"] = RenderingServer::ViewportUpdateMode::VIEWPORT_UPDATE_ONCE;
    _ViewportUpdateMode["VIEWPORT_UPDATE_WHEN_VISIBLE"] = RenderingServer::ViewportUpdateMode::VIEWPORT_UPDATE_WHEN_VISIBLE;
    _ViewportUpdateMode["VIEWPORT_UPDATE_WHEN_PARENT_VISIBLE"] = RenderingServer::ViewportUpdateMode::VIEWPORT_UPDATE_WHEN_PARENT_VISIBLE;
    _ViewportUpdateMode["VIEWPORT_UPDATE_ALWAYS"] = RenderingServer::ViewportUpdateMode::VIEWPORT_UPDATE_ALWAYS;
    js_singleton["ViewportUpdateMode"] = _ViewportUpdateMode;
    qjs::Value _ViewportClearMode = context->newObject();
    _ViewportClearMode["VIEWPORT_CLEAR_ALWAYS"] = RenderingServer::ViewportClearMode::VIEWPORT_CLEAR_ALWAYS;
    _ViewportClearMode["VIEWPORT_CLEAR_NEVER"] = RenderingServer::ViewportClearMode::VIEWPORT_CLEAR_NEVER;
    _ViewportClearMode["VIEWPORT_CLEAR_ONLY_NEXT_FRAME"] = RenderingServer::ViewportClearMode::VIEWPORT_CLEAR_ONLY_NEXT_FRAME;
    js_singleton["ViewportClearMode"] = _ViewportClearMode;
    qjs::Value _ViewportEnvironmentMode = context->newObject();
    _ViewportEnvironmentMode["VIEWPORT_ENVIRONMENT_DISABLED"] = RenderingServer::ViewportEnvironmentMode::VIEWPORT_ENVIRONMENT_DISABLED;
    _ViewportEnvironmentMode["VIEWPORT_ENVIRONMENT_ENABLED"] = RenderingServer::ViewportEnvironmentMode::VIEWPORT_ENVIRONMENT_ENABLED;
    _ViewportEnvironmentMode["VIEWPORT_ENVIRONMENT_INHERIT"] = RenderingServer::ViewportEnvironmentMode::VIEWPORT_ENVIRONMENT_INHERIT;
    _ViewportEnvironmentMode["VIEWPORT_ENVIRONMENT_MAX"] = RenderingServer::ViewportEnvironmentMode::VIEWPORT_ENVIRONMENT_MAX;
    js_singleton["ViewportEnvironmentMode"] = _ViewportEnvironmentMode;
    qjs::Value _ViewportSDFOversize = context->newObject();
    _ViewportSDFOversize["VIEWPORT_SDF_OVERSIZE_100_PERCENT"] = RenderingServer::ViewportSDFOversize::VIEWPORT_SDF_OVERSIZE_100_PERCENT;
    _ViewportSDFOversize["VIEWPORT_SDF_OVERSIZE_120_PERCENT"] = RenderingServer::ViewportSDFOversize::VIEWPORT_SDF_OVERSIZE_120_PERCENT;
    _ViewportSDFOversize["VIEWPORT_SDF_OVERSIZE_150_PERCENT"] = RenderingServer::ViewportSDFOversize::VIEWPORT_SDF_OVERSIZE_150_PERCENT;
    _ViewportSDFOversize["VIEWPORT_SDF_OVERSIZE_200_PERCENT"] = RenderingServer::ViewportSDFOversize::VIEWPORT_SDF_OVERSIZE_200_PERCENT;
    _ViewportSDFOversize["VIEWPORT_SDF_OVERSIZE_MAX"] = RenderingServer::ViewportSDFOversize::VIEWPORT_SDF_OVERSIZE_MAX;
    js_singleton["ViewportSDFOversize"] = _ViewportSDFOversize;
    qjs::Value _ViewportSDFScale = context->newObject();
    _ViewportSDFScale["VIEWPORT_SDF_SCALE_100_PERCENT"] = RenderingServer::ViewportSDFScale::VIEWPORT_SDF_SCALE_100_PERCENT;
    _ViewportSDFScale["VIEWPORT_SDF_SCALE_50_PERCENT"] = RenderingServer::ViewportSDFScale::VIEWPORT_SDF_SCALE_50_PERCENT;
    _ViewportSDFScale["VIEWPORT_SDF_SCALE_25_PERCENT"] = RenderingServer::ViewportSDFScale::VIEWPORT_SDF_SCALE_25_PERCENT;
    _ViewportSDFScale["VIEWPORT_SDF_SCALE_MAX"] = RenderingServer::ViewportSDFScale::VIEWPORT_SDF_SCALE_MAX;
    js_singleton["ViewportSDFScale"] = _ViewportSDFScale;
    qjs::Value _ViewportMSAA = context->newObject();
    _ViewportMSAA["VIEWPORT_MSAA_DISABLED"] = RenderingServer::ViewportMSAA::VIEWPORT_MSAA_DISABLED;
    _ViewportMSAA["VIEWPORT_MSAA_2X"] = RenderingServer::ViewportMSAA::VIEWPORT_MSAA_2X;
    _ViewportMSAA["VIEWPORT_MSAA_4X"] = RenderingServer::ViewportMSAA::VIEWPORT_MSAA_4X;
    _ViewportMSAA["VIEWPORT_MSAA_8X"] = RenderingServer::ViewportMSAA::VIEWPORT_MSAA_8X;
    _ViewportMSAA["VIEWPORT_MSAA_MAX"] = RenderingServer::ViewportMSAA::VIEWPORT_MSAA_MAX;
    js_singleton["ViewportMSAA"] = _ViewportMSAA;
    qjs::Value _ViewportScreenSpaceAA = context->newObject();
    _ViewportScreenSpaceAA["VIEWPORT_SCREEN_SPACE_AA_DISABLED"] = RenderingServer::ViewportScreenSpaceAA::VIEWPORT_SCREEN_SPACE_AA_DISABLED;
    _ViewportScreenSpaceAA["VIEWPORT_SCREEN_SPACE_AA_FXAA"] = RenderingServer::ViewportScreenSpaceAA::VIEWPORT_SCREEN_SPACE_AA_FXAA;
    _ViewportScreenSpaceAA["VIEWPORT_SCREEN_SPACE_AA_MAX"] = RenderingServer::ViewportScreenSpaceAA::VIEWPORT_SCREEN_SPACE_AA_MAX;
    js_singleton["ViewportScreenSpaceAA"] = _ViewportScreenSpaceAA;
    qjs::Value _ViewportOcclusionCullingBuildQuality = context->newObject();
    _ViewportOcclusionCullingBuildQuality["VIEWPORT_OCCLUSION_BUILD_QUALITY_LOW"] = RenderingServer::ViewportOcclusionCullingBuildQuality::VIEWPORT_OCCLUSION_BUILD_QUALITY_LOW;
    _ViewportOcclusionCullingBuildQuality["VIEWPORT_OCCLUSION_BUILD_QUALITY_MEDIUM"] = RenderingServer::ViewportOcclusionCullingBuildQuality::VIEWPORT_OCCLUSION_BUILD_QUALITY_MEDIUM;
    _ViewportOcclusionCullingBuildQuality["VIEWPORT_OCCLUSION_BUILD_QUALITY_HIGH"] = RenderingServer::ViewportOcclusionCullingBuildQuality::VIEWPORT_OCCLUSION_BUILD_QUALITY_HIGH;
    js_singleton["ViewportOcclusionCullingBuildQuality"] = _ViewportOcclusionCullingBuildQuality;
    qjs::Value _ViewportRenderInfo = context->newObject();
    _ViewportRenderInfo["VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME"] = RenderingServer::ViewportRenderInfo::VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME;
    _ViewportRenderInfo["VIEWPORT_RENDER_INFO_PRIMITIVES_IN_FRAME"] = RenderingServer::ViewportRenderInfo::VIEWPORT_RENDER_INFO_PRIMITIVES_IN_FRAME;
    _ViewportRenderInfo["VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME"] = RenderingServer::ViewportRenderInfo::VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME;
    _ViewportRenderInfo["VIEWPORT_RENDER_INFO_MAX"] = RenderingServer::ViewportRenderInfo::VIEWPORT_RENDER_INFO_MAX;
    js_singleton["ViewportRenderInfo"] = _ViewportRenderInfo;
    qjs::Value _ViewportRenderInfoType = context->newObject();
    _ViewportRenderInfoType["VIEWPORT_RENDER_INFO_TYPE_VISIBLE"] = RenderingServer::ViewportRenderInfoType::VIEWPORT_RENDER_INFO_TYPE_VISIBLE;
    _ViewportRenderInfoType["VIEWPORT_RENDER_INFO_TYPE_SHADOW"] = RenderingServer::ViewportRenderInfoType::VIEWPORT_RENDER_INFO_TYPE_SHADOW;
    _ViewportRenderInfoType["VIEWPORT_RENDER_INFO_TYPE_CANVAS"] = RenderingServer::ViewportRenderInfoType::VIEWPORT_RENDER_INFO_TYPE_CANVAS;
    _ViewportRenderInfoType["VIEWPORT_RENDER_INFO_TYPE_MAX"] = RenderingServer::ViewportRenderInfoType::VIEWPORT_RENDER_INFO_TYPE_MAX;
    js_singleton["ViewportRenderInfoType"] = _ViewportRenderInfoType;
    qjs::Value _ViewportDebugDraw = context->newObject();
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_DISABLED"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_DISABLED;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_UNSHADED"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_UNSHADED;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_LIGHTING"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_LIGHTING;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_OVERDRAW"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_OVERDRAW;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_WIREFRAME"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_WIREFRAME;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_NORMAL_BUFFER"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_NORMAL_BUFFER;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_VOXEL_GI_ALBEDO"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_VOXEL_GI_ALBEDO;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_VOXEL_GI_LIGHTING"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_VOXEL_GI_LIGHTING;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_VOXEL_GI_EMISSION"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_VOXEL_GI_EMISSION;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_SHADOW_ATLAS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_SHADOW_ATLAS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_SCENE_LUMINANCE"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_SCENE_LUMINANCE;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_SSAO"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_SSAO;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_SSIL"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_SSIL;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_PSSM_SPLITS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_PSSM_SPLITS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_DECAL_ATLAS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_DECAL_ATLAS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_SDFGI"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_SDFGI;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_SDFGI_PROBES"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_SDFGI_PROBES;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_GI_BUFFER"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_GI_BUFFER;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_DISABLE_LOD"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_DISABLE_LOD;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_CLUSTER_OMNI_LIGHTS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_CLUSTER_OMNI_LIGHTS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_CLUSTER_SPOT_LIGHTS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_CLUSTER_SPOT_LIGHTS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_CLUSTER_DECALS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_CLUSTER_DECALS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_CLUSTER_REFLECTION_PROBES"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_CLUSTER_REFLECTION_PROBES;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_OCCLUDERS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_OCCLUDERS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_MOTION_VECTORS"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_MOTION_VECTORS;
    _ViewportDebugDraw["VIEWPORT_DEBUG_DRAW_INTERNAL_BUFFER"] = RenderingServer::ViewportDebugDraw::VIEWPORT_DEBUG_DRAW_INTERNAL_BUFFER;
    js_singleton["ViewportDebugDraw"] = _ViewportDebugDraw;
    qjs::Value _ViewportVRSMode = context->newObject();
    _ViewportVRSMode["VIEWPORT_VRS_DISABLED"] = RenderingServer::ViewportVRSMode::VIEWPORT_VRS_DISABLED;
    _ViewportVRSMode["VIEWPORT_VRS_TEXTURE"] = RenderingServer::ViewportVRSMode::VIEWPORT_VRS_TEXTURE;
    _ViewportVRSMode["VIEWPORT_VRS_XR"] = RenderingServer::ViewportVRSMode::VIEWPORT_VRS_XR;
    _ViewportVRSMode["VIEWPORT_VRS_MAX"] = RenderingServer::ViewportVRSMode::VIEWPORT_VRS_MAX;
    js_singleton["ViewportVRSMode"] = _ViewportVRSMode;
    qjs::Value _ViewportVRSUpdateMode = context->newObject();
    _ViewportVRSUpdateMode["VIEWPORT_VRS_UPDATE_DISABLED"] = RenderingServer::ViewportVRSUpdateMode::VIEWPORT_VRS_UPDATE_DISABLED;
    _ViewportVRSUpdateMode["VIEWPORT_VRS_UPDATE_ONCE"] = RenderingServer::ViewportVRSUpdateMode::VIEWPORT_VRS_UPDATE_ONCE;
    _ViewportVRSUpdateMode["VIEWPORT_VRS_UPDATE_ALWAYS"] = RenderingServer::ViewportVRSUpdateMode::VIEWPORT_VRS_UPDATE_ALWAYS;
    _ViewportVRSUpdateMode["VIEWPORT_VRS_UPDATE_MAX"] = RenderingServer::ViewportVRSUpdateMode::VIEWPORT_VRS_UPDATE_MAX;
    js_singleton["ViewportVRSUpdateMode"] = _ViewportVRSUpdateMode;
    qjs::Value _SkyMode = context->newObject();
    _SkyMode["SKY_MODE_AUTOMATIC"] = RenderingServer::SkyMode::SKY_MODE_AUTOMATIC;
    _SkyMode["SKY_MODE_QUALITY"] = RenderingServer::SkyMode::SKY_MODE_QUALITY;
    _SkyMode["SKY_MODE_INCREMENTAL"] = RenderingServer::SkyMode::SKY_MODE_INCREMENTAL;
    _SkyMode["SKY_MODE_REALTIME"] = RenderingServer::SkyMode::SKY_MODE_REALTIME;
    js_singleton["SkyMode"] = _SkyMode;
    qjs::Value _CompositorEffectFlags = context->newObject();
    _CompositorEffectFlags["COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_COLOR"] = RenderingServer::CompositorEffectFlags::COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_COLOR;
    _CompositorEffectFlags["COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_DEPTH"] = RenderingServer::CompositorEffectFlags::COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_DEPTH;
    _CompositorEffectFlags["COMPOSITOR_EFFECT_FLAG_NEEDS_MOTION_VECTORS"] = RenderingServer::CompositorEffectFlags::COMPOSITOR_EFFECT_FLAG_NEEDS_MOTION_VECTORS;
    _CompositorEffectFlags["COMPOSITOR_EFFECT_FLAG_NEEDS_ROUGHNESS"] = RenderingServer::CompositorEffectFlags::COMPOSITOR_EFFECT_FLAG_NEEDS_ROUGHNESS;
    _CompositorEffectFlags["COMPOSITOR_EFFECT_FLAG_NEEDS_SEPARATE_SPECULAR"] = RenderingServer::CompositorEffectFlags::COMPOSITOR_EFFECT_FLAG_NEEDS_SEPARATE_SPECULAR;
    js_singleton["CompositorEffectFlags"] = _CompositorEffectFlags;
    qjs::Value _CompositorEffectCallbackType = context->newObject();
    _CompositorEffectCallbackType["COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_OPAQUE"] = RenderingServer::CompositorEffectCallbackType::COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_OPAQUE;
    _CompositorEffectCallbackType["COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_OPAQUE"] = RenderingServer::CompositorEffectCallbackType::COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_OPAQUE;
    _CompositorEffectCallbackType["COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_SKY"] = RenderingServer::CompositorEffectCallbackType::COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_SKY;
    _CompositorEffectCallbackType["COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT"] = RenderingServer::CompositorEffectCallbackType::COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT;
    _CompositorEffectCallbackType["COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_TRANSPARENT"] = RenderingServer::CompositorEffectCallbackType::COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_TRANSPARENT;
    _CompositorEffectCallbackType["COMPOSITOR_EFFECT_CALLBACK_TYPE_ANY"] = RenderingServer::CompositorEffectCallbackType::COMPOSITOR_EFFECT_CALLBACK_TYPE_ANY;
    js_singleton["CompositorEffectCallbackType"] = _CompositorEffectCallbackType;
    qjs::Value _EnvironmentBG = context->newObject();
    _EnvironmentBG["ENV_BG_CLEAR_COLOR"] = RenderingServer::EnvironmentBG::ENV_BG_CLEAR_COLOR;
    _EnvironmentBG["ENV_BG_COLOR"] = RenderingServer::EnvironmentBG::ENV_BG_COLOR;
    _EnvironmentBG["ENV_BG_SKY"] = RenderingServer::EnvironmentBG::ENV_BG_SKY;
    _EnvironmentBG["ENV_BG_CANVAS"] = RenderingServer::EnvironmentBG::ENV_BG_CANVAS;
    _EnvironmentBG["ENV_BG_KEEP"] = RenderingServer::EnvironmentBG::ENV_BG_KEEP;
    _EnvironmentBG["ENV_BG_CAMERA_FEED"] = RenderingServer::EnvironmentBG::ENV_BG_CAMERA_FEED;
    _EnvironmentBG["ENV_BG_MAX"] = RenderingServer::EnvironmentBG::ENV_BG_MAX;
    js_singleton["EnvironmentBG"] = _EnvironmentBG;
    qjs::Value _EnvironmentAmbientSource = context->newObject();
    _EnvironmentAmbientSource["ENV_AMBIENT_SOURCE_BG"] = RenderingServer::EnvironmentAmbientSource::ENV_AMBIENT_SOURCE_BG;
    _EnvironmentAmbientSource["ENV_AMBIENT_SOURCE_DISABLED"] = RenderingServer::EnvironmentAmbientSource::ENV_AMBIENT_SOURCE_DISABLED;
    _EnvironmentAmbientSource["ENV_AMBIENT_SOURCE_COLOR"] = RenderingServer::EnvironmentAmbientSource::ENV_AMBIENT_SOURCE_COLOR;
    _EnvironmentAmbientSource["ENV_AMBIENT_SOURCE_SKY"] = RenderingServer::EnvironmentAmbientSource::ENV_AMBIENT_SOURCE_SKY;
    js_singleton["EnvironmentAmbientSource"] = _EnvironmentAmbientSource;
    qjs::Value _EnvironmentReflectionSource = context->newObject();
    _EnvironmentReflectionSource["ENV_REFLECTION_SOURCE_BG"] = RenderingServer::EnvironmentReflectionSource::ENV_REFLECTION_SOURCE_BG;
    _EnvironmentReflectionSource["ENV_REFLECTION_SOURCE_DISABLED"] = RenderingServer::EnvironmentReflectionSource::ENV_REFLECTION_SOURCE_DISABLED;
    _EnvironmentReflectionSource["ENV_REFLECTION_SOURCE_SKY"] = RenderingServer::EnvironmentReflectionSource::ENV_REFLECTION_SOURCE_SKY;
    js_singleton["EnvironmentReflectionSource"] = _EnvironmentReflectionSource;
    qjs::Value _EnvironmentGlowBlendMode = context->newObject();
    _EnvironmentGlowBlendMode["ENV_GLOW_BLEND_MODE_ADDITIVE"] = RenderingServer::EnvironmentGlowBlendMode::ENV_GLOW_BLEND_MODE_ADDITIVE;
    _EnvironmentGlowBlendMode["ENV_GLOW_BLEND_MODE_SCREEN"] = RenderingServer::EnvironmentGlowBlendMode::ENV_GLOW_BLEND_MODE_SCREEN;
    _EnvironmentGlowBlendMode["ENV_GLOW_BLEND_MODE_SOFTLIGHT"] = RenderingServer::EnvironmentGlowBlendMode::ENV_GLOW_BLEND_MODE_SOFTLIGHT;
    _EnvironmentGlowBlendMode["ENV_GLOW_BLEND_MODE_REPLACE"] = RenderingServer::EnvironmentGlowBlendMode::ENV_GLOW_BLEND_MODE_REPLACE;
    _EnvironmentGlowBlendMode["ENV_GLOW_BLEND_MODE_MIX"] = RenderingServer::EnvironmentGlowBlendMode::ENV_GLOW_BLEND_MODE_MIX;
    js_singleton["EnvironmentGlowBlendMode"] = _EnvironmentGlowBlendMode;
    qjs::Value _EnvironmentFogMode = context->newObject();
    _EnvironmentFogMode["ENV_FOG_MODE_EXPONENTIAL"] = RenderingServer::EnvironmentFogMode::ENV_FOG_MODE_EXPONENTIAL;
    _EnvironmentFogMode["ENV_FOG_MODE_DEPTH"] = RenderingServer::EnvironmentFogMode::ENV_FOG_MODE_DEPTH;
    js_singleton["EnvironmentFogMode"] = _EnvironmentFogMode;
    qjs::Value _EnvironmentToneMapper = context->newObject();
    _EnvironmentToneMapper["ENV_TONE_MAPPER_LINEAR"] = RenderingServer::EnvironmentToneMapper::ENV_TONE_MAPPER_LINEAR;
    _EnvironmentToneMapper["ENV_TONE_MAPPER_REINHARD"] = RenderingServer::EnvironmentToneMapper::ENV_TONE_MAPPER_REINHARD;
    _EnvironmentToneMapper["ENV_TONE_MAPPER_FILMIC"] = RenderingServer::EnvironmentToneMapper::ENV_TONE_MAPPER_FILMIC;
    _EnvironmentToneMapper["ENV_TONE_MAPPER_ACES"] = RenderingServer::EnvironmentToneMapper::ENV_TONE_MAPPER_ACES;
    js_singleton["EnvironmentToneMapper"] = _EnvironmentToneMapper;
    qjs::Value _EnvironmentSSRRoughnessQuality = context->newObject();
    _EnvironmentSSRRoughnessQuality["ENV_SSR_ROUGHNESS_QUALITY_DISABLED"] = RenderingServer::EnvironmentSSRRoughnessQuality::ENV_SSR_ROUGHNESS_QUALITY_DISABLED;
    _EnvironmentSSRRoughnessQuality["ENV_SSR_ROUGHNESS_QUALITY_LOW"] = RenderingServer::EnvironmentSSRRoughnessQuality::ENV_SSR_ROUGHNESS_QUALITY_LOW;
    _EnvironmentSSRRoughnessQuality["ENV_SSR_ROUGHNESS_QUALITY_MEDIUM"] = RenderingServer::EnvironmentSSRRoughnessQuality::ENV_SSR_ROUGHNESS_QUALITY_MEDIUM;
    _EnvironmentSSRRoughnessQuality["ENV_SSR_ROUGHNESS_QUALITY_HIGH"] = RenderingServer::EnvironmentSSRRoughnessQuality::ENV_SSR_ROUGHNESS_QUALITY_HIGH;
    js_singleton["EnvironmentSSRRoughnessQuality"] = _EnvironmentSSRRoughnessQuality;
    qjs::Value _EnvironmentSSAOQuality = context->newObject();
    _EnvironmentSSAOQuality["ENV_SSAO_QUALITY_VERY_LOW"] = RenderingServer::EnvironmentSSAOQuality::ENV_SSAO_QUALITY_VERY_LOW;
    _EnvironmentSSAOQuality["ENV_SSAO_QUALITY_LOW"] = RenderingServer::EnvironmentSSAOQuality::ENV_SSAO_QUALITY_LOW;
    _EnvironmentSSAOQuality["ENV_SSAO_QUALITY_MEDIUM"] = RenderingServer::EnvironmentSSAOQuality::ENV_SSAO_QUALITY_MEDIUM;
    _EnvironmentSSAOQuality["ENV_SSAO_QUALITY_HIGH"] = RenderingServer::EnvironmentSSAOQuality::ENV_SSAO_QUALITY_HIGH;
    _EnvironmentSSAOQuality["ENV_SSAO_QUALITY_ULTRA"] = RenderingServer::EnvironmentSSAOQuality::ENV_SSAO_QUALITY_ULTRA;
    js_singleton["EnvironmentSSAOQuality"] = _EnvironmentSSAOQuality;
    qjs::Value _EnvironmentSSILQuality = context->newObject();
    _EnvironmentSSILQuality["ENV_SSIL_QUALITY_VERY_LOW"] = RenderingServer::EnvironmentSSILQuality::ENV_SSIL_QUALITY_VERY_LOW;
    _EnvironmentSSILQuality["ENV_SSIL_QUALITY_LOW"] = RenderingServer::EnvironmentSSILQuality::ENV_SSIL_QUALITY_LOW;
    _EnvironmentSSILQuality["ENV_SSIL_QUALITY_MEDIUM"] = RenderingServer::EnvironmentSSILQuality::ENV_SSIL_QUALITY_MEDIUM;
    _EnvironmentSSILQuality["ENV_SSIL_QUALITY_HIGH"] = RenderingServer::EnvironmentSSILQuality::ENV_SSIL_QUALITY_HIGH;
    _EnvironmentSSILQuality["ENV_SSIL_QUALITY_ULTRA"] = RenderingServer::EnvironmentSSILQuality::ENV_SSIL_QUALITY_ULTRA;
    js_singleton["EnvironmentSSILQuality"] = _EnvironmentSSILQuality;
    qjs::Value _EnvironmentSDFGIYScale = context->newObject();
    _EnvironmentSDFGIYScale["ENV_SDFGI_Y_SCALE_50_PERCENT"] = RenderingServer::EnvironmentSDFGIYScale::ENV_SDFGI_Y_SCALE_50_PERCENT;
    _EnvironmentSDFGIYScale["ENV_SDFGI_Y_SCALE_75_PERCENT"] = RenderingServer::EnvironmentSDFGIYScale::ENV_SDFGI_Y_SCALE_75_PERCENT;
    _EnvironmentSDFGIYScale["ENV_SDFGI_Y_SCALE_100_PERCENT"] = RenderingServer::EnvironmentSDFGIYScale::ENV_SDFGI_Y_SCALE_100_PERCENT;
    js_singleton["EnvironmentSDFGIYScale"] = _EnvironmentSDFGIYScale;
    qjs::Value _EnvironmentSDFGIRayCount = context->newObject();
    _EnvironmentSDFGIRayCount["ENV_SDFGI_RAY_COUNT_4"] = RenderingServer::EnvironmentSDFGIRayCount::ENV_SDFGI_RAY_COUNT_4;
    _EnvironmentSDFGIRayCount["ENV_SDFGI_RAY_COUNT_8"] = RenderingServer::EnvironmentSDFGIRayCount::ENV_SDFGI_RAY_COUNT_8;
    _EnvironmentSDFGIRayCount["ENV_SDFGI_RAY_COUNT_16"] = RenderingServer::EnvironmentSDFGIRayCount::ENV_SDFGI_RAY_COUNT_16;
    _EnvironmentSDFGIRayCount["ENV_SDFGI_RAY_COUNT_32"] = RenderingServer::EnvironmentSDFGIRayCount::ENV_SDFGI_RAY_COUNT_32;
    _EnvironmentSDFGIRayCount["ENV_SDFGI_RAY_COUNT_64"] = RenderingServer::EnvironmentSDFGIRayCount::ENV_SDFGI_RAY_COUNT_64;
    _EnvironmentSDFGIRayCount["ENV_SDFGI_RAY_COUNT_96"] = RenderingServer::EnvironmentSDFGIRayCount::ENV_SDFGI_RAY_COUNT_96;
    _EnvironmentSDFGIRayCount["ENV_SDFGI_RAY_COUNT_128"] = RenderingServer::EnvironmentSDFGIRayCount::ENV_SDFGI_RAY_COUNT_128;
    _EnvironmentSDFGIRayCount["ENV_SDFGI_RAY_COUNT_MAX"] = RenderingServer::EnvironmentSDFGIRayCount::ENV_SDFGI_RAY_COUNT_MAX;
    js_singleton["EnvironmentSDFGIRayCount"] = _EnvironmentSDFGIRayCount;
    qjs::Value _EnvironmentSDFGIFramesToConverge = context->newObject();
    _EnvironmentSDFGIFramesToConverge["ENV_SDFGI_CONVERGE_IN_5_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToConverge::ENV_SDFGI_CONVERGE_IN_5_FRAMES;
    _EnvironmentSDFGIFramesToConverge["ENV_SDFGI_CONVERGE_IN_10_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToConverge::ENV_SDFGI_CONVERGE_IN_10_FRAMES;
    _EnvironmentSDFGIFramesToConverge["ENV_SDFGI_CONVERGE_IN_15_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToConverge::ENV_SDFGI_CONVERGE_IN_15_FRAMES;
    _EnvironmentSDFGIFramesToConverge["ENV_SDFGI_CONVERGE_IN_20_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToConverge::ENV_SDFGI_CONVERGE_IN_20_FRAMES;
    _EnvironmentSDFGIFramesToConverge["ENV_SDFGI_CONVERGE_IN_25_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToConverge::ENV_SDFGI_CONVERGE_IN_25_FRAMES;
    _EnvironmentSDFGIFramesToConverge["ENV_SDFGI_CONVERGE_IN_30_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToConverge::ENV_SDFGI_CONVERGE_IN_30_FRAMES;
    _EnvironmentSDFGIFramesToConverge["ENV_SDFGI_CONVERGE_MAX"] = RenderingServer::EnvironmentSDFGIFramesToConverge::ENV_SDFGI_CONVERGE_MAX;
    js_singleton["EnvironmentSDFGIFramesToConverge"] = _EnvironmentSDFGIFramesToConverge;
    qjs::Value _EnvironmentSDFGIFramesToUpdateLight = context->newObject();
    _EnvironmentSDFGIFramesToUpdateLight["ENV_SDFGI_UPDATE_LIGHT_IN_1_FRAME"] = RenderingServer::EnvironmentSDFGIFramesToUpdateLight::ENV_SDFGI_UPDATE_LIGHT_IN_1_FRAME;
    _EnvironmentSDFGIFramesToUpdateLight["ENV_SDFGI_UPDATE_LIGHT_IN_2_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToUpdateLight::ENV_SDFGI_UPDATE_LIGHT_IN_2_FRAMES;
    _EnvironmentSDFGIFramesToUpdateLight["ENV_SDFGI_UPDATE_LIGHT_IN_4_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToUpdateLight::ENV_SDFGI_UPDATE_LIGHT_IN_4_FRAMES;
    _EnvironmentSDFGIFramesToUpdateLight["ENV_SDFGI_UPDATE_LIGHT_IN_8_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToUpdateLight::ENV_SDFGI_UPDATE_LIGHT_IN_8_FRAMES;
    _EnvironmentSDFGIFramesToUpdateLight["ENV_SDFGI_UPDATE_LIGHT_IN_16_FRAMES"] = RenderingServer::EnvironmentSDFGIFramesToUpdateLight::ENV_SDFGI_UPDATE_LIGHT_IN_16_FRAMES;
    _EnvironmentSDFGIFramesToUpdateLight["ENV_SDFGI_UPDATE_LIGHT_MAX"] = RenderingServer::EnvironmentSDFGIFramesToUpdateLight::ENV_SDFGI_UPDATE_LIGHT_MAX;
    js_singleton["EnvironmentSDFGIFramesToUpdateLight"] = _EnvironmentSDFGIFramesToUpdateLight;
    qjs::Value _SubSurfaceScatteringQuality = context->newObject();
    _SubSurfaceScatteringQuality["SUB_SURFACE_SCATTERING_QUALITY_DISABLED"] = RenderingServer::SubSurfaceScatteringQuality::SUB_SURFACE_SCATTERING_QUALITY_DISABLED;
    _SubSurfaceScatteringQuality["SUB_SURFACE_SCATTERING_QUALITY_LOW"] = RenderingServer::SubSurfaceScatteringQuality::SUB_SURFACE_SCATTERING_QUALITY_LOW;
    _SubSurfaceScatteringQuality["SUB_SURFACE_SCATTERING_QUALITY_MEDIUM"] = RenderingServer::SubSurfaceScatteringQuality::SUB_SURFACE_SCATTERING_QUALITY_MEDIUM;
    _SubSurfaceScatteringQuality["SUB_SURFACE_SCATTERING_QUALITY_HIGH"] = RenderingServer::SubSurfaceScatteringQuality::SUB_SURFACE_SCATTERING_QUALITY_HIGH;
    js_singleton["SubSurfaceScatteringQuality"] = _SubSurfaceScatteringQuality;
    qjs::Value _DOFBokehShape = context->newObject();
    _DOFBokehShape["DOF_BOKEH_BOX"] = RenderingServer::DOFBokehShape::DOF_BOKEH_BOX;
    _DOFBokehShape["DOF_BOKEH_HEXAGON"] = RenderingServer::DOFBokehShape::DOF_BOKEH_HEXAGON;
    _DOFBokehShape["DOF_BOKEH_CIRCLE"] = RenderingServer::DOFBokehShape::DOF_BOKEH_CIRCLE;
    js_singleton["DOFBokehShape"] = _DOFBokehShape;
    qjs::Value _DOFBlurQuality = context->newObject();
    _DOFBlurQuality["DOF_BLUR_QUALITY_VERY_LOW"] = RenderingServer::DOFBlurQuality::DOF_BLUR_QUALITY_VERY_LOW;
    _DOFBlurQuality["DOF_BLUR_QUALITY_LOW"] = RenderingServer::DOFBlurQuality::DOF_BLUR_QUALITY_LOW;
    _DOFBlurQuality["DOF_BLUR_QUALITY_MEDIUM"] = RenderingServer::DOFBlurQuality::DOF_BLUR_QUALITY_MEDIUM;
    _DOFBlurQuality["DOF_BLUR_QUALITY_HIGH"] = RenderingServer::DOFBlurQuality::DOF_BLUR_QUALITY_HIGH;
    js_singleton["DOFBlurQuality"] = _DOFBlurQuality;
    qjs::Value _InstanceType = context->newObject();
    _InstanceType["INSTANCE_NONE"] = RenderingServer::InstanceType::INSTANCE_NONE;
    _InstanceType["INSTANCE_MESH"] = RenderingServer::InstanceType::INSTANCE_MESH;
    _InstanceType["INSTANCE_MULTIMESH"] = RenderingServer::InstanceType::INSTANCE_MULTIMESH;
    _InstanceType["INSTANCE_PARTICLES"] = RenderingServer::InstanceType::INSTANCE_PARTICLES;
    _InstanceType["INSTANCE_PARTICLES_COLLISION"] = RenderingServer::InstanceType::INSTANCE_PARTICLES_COLLISION;
    _InstanceType["INSTANCE_LIGHT"] = RenderingServer::InstanceType::INSTANCE_LIGHT;
    _InstanceType["INSTANCE_REFLECTION_PROBE"] = RenderingServer::InstanceType::INSTANCE_REFLECTION_PROBE;
    _InstanceType["INSTANCE_DECAL"] = RenderingServer::InstanceType::INSTANCE_DECAL;
    _InstanceType["INSTANCE_VOXEL_GI"] = RenderingServer::InstanceType::INSTANCE_VOXEL_GI;
    _InstanceType["INSTANCE_LIGHTMAP"] = RenderingServer::InstanceType::INSTANCE_LIGHTMAP;
    _InstanceType["INSTANCE_OCCLUDER"] = RenderingServer::InstanceType::INSTANCE_OCCLUDER;
    _InstanceType["INSTANCE_VISIBLITY_NOTIFIER"] = RenderingServer::InstanceType::INSTANCE_VISIBLITY_NOTIFIER;
    _InstanceType["INSTANCE_FOG_VOLUME"] = RenderingServer::InstanceType::INSTANCE_FOG_VOLUME;
    _InstanceType["INSTANCE_MAX"] = RenderingServer::InstanceType::INSTANCE_MAX;
    _InstanceType["INSTANCE_GEOMETRY_MASK"] = RenderingServer::InstanceType::INSTANCE_GEOMETRY_MASK;
    js_singleton["InstanceType"] = _InstanceType;
    qjs::Value _InstanceFlags = context->newObject();
    _InstanceFlags["INSTANCE_FLAG_USE_BAKED_LIGHT"] = RenderingServer::InstanceFlags::INSTANCE_FLAG_USE_BAKED_LIGHT;
    _InstanceFlags["INSTANCE_FLAG_USE_DYNAMIC_GI"] = RenderingServer::InstanceFlags::INSTANCE_FLAG_USE_DYNAMIC_GI;
    _InstanceFlags["INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE"] = RenderingServer::InstanceFlags::INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE;
    _InstanceFlags["INSTANCE_FLAG_IGNORE_OCCLUSION_CULLING"] = RenderingServer::InstanceFlags::INSTANCE_FLAG_IGNORE_OCCLUSION_CULLING;
    _InstanceFlags["INSTANCE_FLAG_MAX"] = RenderingServer::InstanceFlags::INSTANCE_FLAG_MAX;
    js_singleton["InstanceFlags"] = _InstanceFlags;
    qjs::Value _ShadowCastingSetting = context->newObject();
    _ShadowCastingSetting["SHADOW_CASTING_SETTING_OFF"] = RenderingServer::ShadowCastingSetting::SHADOW_CASTING_SETTING_OFF;
    _ShadowCastingSetting["SHADOW_CASTING_SETTING_ON"] = RenderingServer::ShadowCastingSetting::SHADOW_CASTING_SETTING_ON;
    _ShadowCastingSetting["SHADOW_CASTING_SETTING_DOUBLE_SIDED"] = RenderingServer::ShadowCastingSetting::SHADOW_CASTING_SETTING_DOUBLE_SIDED;
    _ShadowCastingSetting["SHADOW_CASTING_SETTING_SHADOWS_ONLY"] = RenderingServer::ShadowCastingSetting::SHADOW_CASTING_SETTING_SHADOWS_ONLY;
    js_singleton["ShadowCastingSetting"] = _ShadowCastingSetting;
    qjs::Value _VisibilityRangeFadeMode = context->newObject();
    _VisibilityRangeFadeMode["VISIBILITY_RANGE_FADE_DISABLED"] = RenderingServer::VisibilityRangeFadeMode::VISIBILITY_RANGE_FADE_DISABLED;
    _VisibilityRangeFadeMode["VISIBILITY_RANGE_FADE_SELF"] = RenderingServer::VisibilityRangeFadeMode::VISIBILITY_RANGE_FADE_SELF;
    _VisibilityRangeFadeMode["VISIBILITY_RANGE_FADE_DEPENDENCIES"] = RenderingServer::VisibilityRangeFadeMode::VISIBILITY_RANGE_FADE_DEPENDENCIES;
    js_singleton["VisibilityRangeFadeMode"] = _VisibilityRangeFadeMode;
    qjs::Value _BakeChannels = context->newObject();
    _BakeChannels["BAKE_CHANNEL_ALBEDO_ALPHA"] = RenderingServer::BakeChannels::BAKE_CHANNEL_ALBEDO_ALPHA;
    _BakeChannels["BAKE_CHANNEL_NORMAL"] = RenderingServer::BakeChannels::BAKE_CHANNEL_NORMAL;
    _BakeChannels["BAKE_CHANNEL_ORM"] = RenderingServer::BakeChannels::BAKE_CHANNEL_ORM;
    _BakeChannels["BAKE_CHANNEL_EMISSION"] = RenderingServer::BakeChannels::BAKE_CHANNEL_EMISSION;
    js_singleton["BakeChannels"] = _BakeChannels;
    qjs::Value _CanvasTextureChannel = context->newObject();
    _CanvasTextureChannel["CANVAS_TEXTURE_CHANNEL_DIFFUSE"] = RenderingServer::CanvasTextureChannel::CANVAS_TEXTURE_CHANNEL_DIFFUSE;
    _CanvasTextureChannel["CANVAS_TEXTURE_CHANNEL_NORMAL"] = RenderingServer::CanvasTextureChannel::CANVAS_TEXTURE_CHANNEL_NORMAL;
    _CanvasTextureChannel["CANVAS_TEXTURE_CHANNEL_SPECULAR"] = RenderingServer::CanvasTextureChannel::CANVAS_TEXTURE_CHANNEL_SPECULAR;
    js_singleton["CanvasTextureChannel"] = _CanvasTextureChannel;
    qjs::Value _NinePatchAxisMode = context->newObject();
    _NinePatchAxisMode["NINE_PATCH_STRETCH"] = RenderingServer::NinePatchAxisMode::NINE_PATCH_STRETCH;
    _NinePatchAxisMode["NINE_PATCH_TILE"] = RenderingServer::NinePatchAxisMode::NINE_PATCH_TILE;
    _NinePatchAxisMode["NINE_PATCH_TILE_FIT"] = RenderingServer::NinePatchAxisMode::NINE_PATCH_TILE_FIT;
    js_singleton["NinePatchAxisMode"] = _NinePatchAxisMode;
    qjs::Value _CanvasItemTextureFilter = context->newObject();
    _CanvasItemTextureFilter["CANVAS_ITEM_TEXTURE_FILTER_DEFAULT"] = RenderingServer::CanvasItemTextureFilter::CANVAS_ITEM_TEXTURE_FILTER_DEFAULT;
    _CanvasItemTextureFilter["CANVAS_ITEM_TEXTURE_FILTER_NEAREST"] = RenderingServer::CanvasItemTextureFilter::CANVAS_ITEM_TEXTURE_FILTER_NEAREST;
    _CanvasItemTextureFilter["CANVAS_ITEM_TEXTURE_FILTER_LINEAR"] = RenderingServer::CanvasItemTextureFilter::CANVAS_ITEM_TEXTURE_FILTER_LINEAR;
    _CanvasItemTextureFilter["CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS"] = RenderingServer::CanvasItemTextureFilter::CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS;
    _CanvasItemTextureFilter["CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS"] = RenderingServer::CanvasItemTextureFilter::CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS;
    _CanvasItemTextureFilter["CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC"] = RenderingServer::CanvasItemTextureFilter::CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC;
    _CanvasItemTextureFilter["CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC"] = RenderingServer::CanvasItemTextureFilter::CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC;
    _CanvasItemTextureFilter["CANVAS_ITEM_TEXTURE_FILTER_MAX"] = RenderingServer::CanvasItemTextureFilter::CANVAS_ITEM_TEXTURE_FILTER_MAX;
    js_singleton["CanvasItemTextureFilter"] = _CanvasItemTextureFilter;
    qjs::Value _CanvasItemTextureRepeat = context->newObject();
    _CanvasItemTextureRepeat["CANVAS_ITEM_TEXTURE_REPEAT_DEFAULT"] = RenderingServer::CanvasItemTextureRepeat::CANVAS_ITEM_TEXTURE_REPEAT_DEFAULT;
    _CanvasItemTextureRepeat["CANVAS_ITEM_TEXTURE_REPEAT_DISABLED"] = RenderingServer::CanvasItemTextureRepeat::CANVAS_ITEM_TEXTURE_REPEAT_DISABLED;
    _CanvasItemTextureRepeat["CANVAS_ITEM_TEXTURE_REPEAT_ENABLED"] = RenderingServer::CanvasItemTextureRepeat::CANVAS_ITEM_TEXTURE_REPEAT_ENABLED;
    _CanvasItemTextureRepeat["CANVAS_ITEM_TEXTURE_REPEAT_MIRROR"] = RenderingServer::CanvasItemTextureRepeat::CANVAS_ITEM_TEXTURE_REPEAT_MIRROR;
    _CanvasItemTextureRepeat["CANVAS_ITEM_TEXTURE_REPEAT_MAX"] = RenderingServer::CanvasItemTextureRepeat::CANVAS_ITEM_TEXTURE_REPEAT_MAX;
    js_singleton["CanvasItemTextureRepeat"] = _CanvasItemTextureRepeat;
    qjs::Value _CanvasGroupMode = context->newObject();
    _CanvasGroupMode["CANVAS_GROUP_MODE_DISABLED"] = RenderingServer::CanvasGroupMode::CANVAS_GROUP_MODE_DISABLED;
    _CanvasGroupMode["CANVAS_GROUP_MODE_CLIP_ONLY"] = RenderingServer::CanvasGroupMode::CANVAS_GROUP_MODE_CLIP_ONLY;
    _CanvasGroupMode["CANVAS_GROUP_MODE_CLIP_AND_DRAW"] = RenderingServer::CanvasGroupMode::CANVAS_GROUP_MODE_CLIP_AND_DRAW;
    _CanvasGroupMode["CANVAS_GROUP_MODE_TRANSPARENT"] = RenderingServer::CanvasGroupMode::CANVAS_GROUP_MODE_TRANSPARENT;
    js_singleton["CanvasGroupMode"] = _CanvasGroupMode;
    qjs::Value _CanvasLightMode = context->newObject();
    _CanvasLightMode["CANVAS_LIGHT_MODE_POINT"] = RenderingServer::CanvasLightMode::CANVAS_LIGHT_MODE_POINT;
    _CanvasLightMode["CANVAS_LIGHT_MODE_DIRECTIONAL"] = RenderingServer::CanvasLightMode::CANVAS_LIGHT_MODE_DIRECTIONAL;
    js_singleton["CanvasLightMode"] = _CanvasLightMode;
    qjs::Value _CanvasLightBlendMode = context->newObject();
    _CanvasLightBlendMode["CANVAS_LIGHT_BLEND_MODE_ADD"] = RenderingServer::CanvasLightBlendMode::CANVAS_LIGHT_BLEND_MODE_ADD;
    _CanvasLightBlendMode["CANVAS_LIGHT_BLEND_MODE_SUB"] = RenderingServer::CanvasLightBlendMode::CANVAS_LIGHT_BLEND_MODE_SUB;
    _CanvasLightBlendMode["CANVAS_LIGHT_BLEND_MODE_MIX"] = RenderingServer::CanvasLightBlendMode::CANVAS_LIGHT_BLEND_MODE_MIX;
    js_singleton["CanvasLightBlendMode"] = _CanvasLightBlendMode;
    qjs::Value _CanvasLightShadowFilter = context->newObject();
    _CanvasLightShadowFilter["CANVAS_LIGHT_FILTER_NONE"] = RenderingServer::CanvasLightShadowFilter::CANVAS_LIGHT_FILTER_NONE;
    _CanvasLightShadowFilter["CANVAS_LIGHT_FILTER_PCF5"] = RenderingServer::CanvasLightShadowFilter::CANVAS_LIGHT_FILTER_PCF5;
    _CanvasLightShadowFilter["CANVAS_LIGHT_FILTER_PCF13"] = RenderingServer::CanvasLightShadowFilter::CANVAS_LIGHT_FILTER_PCF13;
    _CanvasLightShadowFilter["CANVAS_LIGHT_FILTER_MAX"] = RenderingServer::CanvasLightShadowFilter::CANVAS_LIGHT_FILTER_MAX;
    js_singleton["CanvasLightShadowFilter"] = _CanvasLightShadowFilter;
    qjs::Value _CanvasOccluderPolygonCullMode = context->newObject();
    _CanvasOccluderPolygonCullMode["CANVAS_OCCLUDER_POLYGON_CULL_DISABLED"] = RenderingServer::CanvasOccluderPolygonCullMode::CANVAS_OCCLUDER_POLYGON_CULL_DISABLED;
    _CanvasOccluderPolygonCullMode["CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE"] = RenderingServer::CanvasOccluderPolygonCullMode::CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE;
    _CanvasOccluderPolygonCullMode["CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE"] = RenderingServer::CanvasOccluderPolygonCullMode::CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE;
    js_singleton["CanvasOccluderPolygonCullMode"] = _CanvasOccluderPolygonCullMode;
    qjs::Value _GlobalShaderParameterType = context->newObject();
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_BOOL"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_BOOL;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_BVEC2"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_BVEC2;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_BVEC3"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_BVEC3;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_BVEC4"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_BVEC4;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_INT"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_INT;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_IVEC2"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_IVEC2;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_IVEC3"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_IVEC3;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_IVEC4"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_IVEC4;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_RECT2I"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_RECT2I;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_UINT"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_UINT;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_UVEC2"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_UVEC2;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_UVEC3"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_UVEC3;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_UVEC4"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_UVEC4;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_FLOAT"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_FLOAT;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_VEC2"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_VEC2;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_VEC3"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_VEC3;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_VEC4"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_VEC4;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_COLOR"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_COLOR;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_RECT2"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_RECT2;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_MAT2"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_MAT2;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_MAT3"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_MAT3;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_MAT4"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_MAT4;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_TRANSFORM_2D"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_TRANSFORM_2D;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_TRANSFORM"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_TRANSFORM;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_SAMPLER2D"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_SAMPLER2D;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_SAMPLER2DARRAY"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_SAMPLER2DARRAY;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_SAMPLER3D"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_SAMPLER3D;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_SAMPLERCUBE"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_SAMPLERCUBE;
    _GlobalShaderParameterType["GLOBAL_VAR_TYPE_MAX"] = RenderingServer::GlobalShaderParameterType::GLOBAL_VAR_TYPE_MAX;
    js_singleton["GlobalShaderParameterType"] = _GlobalShaderParameterType;
    qjs::Value _RenderingInfo = context->newObject();
    _RenderingInfo["RENDERING_INFO_TOTAL_OBJECTS_IN_FRAME"] = RenderingServer::RenderingInfo::RENDERING_INFO_TOTAL_OBJECTS_IN_FRAME;
    _RenderingInfo["RENDERING_INFO_TOTAL_PRIMITIVES_IN_FRAME"] = RenderingServer::RenderingInfo::RENDERING_INFO_TOTAL_PRIMITIVES_IN_FRAME;
    _RenderingInfo["RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME"] = RenderingServer::RenderingInfo::RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME;
    _RenderingInfo["RENDERING_INFO_TEXTURE_MEM_USED"] = RenderingServer::RenderingInfo::RENDERING_INFO_TEXTURE_MEM_USED;
    _RenderingInfo["RENDERING_INFO_BUFFER_MEM_USED"] = RenderingServer::RenderingInfo::RENDERING_INFO_BUFFER_MEM_USED;
    _RenderingInfo["RENDERING_INFO_VIDEO_MEM_USED"] = RenderingServer::RenderingInfo::RENDERING_INFO_VIDEO_MEM_USED;
    js_singleton["RenderingInfo"] = _RenderingInfo;
    qjs::Value _Features = context->newObject();
    _Features["FEATURE_SHADERS"] = RenderingServer::Features::FEATURE_SHADERS;
    _Features["FEATURE_MULTITHREADED"] = RenderingServer::Features::FEATURE_MULTITHREADED;
    js_singleton["Features"] = _Features;
}