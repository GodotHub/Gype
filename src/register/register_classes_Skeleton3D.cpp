#include "register/register_classes.h"
#include "register/utils.h"

using namespace godot;

void register_classes_Skeleton3D() {
    qjs::Context::Module &_module = _Node3D;
    _module.class_<Skeleton3D>("Skeleton3D")
           .constructor<>()
           .property<Skeleton3D::get_motion_scale, Skeleton3D::set_motion_scale>("motion_scale")
           .property<Skeleton3D::is_show_rest_only, Skeleton3D::set_show_rest_only>("show_rest_only")
           .property<Skeleton3D::get_animate_physical_bones, Skeleton3D::set_animate_physical_bones>("animate_physical_bones")
		   .fun<static_cast<void(Skeleton3D::*)(const String &)>(&Skeleton3D::add_bone)>("add_bone")
		   .fun<static_cast<int32_t(Skeleton3D::*)(const String &)const>(&Skeleton3D::find_bone)>("find_bone")
		   .fun<static_cast<String(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_name)>("get_bone_name")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t,const String &)>(&Skeleton3D::set_bone_name)>("set_bone_name")
		   .fun<static_cast<int32_t(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_parent)>("get_bone_parent")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t,int32_t)>(&Skeleton3D::set_bone_parent)>("set_bone_parent")
		   .fun<static_cast<int32_t(Skeleton3D::*)()const>(&Skeleton3D::get_bone_count)>("get_bone_count")
		   .fun<static_cast<uint64_t(Skeleton3D::*)()const>(&Skeleton3D::get_version)>("get_version")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t)>(&Skeleton3D::unparent_bone_and_rest)>("unparent_bone_and_rest")
		   .fun<static_cast<PackedInt32Array(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_children)>("get_bone_children")
		   .fun<static_cast<PackedInt32Array(Skeleton3D::*)()const>(&Skeleton3D::get_parentless_bones)>("get_parentless_bones")
		   .fun<static_cast<Transform3D(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_rest)>("get_bone_rest")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t,const Transform3D &)>(&Skeleton3D::set_bone_rest)>("set_bone_rest")
		   .fun<static_cast<Transform3D(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_global_rest)>("get_bone_global_rest")
		   .fun<static_cast<Ref<Skin>(Skeleton3D::*)()>(&Skeleton3D::create_skin_from_rest_transforms)>("create_skin_from_rest_transforms")
		   .fun<static_cast<Ref<SkinReference>(Skeleton3D::*)(const Ref<Skin> &)>(&Skeleton3D::register_skin)>("register_skin")
		   .fun<static_cast<void(Skeleton3D::*)()>(&Skeleton3D::localize_rests)>("localize_rests")
		   .fun<static_cast<void(Skeleton3D::*)()>(&Skeleton3D::clear_bones)>("clear_bones")
		   .fun<static_cast<Transform3D(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_pose)>("get_bone_pose")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t,const Vector3 &)>(&Skeleton3D::set_bone_pose_position)>("set_bone_pose_position")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t,const Quaternion &)>(&Skeleton3D::set_bone_pose_rotation)>("set_bone_pose_rotation")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t,const Vector3 &)>(&Skeleton3D::set_bone_pose_scale)>("set_bone_pose_scale")
		   .fun<static_cast<Vector3(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_pose_position)>("get_bone_pose_position")
		   .fun<static_cast<Quaternion(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_pose_rotation)>("get_bone_pose_rotation")
		   .fun<static_cast<Vector3(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_pose_scale)>("get_bone_pose_scale")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t)>(&Skeleton3D::reset_bone_pose)>("reset_bone_pose")
		   .fun<static_cast<void(Skeleton3D::*)()>(&Skeleton3D::reset_bone_poses)>("reset_bone_poses")
		   .fun<static_cast<bool(Skeleton3D::*)(int32_t)const>(&Skeleton3D::is_bone_enabled)>("is_bone_enabled")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t,bool)>(&Skeleton3D::set_bone_enabled)>("set_bone_enabled")
		   .fun<static_cast<void(Skeleton3D::*)()>(&Skeleton3D::clear_bones_global_pose_override)>("clear_bones_global_pose_override")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t,const Transform3D &,double,bool)>(&Skeleton3D::set_bone_global_pose_override)>("set_bone_global_pose_override")
		   .fun<static_cast<Transform3D(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_global_pose_override)>("get_bone_global_pose_override")
		   .fun<static_cast<Transform3D(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_global_pose)>("get_bone_global_pose")
		   .fun<static_cast<Transform3D(Skeleton3D::*)(int32_t)const>(&Skeleton3D::get_bone_global_pose_no_override)>("get_bone_global_pose_no_override")
		   .fun<static_cast<void(Skeleton3D::*)()>(&Skeleton3D::force_update_all_bone_transforms)>("force_update_all_bone_transforms")
		   .fun<static_cast<void(Skeleton3D::*)(int32_t)>(&Skeleton3D::force_update_bone_child_transform)>("force_update_bone_child_transform")
		   .fun<static_cast<void(Skeleton3D::*)()>(&Skeleton3D::physical_bones_stop_simulation)>("physical_bones_stop_simulation")
		   .fun<static_cast<void(Skeleton3D::*)(const TypedArray<StringName> &)>(&Skeleton3D::physical_bones_start_simulation)>("physical_bones_start_simulation")
		   .fun<static_cast<void(Skeleton3D::*)(const RID &)>(&Skeleton3D::physical_bones_add_collision_exception)>("physical_bones_add_collision_exception")
		   .fun<static_cast<void(Skeleton3D::*)(const RID &)>(&Skeleton3D::physical_bones_remove_collision_exception)>("physical_bones_remove_collision_exception")
;}