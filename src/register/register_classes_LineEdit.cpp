#include "register/register_classes.h"
#include "register/utils.h"
#include <godot_cpp/classes/line_edit.hpp>

using namespace godot;

void register_classes_LineEdit() {
    qjs::Context::Module &_module = _Control;
    _module.class_<LineEdit>("LineEdit")
           .constructor<>()
           .property<LineEdit::get_text, LineEdit::set_text>("text")
           .property<LineEdit::get_placeholder, LineEdit::set_placeholder>("placeholder_text")
           .property<LineEdit::get_horizontal_alignment, LineEdit::set_horizontal_alignment>("alignment")
           .property<LineEdit::get_max_length, LineEdit::set_max_length>("max_length")
           .property<LineEdit::is_editable, LineEdit::set_editable>("editable")
           .property<LineEdit::is_expand_to_text_length_enabled, LineEdit::set_expand_to_text_length_enabled>("expand_to_text_length")
           .property<LineEdit::is_context_menu_enabled, LineEdit::set_context_menu_enabled>("context_menu_enabled")
           .property<LineEdit::is_virtual_keyboard_enabled, LineEdit::set_virtual_keyboard_enabled>("virtual_keyboard_enabled")
           .property<LineEdit::get_virtual_keyboard_type, LineEdit::set_virtual_keyboard_type>("virtual_keyboard_type")
           .property<LineEdit::is_clear_button_enabled, LineEdit::set_clear_button_enabled>("clear_button_enabled")
           .property<LineEdit::is_shortcut_keys_enabled, LineEdit::set_shortcut_keys_enabled>("shortcut_keys_enabled")
           .property<LineEdit::is_middle_mouse_paste_enabled, LineEdit::set_middle_mouse_paste_enabled>("middle_mouse_paste_enabled")
           .property<LineEdit::is_selecting_enabled, LineEdit::set_selecting_enabled>("selecting_enabled")
           .property<LineEdit::is_deselect_on_focus_loss_enabled, LineEdit::set_deselect_on_focus_loss_enabled>("deselect_on_focus_loss_enabled")
           .property<LineEdit::is_drag_and_drop_selection_enabled, LineEdit::set_drag_and_drop_selection_enabled>("drag_and_drop_selection_enabled")
           .property<LineEdit::get_right_icon, LineEdit::set_right_icon>("right_icon")
           .property<LineEdit::is_flat, LineEdit::set_flat>("flat")
           .property<LineEdit::get_draw_control_chars, LineEdit::set_draw_control_chars>("draw_control_chars")
           .property<LineEdit::is_select_all_on_focus, LineEdit::set_select_all_on_focus>("select_all_on_focus")
           .property<LineEdit::is_caret_blink_enabled, LineEdit::set_caret_blink_enabled>("caret_blink")
           .property<LineEdit::get_caret_blink_interval, LineEdit::set_caret_blink_interval>("caret_blink_interval")
           .property<LineEdit::get_caret_column, LineEdit::set_caret_column>("caret_column")
           .property<LineEdit::is_caret_force_displayed, LineEdit::set_caret_force_displayed>("caret_force_displayed")
           .property<LineEdit::is_caret_mid_grapheme_enabled, LineEdit::set_caret_mid_grapheme_enabled>("caret_mid_grapheme")
           .property<LineEdit::is_secret, LineEdit::set_secret>("secret")
           .property<LineEdit::get_secret_character, LineEdit::set_secret_character>("secret_character")
           .property<LineEdit::get_text_direction, LineEdit::set_text_direction>("text_direction")
           .property<LineEdit::get_language, LineEdit::set_language>("language")
           .property<LineEdit::get_structured_text_bidi_override, LineEdit::set_structured_text_bidi_override>("structured_text_bidi_override")
           .property<LineEdit::get_structured_text_bidi_override_options, LineEdit::set_structured_text_bidi_override_options>("structured_text_bidi_override_options")
		    .fun<static_cast<void(LineEdit::*)()>(&LineEdit::clear)>("clear")
		    .fun<static_cast<void(LineEdit::*)(int32_t,int32_t)>(&LineEdit::select)>("select")
		    .fun<static_cast<void(LineEdit::*)()>(&LineEdit::select_all)>("select_all")
		    .fun<static_cast<void(LineEdit::*)()>(&LineEdit::deselect)>("deselect")
		    .fun<static_cast<bool(LineEdit::*)()const>(&LineEdit::has_selection)>("has_selection")
		    .fun<static_cast<String(LineEdit::*)()>(&LineEdit::get_selected_text)>("get_selected_text")
		    .fun<static_cast<int32_t(LineEdit::*)()const>(&LineEdit::get_selection_from_column)>("get_selection_from_column")
		    .fun<static_cast<int32_t(LineEdit::*)()const>(&LineEdit::get_selection_to_column)>("get_selection_to_column")
		    .fun<static_cast<double(LineEdit::*)()const>(&LineEdit::get_scroll_offset)>("get_scroll_offset")
		    .fun<static_cast<void(LineEdit::*)(const String &)>(&LineEdit::insert_text_at_caret)>("insert_text_at_caret")
		    .fun<static_cast<void(LineEdit::*)()>(&LineEdit::delete_char_at_caret)>("delete_char_at_caret")
		    .fun<static_cast<void(LineEdit::*)(int32_t,int32_t)>(&LineEdit::delete_text)>("delete_text")
		    .fun<static_cast<void(LineEdit::*)(int32_t)>(&LineEdit::menu_option)>("menu_option")
		    .fun<static_cast<PopupMenu *(LineEdit::*)()const>(&LineEdit::get_menu)>("get_menu")
		    .fun<static_cast<bool(LineEdit::*)()const>(&LineEdit::is_menu_visible)>("is_menu_visible")
;}