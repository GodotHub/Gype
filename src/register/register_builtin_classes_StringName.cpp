
#include <godot_cpp/variant/packed_byte_array.hpp>
#include <godot_cpp/variant/packed_float64_array.hpp>
#include <godot_cpp/variant/packed_string_array.hpp>
#include <godot_cpp/variant/string.hpp>
#include <godot_cpp/variant/string_name.hpp>
#include <godot_cpp/variant/variant.hpp>

#include "register/register_builtin_classes.h"

using namespace godot;

void register_builtin_classes_StringName() {
	get_Variant_module().class_<StringName>("StringName").constructor<>().constructor<const StringName &>("StringName_1").constructor<const String &>("StringName_2")

			.fun<static_cast<int64_t (StringName::*)(const String &) const>(&StringName::casecmp_to)>("casecmp_to")
			.fun<static_cast<int64_t (StringName::*)(const String &) const>(&StringName::nocasecmp_to)>("nocasecmp_to")
			.fun<static_cast<int64_t (StringName::*)(const String &) const>(&StringName::naturalcasecmp_to)>("naturalcasecmp_to")
			.fun<static_cast<int64_t (StringName::*)(const String &) const>(&StringName::naturalnocasecmp_to)>("naturalnocasecmp_to")
			.fun<static_cast<int64_t (StringName::*)() const>(&StringName::length)>("length")
			.fun<static_cast<String (StringName::*)(int64_t, int64_t) const>(&StringName::substr)>("substr")
			.fun<static_cast<String (StringName::*)(const String &, int64_t) const>(&StringName::get_slice)>("get_slice")
			.fun<static_cast<String (StringName::*)(int64_t, int64_t) const>(&StringName::get_slicec)>("get_slicec")
			.fun<static_cast<int64_t (StringName::*)(const String &) const>(&StringName::get_slice_count)>("get_slice_count")
			.fun<static_cast<int64_t (StringName::*)(const String &, int64_t) const>(&StringName::find)>("find")
			.fun<static_cast<int64_t (StringName::*)(const String &, int64_t, int64_t) const>(&StringName::count)>("count")
			.fun<static_cast<int64_t (StringName::*)(const String &, int64_t, int64_t) const>(&StringName::countn)>("countn")
			.fun<static_cast<int64_t (StringName::*)(const String &, int64_t) const>(&StringName::findn)>("findn")
			.fun<static_cast<int64_t (StringName::*)(const String &, int64_t) const>(&StringName::rfind)>("rfind")
			.fun<static_cast<int64_t (StringName::*)(const String &, int64_t) const>(&StringName::rfindn)>("rfindn")
			.fun<static_cast<bool (StringName::*)(const String &) const>(&StringName::match)>("match")
			.fun<static_cast<bool (StringName::*)(const String &) const>(&StringName::matchn)>("matchn")
			.fun<static_cast<bool (StringName::*)(const String &) const>(&StringName::begins_with)>("begins_with")
			.fun<static_cast<bool (StringName::*)(const String &) const>(&StringName::ends_with)>("ends_with")
			.fun<static_cast<bool (StringName::*)(const String &) const>(&StringName::is_subsequence_of)>("is_subsequence_of")
			.fun<static_cast<bool (StringName::*)(const String &) const>(&StringName::is_subsequence_ofn)>("is_subsequence_ofn")
			.fun<static_cast<PackedStringArray (StringName::*)() const>(&StringName::bigrams)>("bigrams")
			.fun<static_cast<double (StringName::*)(const String &) const>(&StringName::similarity)>("similarity")
			.fun<static_cast<String (StringName::*)(const Variant &, const String &) const>(&StringName::format)>("format")
			.fun<static_cast<String (StringName::*)(const String &, const String &) const>(&StringName::replace)>("replace")
			.fun<static_cast<String (StringName::*)(const String &, const String &) const>(&StringName::replacen)>("replacen")
			.fun<static_cast<String (StringName::*)(int64_t) const>(&StringName::repeat)>("repeat")
			.fun<static_cast<String (StringName::*)() const>(&StringName::reverse)>("reverse")
			.fun<static_cast<String (StringName::*)(int64_t, const String &) const>(&StringName::insert)>("insert")
			.fun<static_cast<String (StringName::*)(int64_t, int64_t) const>(&StringName::erase)>("erase")
			.fun<static_cast<String (StringName::*)() const>(&StringName::capitalize)>("capitalize")
			.fun<static_cast<String (StringName::*)() const>(&StringName::to_camel_case)>("to_camel_case")
			.fun<static_cast<String (StringName::*)() const>(&StringName::to_pascal_case)>("to_pascal_case")
			.fun<static_cast<String (StringName::*)() const>(&StringName::to_snake_case)>("to_snake_case")
			.fun<static_cast<PackedStringArray (StringName::*)(const String &, bool, int64_t) const>(&StringName::split)>("split")
			.fun<static_cast<PackedStringArray (StringName::*)(const String &, bool, int64_t) const>(&StringName::rsplit)>("rsplit")
			.fun<static_cast<PackedFloat64Array (StringName::*)(const String &, bool) const>(&StringName::split_floats)>("split_floats")
			.fun<static_cast<String (StringName::*)(const PackedStringArray &) const>(&StringName::join)>("join")
			.fun<static_cast<String (StringName::*)() const>(&StringName::to_upper)>("to_upper")
			.fun<static_cast<String (StringName::*)() const>(&StringName::to_lower)>("to_lower")
			.fun<static_cast<String (StringName::*)(int64_t) const>(&StringName::left)>("left")
			.fun<static_cast<String (StringName::*)(int64_t) const>(&StringName::right)>("right")
			.fun<static_cast<String (StringName::*)(bool, bool) const>(&StringName::strip_edges)>("strip_edges")
			.fun<static_cast<String (StringName::*)() const>(&StringName::strip_escapes)>("strip_escapes")
			.fun<static_cast<String (StringName::*)(const String &) const>(&StringName::lstrip)>("lstrip")
			.fun<static_cast<String (StringName::*)(const String &) const>(&StringName::rstrip)>("rstrip")
			.fun<static_cast<String (StringName::*)() const>(&StringName::get_extension)>("get_extension")
			.fun<static_cast<String (StringName::*)() const>(&StringName::get_basename)>("get_basename")
			.fun<static_cast<String (StringName::*)(const String &) const>(&StringName::path_join)>("path_join")
			.fun<static_cast<int64_t (StringName::*)(int64_t) const>(&StringName::unicode_at)>("unicode_at")
			.fun<static_cast<String (StringName::*)(const String &) const>(&StringName::indent)>("indent")
			.fun<static_cast<String (StringName::*)() const>(&StringName::dedent)>("dedent")
			.fun<static_cast<String (StringName::*)() const>(&StringName::md5_text)>("md5_text")
			.fun<static_cast<String (StringName::*)() const>(&StringName::sha1_text)>("sha1_text")
			.fun<static_cast<String (StringName::*)() const>(&StringName::sha256_text)>("sha256_text")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::md5_buffer)>("md5_buffer")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::sha1_buffer)>("sha1_buffer")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::sha256_buffer)>("sha256_buffer")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_empty)>("is_empty")
			.fun<static_cast<bool (StringName::*)(const String &) const>(&StringName::contains)>("contains")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_absolute_path)>("is_absolute_path")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_relative_path)>("is_relative_path")
			.fun<static_cast<String (StringName::*)() const>(&StringName::simplify_path)>("simplify_path")
			.fun<static_cast<String (StringName::*)() const>(&StringName::get_base_dir)>("get_base_dir")
			.fun<static_cast<String (StringName::*)() const>(&StringName::get_file)>("get_file")
			.fun<static_cast<String (StringName::*)(bool) const>(&StringName::xml_escape)>("xml_escape")
			.fun<static_cast<String (StringName::*)() const>(&StringName::xml_unescape)>("xml_unescape")
			.fun<static_cast<String (StringName::*)() const>(&StringName::uri_encode)>("uri_encode")
			.fun<static_cast<String (StringName::*)() const>(&StringName::uri_decode)>("uri_decode")
			.fun<static_cast<String (StringName::*)() const>(&StringName::c_escape)>("c_escape")
			.fun<static_cast<String (StringName::*)() const>(&StringName::c_unescape)>("c_unescape")
			.fun<static_cast<String (StringName::*)() const>(&StringName::json_escape)>("json_escape")
			.fun<static_cast<String (StringName::*)() const>(&StringName::validate_node_name)>("validate_node_name")
			.fun<static_cast<String (StringName::*)() const>(&StringName::validate_filename)>("validate_filename")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_valid_identifier)>("is_valid_identifier")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_valid_int)>("is_valid_int")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_valid_float)>("is_valid_float")
			.fun<static_cast<bool (StringName::*)(bool) const>(&StringName::is_valid_hex_number)>("is_valid_hex_number")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_valid_html_color)>("is_valid_html_color")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_valid_ip_address)>("is_valid_ip_address")
			.fun<static_cast<bool (StringName::*)() const>(&StringName::is_valid_filename)>("is_valid_filename")
			.fun<static_cast<int64_t (StringName::*)() const>(&StringName::to_int)>("to_int")
			.fun<static_cast<double (StringName::*)() const>(&StringName::to_float)>("to_float")
			.fun<static_cast<int64_t (StringName::*)() const>(&StringName::hex_to_int)>("hex_to_int")
			.fun<static_cast<int64_t (StringName::*)() const>(&StringName::bin_to_int)>("bin_to_int")
			.fun<static_cast<String (StringName::*)(int64_t, const String &) const>(&StringName::lpad)>("lpad")
			.fun<static_cast<String (StringName::*)(int64_t, const String &) const>(&StringName::rpad)>("rpad")
			.fun<static_cast<String (StringName::*)(int64_t) const>(&StringName::pad_decimals)>("pad_decimals")
			.fun<static_cast<String (StringName::*)(int64_t) const>(&StringName::pad_zeros)>("pad_zeros")
			.fun<static_cast<String (StringName::*)(const String &) const>(&StringName::trim_prefix)>("trim_prefix")
			.fun<static_cast<String (StringName::*)(const String &) const>(&StringName::trim_suffix)>("trim_suffix")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::to_ascii_buffer)>("to_ascii_buffer")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::to_utf8_buffer)>("to_utf8_buffer")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::to_utf16_buffer)>("to_utf16_buffer")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::to_utf32_buffer)>("to_utf32_buffer")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::hex_decode)>("hex_decode")
			.fun<static_cast<PackedByteArray (StringName::*)() const>(&StringName::to_wchar_buffer)>("to_wchar_buffer")
			.fun<static_cast<int64_t (StringName::*)() const>(&StringName::hash)>("hash");
}