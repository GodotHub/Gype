#include "register/register_builtin_classes.h"
#include "qjspp/utils.h"

{% from 'utils/builtin_classes_method.cpp.jinja' import method_parser, static_method_parser %}

using namespace godot;

void register_builtin_classes_{{clazz.name}}() {
	qjs::Context::Module &_Variant = get_Variant_module();
	_Variant.class_<{{clazz.name}}>("{{clazz.name}}")
{% for ctr in clazz.constructors %}
	{% set types = ctr.arguments | map(attribute='type') %}
	{% if ctr.arguments | length > 0 %}
            .constructor<{{types | convert_gen_paramter_type() | join(',')}}>("{{clazz.name | increment_num }}")
	{% else %}
            .constructor<>()
	{% endif %}
{% endfor %}{{ flush_letter() }}
{% for method in clazz.methods %}
	{% if not method.is_static %}
			.fun<{{method_parser(clazz, method)}}>
		{%- if loop.last %}
				{{-'("'+method.name+'");'}}
		{% else %}
				{{-'("'+method.name+'")'}}
		{% endif %}
	{% else %}
            .static_fun<{{static_method_parser(clazz, method)}}>
		{%- if loop.last %}
				{{-'("'+method.name+'");'}}
		{% else %}
				{{-'("'+method.name+'")'}}
		{% endif %}
	{% endif %}
{% endfor %}
}