#include "register/register_types.h"
#include "register/register_builtin_classes.h"
#include "register/register_utility_functions.h"
#include "register/register_classes.h"
#include "qjspp/utils.h"
#include "support/typescript.h"
#include "support/typescript_language.h"
#include "support/typescript_loader.h"

#include <gdextension_interface.h>
#include <godot_cpp/classes/engine.hpp>
#include <godot_cpp/classes/resource_loader.hpp>
#include <godot_cpp/core/defs.hpp>
#include <godot_cpp/core/error_macros.hpp>
#include <godot_cpp/godot.hpp>

using namespace godot;

TypescriptLoader *loader;

void initialize_tgds_types(ModuleInitializationLevel p_level) {
	if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
		return;
	}
	{% for clazz in builtin_classes %}
	register_builtin_classes_{{clazz.name}}();
	{% endfor %}
	{% for clazz in classes %}
		{% if 'VisualShader' not in clazz.name and clazz.is_instantiable%}
	register_classes_{{clazz.name}}();
		{% endif %}
	{% endfor %}
	register_builtin_classes_Variant();
	register_utility_functions();
	GDREGISTER_CLASS(TypescriptLanguage);
	GDREGISTER_CLASS(TypescriptLoader);
	GDREGISTER_CLASS(Typescript);
	Engine::get_singleton()->register_script_language(TypescriptLanguage::get_singleton());
	loader = memnew(TypescriptLoader());
	ResourceLoader::get_singleton()->add_resource_format_loader(loader);
}

void uninitialize_tgds_types(ModuleInitializationLevel p_level) {
	if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
		return;
	}
}

extern "C" {
GDExtensionBool GDE_EXPORT tgds_library_init(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, GDExtensionInitialization *r_initialization) {
	godot::GDExtensionBinding::InitObject init_obj(p_get_proc_address, p_library, r_initialization);
	init_obj.register_initializer(initialize_tgds_types);
	init_obj.register_terminator(uninitialize_tgds_types);
	init_obj.set_minimum_library_initialization_level(MODULE_INITIALIZATION_LEVEL_SCENE);
	return init_obj.init();
}
}