#include "register/register_types.h"
#include "register/register_builtin_classes.h"
#include "register/register_utility_functions.h"
#include "register/register_classes.h"
#include "qjspp/utils.h"
#include "support/typescript.h"
#include "support/typescript_language.h"
#include "support/typescript_loader.h"

#include <gdextension_interface.h>
#include <godot_cpp/classes/engine.hpp>
#include <godot_cpp/classes/resource_loader.hpp>
#include <godot_cpp/core/defs.hpp>
#include <godot_cpp/core/error_macros.hpp>
#include <godot_cpp/godot.hpp>

using namespace godot;

{% set global = namespace(classes_register = []) %}
{% set singletons_type = singletons | map(attribute='type') | list %}
{% macro register_classes_tree(node) %}
	{%- if 'VisualShader' not in node.name and node.name not in singletons_type and (node.name | replace('Extension', '')) not in singletons_type -%}
		{%- set global.classes_register = global.classes_register + ['register_classes_' + node.name + '();\n'] -%}
	{%- endif -%}
	{% if node.children and node.children | length > 0 %}
		{% for value in node.children %}
	{{ register_classes_tree(value) }}
		{% endfor %}
	{% endif %}
{% endmacro %}

void initialize_tgds_types(ModuleInitializationLevel p_level) {
	if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
		return;
	}
	register_utility_functions();
	register_builtin_classes_Variant();
	{% for clazz in builtin_classes %}
	register_builtin_classes_{{clazz.name}}();
	{% endfor %}
	{{-register_classes_tree(object)-}}
	{{global.classes_register | join()}}
	{% for clazz in classes %}
		{% if clazz.name in singletons_type %}
	register_singletons_{{clazz.name}}();
		{% endif %}
	{% endfor %}
	GDREGISTER_CLASS(TypescriptLanguage);
	GDREGISTER_CLASS(TypescriptLoader);
	GDREGISTER_CLASS(Typescript);
	Engine::get_singleton()->register_script_language(memnew(TypescriptLanguage()));
	ResourceLoader::get_singleton()->add_resource_format_loader(memnew(TypescriptLoader()));
}

void uninitialize_tgds_types(ModuleInitializationLevel p_level) {
	if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
		return;
	}
}

extern "C" {
GDExtensionBool GDE_EXPORT tgds_library_init(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, GDExtensionInitialization *r_initialization) {
	godot::GDExtensionBinding::InitObject init_obj(p_get_proc_address, p_library, r_initialization);
	init_obj.register_initializer(initialize_tgds_types);
	init_obj.register_terminator(uninitialize_tgds_types);
	init_obj.set_minimum_library_initialization_level(MODULE_INITIALIZATION_LEVEL_SCENE);
	return init_obj.init();
}
}