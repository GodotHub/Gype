{% set utility_functions = gde_json['utility_functions'] %}
import {
  call_utility_ret,
  call_utility_no_ret,
} from "src/js_godot/core/engine_ptrcall";
import { StringName } from "src/js_godot/variant/string_name";
import { variant_get_ptr_utility_function } from "__internal__";

{%- macro to_js_func_name(type) -%}
{%- if type == 'general' -%}
GD
{%- elif type == 'math' -%}
Math
{%- elif type == 'random' -%}
Random
{%- endif -%}
{%- endmacro -%}

{%- macro conn_args(method) %}
{{-method['arguments'] | map(attribute='name') | join(', ')-}}
{{-', ...args' if method['is_vararg'] else ''-}}
{%- endmacro %}

{%- macro render_method(type, all_methods) -%}
{% set methods = all_methods | selectattr('category', 'equalto', type) | list %}
export class {{to_js_func_name(type)}} {
{%- for method in methods %}
  static #{{method['name']}}_func;
{%- endfor %}

  static _init_bindings() {
  {%- for method in methods %}
    this.#{{method['name']}}_func = variant_get_ptr_utility_function(
      new StringName("{{method['name']}}").opaque,
      {{method['hash']}}
    );
  {%- endfor %}
  }

{%- for method in methods %}
  static #{{method['name']}}_internal({{conn_args(method)}}) {
    {%- if method['return_type'] %}
    return call_utility_ret(this.#{{method['name']}}_func, {{conn_args(method)}});
    {%- else %}
    call_utility_no_ret(this.#{{method['name']}}_func, {{conn_args(method)}});
    {%- endif %}
  }
{%- endfor %}

{%- for method in methods %}
  {{method['name']}}({{conn_args(method)}}) {
    {%- if method['return_type'] %}
    return {{to_js_func_name(type)}}.#{{method['name']}}_internal({{conn_args(method)}});
    {%- else %}
    return {{to_js_func_name(type)}}.#{{method['name']}}_internal({{conn_args(method)}});
    {%- endif %}
  }
{%- endfor %}
}
{%- endmacro -%}

{% for type in func_types %}
{{- render_method(type, utility_functions) }}
{% endfor %}