{%- set inherits = class['inherits'] -%}
{%- if inherits == 'Object'%}
  {%- set inherits = 'GodotObject' -%}
{%- endif %}

{%- macro extends(class) -%}
{%- if inherits -%}
 extends {{inherits}}
{%- endif -%}
{%- endmacro -%}

{%- set class_name = class['name'] -%}
{%- if class_name == 'Object'%}
  {%- set class_name = 'GodotObject' -%}
{%- endif %}

{%- for den in dependency %}
  {%- if den == 'Object' %}
    {%- set den = 'GodotObject' %}
    {%- if den != class_name %}
import { {{den}} } from "@godot/classes/{{camel_to_snake(den)}}";
    {%- endif %}
  {%- else %}
    {%- if den != class_name %}
import { {{den}} } from "@godot/classes/{{camel_to_snake(den)}}";
    {%- endif %}
  {%- endif %}
{%- endfor %}

{%- macro process_vararg(is_vararg, arg) %}
  {%- if is_vararg -%}
    {%- if arg -%}
, ...arg: {{set_type(arg['type'])}}
    {%- else -%}
...arg: any
    {%- endif -%}
  {%- endif -%}
{%- endmacro %}

<<<<<<< HEAD

export declare class {{class_name}} {{extends(class)}}{
  {%- for method in class['methods'] %}
    {%- if not method['invalid'] %}
      {%- if class_name == 'Node' %}
        {%- if method['name'] == 'get_node' or method['name'] == 'get_parent' %}
  public {{method['name']}}<T extends Node>({{connect_args(method['arguments']) + process_vararg(method['is_vararg'], method['arguments']|last)}}): T;
        {%- else %}
  public {{method['name']}}({{connect_args(method['arguments']) + process_vararg(method['is_vararg'], method['arguments']|last)}}){{set_return(method['return_value']['type'] if method['return_value'] else None)}};
        {%- endif %}
      {%- else %}
  public {{method['name']}}({{connect_args(method['arguments']) + process_vararg(method['is_vararg'], method['arguments']|last)}}){{set_return(method['return_value']['type'] if method['return_value'] else None)}};
      {%- endif %}
=======
export declare class {{class_name}} {{extends(class)}}{
  {%- for method in class['methods'] %}
    {%- if not method['invalid'] %}
  public {{method['name']}}({{connect_args(method['arguments']) + process_vararg(method['is_vararg'], method['arguments']|last)}}){{set_return(method['return_value']['type'] if method['return_value'] else None)}};
>>>>>>> 0c008da7b935a7329ba949abea3320f1b5334455
    {%- endif %}
  {%- endfor %}
  {%- for prop in class['properties'] %}
  {%- if prop['getter'] %}
<<<<<<< HEAD
  public get {{prop['name']}}(){{set_return(prop['type'])}};
  {%- endif %}
  {%- if prop['setter'] %}
  public set {{prop['name']}}(value): void;
=======
  public get {{prop['name']}}(){{set_return(prop['type'])}} {
    {{prop['getter']}}();
  }
  {%- endif %}
  {%- if prop['setter'] %}
  public set {{prop['name']}}(value): void {
    {{prop['setter']}}(value);
  }
>>>>>>> 0c008da7b935a7329ba949abea3320f1b5334455
  {%- endif %}
  {%- endfor %}
  {%- for enum in class['enums'] %}
  static {{enum['name']}} = {
    {%- for value in enum['values'] %}
    {{value['name']}} = {{value['value']}},
    {%- endfor %}
  }
  {%- endfor %}
  {%- for signal in class['signals'] %}
  public get {{signal['name']}}(): Signal;
  {%- endfor %}
}