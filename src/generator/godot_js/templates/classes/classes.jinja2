
{%- set clazz = gde_json['classes'][index] -%}
{%- set methods = clazz['methods'] -%}
{%- set singletons = gde_json['singletons'] | map(attribute='name') | list -%}
{%- from 'utils/utils.jinja2' import singleton_class_name -%}
import * as internal from '__internal__';
{%- for dependcy in dependcies %}
import { {{to_js_type(dependcy)}} } from '{{ get_module_path(dependcy) }}'
{%- endfor %}
{%- if clazz['name'] == 'Object' %}
import { Wrapped } from '@js_godot/classes/wrapped'
{%- endif %}
import {
  call_utility_ret,
  call_utility_no_ret,
  _call_native_mb_ret,
  _call_native_mb_no_ret
} from "@js_godot/core/engine_ptrcall";

class _MethodBindings {
  {%- for method in methods %}
    {%- if not method['is_virtual'] %}
  method_{{method['name']}};
    {%- endif %}
  {%- endfor %}
}
{%- if clazz['name'] in singletons -%}
{%- set class_name = "_"+clazz['name'] -%}
{% else %}
{%- set class_name = to_js_type(clazz['name']) -%}
{%- endif -%}


{{singleton_class_name(clazz, singletons)}} {{ 'extends ' + to_js_type(clazz['inherits']) if to_js_type(clazz['inherits']) else ''}}{

  static _bindings = new _MethodBindings();
  static #initialized = false;

  constructor(godot_object) {
    if (!godot_object) {
      super("{{clazz['name']}}");
    } else {
      super(godot_object);
    }
  }
  {% from 'utils/utils.jinja2' import define_args %}
  static async _init_bindings() {
    if (this.#initialized) {
      return;
    }
    this.#initialized = true;
    {%- for method in methods %}
      {%- if not method['is_virtual'] %}
    {
      let classname = new StringName("{{clazz['name']}}");
      let methodname = new StringName("{{method['name']}}");
      this._bindings.method_{{method['name']}} = internal.classdb_get_method_bind(
        classname.opaque, 
        methodname.opaque, 
        {{method['hash']}}
      );
    }
      {%- endif %}
    {%- endfor %}
  }
  {% set clazz_name = to_js_type(clazz['name']) %}
  {%- from 'utils/utils.jinja2' import conn_args, type_enum %}
  {%- for method in methods %}
  {{method['name']}}({{-conn_args(method['arguments'])-}}) {
    {%- if not method['is_virtual'] %}
    return _call_native_mb{{-'' if method['return_value'] else '_no'-}}_ret(
      {{ '_'+clazz_name if clazz_name in singletons else clazz_name}}._bindings.method_{{method['name']}},
      this._owner,
      {%- if method['return_value'] -%}
      {{-type_enum(method['return_value'], '\t\t\t')-}}
      {%- endif %}
      {{conn_args(method['arguments'])}}
    );
    {% endif %}
  }
  {%- endfor %}
  {% from 'utils/utils.jinja2' import set_property %}
  {{- set_property(clazz) -}}

  {%- for enum in clazz['enums'] %}
  static {{enum['name']}} = {
    {%- for value in enum['values'] %}
    {{value['name']}}: {{value['value']}},
    {%- endfor %}
  }
  {%- endfor %}

  static {
    this._init_bindings();
  }
}

{%- if clazz['name'] in singletons %}
export const {{to_js_type(clazz['name'])}} = (function () {
  let _instance;
  function create_instance() {
    return new _{{to_js_type(clazz['name'])}}();
  }
  return {
    instance: function () {
      if (!_instance) {
        _instance = create_instance();
      }
      return _instance;
    },
  };
})();
{%- endif %}