#ifndef __REGISTER_CLASSES_H__
#define __REGISTER_CLASSES_H__

#include <godot_cpp/variant/utility_functions.hpp>
#include <unordered_map>

extern std::unordered_map<intptr_t, int64_t> instance_id_map;

#define CHECK_INSTANCE_VALID(val)                                           \
	{                                                                       \
		intptr_t __ptr__ = (intptr_t)JS_GetOpaque(ctx, JS_GetClassID(val)); \
		ERR_FAIL_COND(instance_id_map.count(__ptr__) <= 0)                  \
		int64_t __id__ = instance_id_map[__ptr__];                          \
		ERR_FAIL_COND(!UtilityFunctions::is_instance_id_valid(__id__));     \
	}

#define CHECK_INSTANCE_VALID_V(val)                                                      \
	{                                                                                    \
		JSValue __undefined__ = JS_UNDEFINED;                                            \
		intptr_t __ptr__ = (intptr_t)JS_GetOpaque(val, JS_GetClassID(val));              \
		ERR_FAIL_COND_V(instance_id_map.count(__ptr__) <= 0, __undefined__);             \
		int64_t __id__ = instance_id_map[__ptr__];                                       \
		ERR_FAIL_COND_V(!UtilityFunctions::is_instance_id_valid(__id__), __undefined__); \
	}

{%- for class in classes %}
void register_{{ camel_to_snake(class['name']) }}();
{%- endfor %}
void register_classes();
#endif // __REGISTER_CLASSES_H__