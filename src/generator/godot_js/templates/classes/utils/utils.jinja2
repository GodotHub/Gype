{%- macro define_args(clazz, args) %}
  {%- for arg in args %}
    {%- if arg['type'] in variant_types() %}
      let _{{ arg['name'] }} = new {{ arg['type'] }}("{{clazz[arg['name']]}}");
    {%- endif %}
  {%- endfor %}
{%- endmacro %}

{% macro conn_args(args) %}
{{-args | map(attribute='name') | add_prefix_suffix('_') | join(', ')-}}
{% endmacro %}

{%- macro type_enum(return_value, indent) %}
  {%- if return_value %}
    {%- set type = return_value['type'] -%}
    {%- if type in variant_types() %}
{{indent}}Variant.Type.{{ camel_to_snake(type) | upper }},
    {% elif type in pod_types() %}
{{indent}}Variant.Type.{{ type | upper }},
    {% elif 'enum::' in type %}
{{indent}}Variant.Type.INT,
    {% elif 'typedarray::' in type %}
{{indent}}Variant.Type.ARRAY,
    {%- else %}
{{indent}}Variant.Type.OBJECT,
    {%- endif %}
  {%- endif %}
{%- endmacro %}

{%- macro singleton_class_name(clazz, singletons) -%}
  {%- if clazz['name'] in singletons -%}
class _{{to_js_type(clazz['name'])-}}
  {% else %}
export class {{to_js_type(clazz['name'])-}}
  {%- endif -%}
{%- endmacro -%}

{% macro set_property(clazz) %}
  {%- for property in clazz['properties'] %}
{%- if property['getter'] %}
get {{property['name']}} () {
  return this.{{property['getter']}}();
}
{%- endif %}
{%- if property['setter'] %}
set {{property['name']}} (new_value) {
  this.{{property['setter']}}(new_value);
}
{%- endif %}
  {%- endfor %}
{% endmacro %}