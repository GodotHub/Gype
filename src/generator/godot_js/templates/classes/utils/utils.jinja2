{%- macro define_args(clazz, args) %}
  {%- for arg in args %}
    {%- if arg['type'] in variant_types() %}
      let _{{ arg['name'] }} = new {{ arg['type'] }}("{{clazz[arg['name']]}}");
    {%- endif %}
  {%- endfor %}
{%- endmacro %}

{% macro conn_args(args) %}
{{-args | map(attribute='name') | add_prefix_suffix('_') | join(', ')-}}
{% endmacro %}

{%- macro type_enum(return_value, indent) %}
  {%- if return_value %}
    {%- set type = return_value['type'] -%}
    {%- if type in variant_types() %}
{{indent}}Variant.Type.{{ to_gd_type(camel_to_snake(type)) | upper }}
    {% elif type in pod_types() %}
{{indent}}Variant.Type.{{ to_gd_type(type) | upper }}
    {%- else %}
{{indent}}Variant.INT
    {%- endif %}
  {%- endif %}
{%- endmacro %}

{%- macro singleton_class_name(clazz, singletons) -%}
  {%- if clazz['name'] in singletons -%}
export const {{to_js_type(clazz['name'])}} = new _{{clazz['name']}}();

class _{{to_js_type(clazz['name'])-}}
  {% else %}
export class {{to_js_type(clazz['name'])-}}
  {%- endif -%}
{%- endmacro -%}
