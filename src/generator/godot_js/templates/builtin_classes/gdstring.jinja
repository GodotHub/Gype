{% set obj = gde_json['builtin_classes'][4] %}
import {
  get_variant_to_type_constructor,
  variant_get_ptr_constructor,
  string_new_with_latin1_chars,
  variant_get_ptr_builtin_method,
  variant_get_ptr_destructor
} from '__internal__'
import { GDExtensionVariantType } from 'src/js_godot/gde/gde'
import {
  _call_builtin_constructor,
  _call_builtin_method_ptr_ret
} from 'src/js_godot/core/builtin_ptrcall'
import { StringName } from 'src/js_godot/variant/string_name'
import { Variant } from 'src/js_godot/variant/variant'

class _MethodBindings {
  from_variant_constructor
  {%- for constructor in obj['constructors'] %}
  constructor_{{constructor['index']}}
  {%- endfor %}
  {%- for method in obj['methods'] %}
  method_{{method['name']}}
  {%- endfor %}
  {%- for operator in (obj['operators'] | norm_op_name) %}
  {{operator}}
  {%- endfor %}
}

export class GDString {
  static STRING_SIZE = 8
  opaque = new Uint8Array(GDString.STRING_SIZE)

  static _bindings = new _MethodBindings()

  constructor (value) {
    if (!value) {
      _call_builtin_constructor(GDString._bindings.constructor_0, this.opaque)
    } else if (typeof value == 'string') {
      string_new_with_latin1_chars(this.opaque, value)
    } else if (value instanceof GDString) {
      _call_builtin_constructor(GDString._bindings.constructor_1, this.opaque, [
        value.opaque
      ])
    } else if (value instanceof StringName) {
      _call_builtin_constructor(GDString._bindings.constructor_2, this.opaque, [
        value.opaque
      ])
    }
  }

  {%- set methods = obj['methods'] -%}
  {% from 'utils/utils.jinja' import init_binding %}
  {{ init_binding(methods, '\t') }}

  static __init_bindings_constructors_destructor () {
    this._bindings.from_variant_constructor = get_variant_to_type_constructor(
      GDExtensionVariantType.GDEXTENSION_VARIANT_TYPE_STRING
    )
    this._bindings.constructor_0 = variant_get_ptr_constructor(
      GDExtensionVariantType.GDEXTENSION_VARIANT_TYPE_STRING,
      0
    )
    this._bindings.constructor_1 = variant_get_ptr_constructor(
      GDExtensionVariantType.GDEXTENSION_VARIANT_TYPE_STRING,
      1
    )
    this._bindings.constructor_2 = variant_get_ptr_constructor(
      GDExtensionVariantType.GDEXTENSION_VARIANT_TYPE_STRING,
      2
    )
    this._bindings.constructor_3 = variant_get_ptr_constructor(
      GDExtensionVariantType.GDEXTENSION_VARIANT_TYPE_STRING,
      3
    )
    this._bindings.destructor = variant_get_ptr_destructor(
      GDExtensionVariantType.GDEXTENSION_VARIANT_TYPE_STRING
    )
  }

  {% from 'utils/utils.jinja' import call_returned %}
  {%- for method in methods -%}
    {%- if method['return_type'] -%}
{{-call_returned(method, '  ')-}}
    {%- else -%}
    ERROR
    {% endif %}
  {% endfor %}
}
