{%- set clazz = gde_json['builtin_classes'][index] -%}
{%- set size = ((gde_json['builtin_class_sizes'] | selectattr('build_configuration', 'equalto', precision | string) | first)['sizes'] | selectattr('name', 'equalto', clazz['name']) | first)['size'] -%}
import * as internal from '__internal__'
import {
  _call_builtin_constructor,
  _call_builtin_method_ptr_ret,
  _call_builtin_method_ptr_no_ret
} from '@js_godot/core/builtin_ptrcall'
{%- for dependcy in dependcies %}
import { {{to_js_type(dependcy)}} } from '{{ get_module_path(dependcy) }}'
{%- if to_js_type(dependcy) == 'StringName' -%}
  {%- set has_string_name = true -%}
{%- endif -%}
{%- endfor %}

{%- from 'utils/utils.jinja2' import bindings_class %}
{{bindings_class(clazz)}}
export class {{to_js_type(clazz['name'])}} {
  static #SIZE = {{size}}
  opaque = new Uint8Array({{to_js_type(clazz['name'])}}.#SIZE)

  static _bindings = new _MethodBindings();
  static #initialized = false;

  constructor (from) {
    {%- from 'utils/utils.jinja2' import base_ctor -%}
    {{-base_ctor(clazz)-}}
    {%- set path = camel_to_snake(to_js_type(clazz['name'])) + '.jinja2' -%}
    {%- include path ignore missing %}
  }
  {%- from 'utils/utils.jinja2' import bind_ctor %}
  {{ bind_ctor(clazz, clazz['name']) }}
  {%- set methods = clazz['methods'] -%}
  {% from 'utils/utils.jinja2' import init_binding %}
  {{ init_binding(methods, clazz['name']) }}
  {% from 'utils/utils.jinja2' import call_returned, call_no_returned %}
  {%- for method in methods %}
    {%- if method['return_type'] %}
  {{call_returned(clazz,method)}}
    {%- else %}
  {{call_no_returned(clazz,method)}}
    {%- endif %}
  {%- endfor %}
  {%- from 'utils/utils.jinja2' import set_property -%}
  {{- set_property(clazz) -}}
  static {
    this._init_bindings();
  }
}
