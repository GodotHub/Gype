

declare global {
export declare class String {
  constructor();
  constructor(_from: String | StringName | string);
  constructor(_from: String | StringName | string);
  constructor(_from: NodePath);
  public casecmp_to(_to: String | StringName | string): number;
  public nocasecmp_to(_to: String | StringName | string): number;
  public naturalcasecmp_to(_to: String | StringName | string): number;
  public naturalnocasecmp_to(_to: String | StringName | string): number;
  public filecasecmp_to(_to: String | StringName | string): number;
  public filenocasecmp_to(_to: String | StringName | string): number;
  public length(): number;
  public substr(_from: number, _len: number): String;
  public get_slice(_delimiter: String | StringName | string, _slice: number): String;
  public get_slicec(_delimiter: number, _slice: number): String;
  public get_slice_count(_delimiter: String | StringName | string): number;
  public find(_what: String | StringName | string, _from: number): number;
  public findn(_what: String | StringName | string, _from: number): number;
  public count(_what: String | StringName | string, _from: number, _to: number): number;
  public countn(_what: String | StringName | string, _from: number, _to: number): number;
  public rfind(_what: String | StringName | string, _from: number): number;
  public rfindn(_what: String | StringName | string, _from: number): number;
  public match(_expr: String | StringName | string): boolean;
  public matchn(_expr: String | StringName | string): boolean;
  public begins_with(_text: String | StringName | string): boolean;
  public ends_with(_text: String | StringName | string): boolean;
  public is_subsequence_of(_text: String | StringName | string): boolean;
  public is_subsequence_ofn(_text: String | StringName | string): boolean;
  public bigrams(): PackedStringArray;
  public similarity(_text: String | StringName | string): number;
  public format(_values: any, _placeholder: String | StringName | string): String;
  public replace(_what: String | StringName | string, _forwhat: String | StringName | string): String;
  public replacen(_what: String | StringName | string, _forwhat: String | StringName | string): String;
  public repeat(_count: number): String;
  public reverse(): String;
  public insert(_position: number, _what: String | StringName | string): String;
  public erase(_position: number, _chars: number): String;
  public capitalize(): String;
  public to_camel_case(): String;
  public to_pascal_case(): String;
  public to_snake_case(): String;
  public split(_delimiter: String | StringName | string, _allow_empty: boolean, _maxsplit: number): PackedStringArray;
  public rsplit(_delimiter: String | StringName | string, _allow_empty: boolean, _maxsplit: number): PackedStringArray;
  public split_floats(_delimiter: String | StringName | string, _allow_empty: boolean): PackedFloat64Array;
  public join(_parts: PackedStringArray): String;
  public to_upper(): String;
  public to_lower(): String;
  public left(_length: number): String;
  public right(_length: number): String;
  public strip_edges(_left: boolean, _right: boolean): String;
  public strip_escapes(): String;
  public lstrip(_chars: String | StringName | string): String;
  public rstrip(_chars: String | StringName | string): String;
  public get_extension(): String;
  public get_basename(): String;
  public path_join(_file: String | StringName | string): String;
  public unicode_at(_at: number): number;
  public indent(_prefix: String | StringName | string): String;
  public dedent(): String;
  public hash(): number;
  public md5_text(): String;
  public sha1_text(): String;
  public sha256_text(): String;
  public md5_buffer(): PackedByteArray;
  public sha1_buffer(): PackedByteArray;
  public sha256_buffer(): PackedByteArray;
  public is_empty(): boolean;
  public contains(_what: String | StringName | string): boolean;
  public containsn(_what: String | StringName | string): boolean;
  public is_absolute_path(): boolean;
  public is_relative_path(): boolean;
  public simplify_path(): String;
  public get_base_dir(): String;
  public get_file(): String;
  public xml_escape(_escape_quotes: boolean): String;
  public xml_unescape(): String;
  public uri_encode(): String;
  public uri_decode(): String;
  public c_escape(): String;
  public c_unescape(): String;
  public json_escape(): String;
  public validate_node_name(): String;
  public validate_filename(): String;
  public is_valid_identifier(): boolean;
  public is_valid_int(): boolean;
  public is_valid_float(): boolean;
  public is_valid_hex_number(_with_prefix: boolean): boolean;
  public is_valid_html_color(): boolean;
  public is_valid_ip_address(): boolean;
  public is_valid_filename(): boolean;
  public to_int(): number;
  public to_float(): number;
  public hex_to_int(): number;
  public bin_to_int(): number;
  public lpad(_min_length: number, _character: String | StringName | string): String;
  public rpad(_min_length: number, _character: String | StringName | string): String;
  public pad_decimals(_digits: number): String;
  public pad_zeros(_digits: number): String;
  public trim_prefix(_prefix: String | StringName | string): String;
  public trim_suffix(_suffix: String | StringName | string): String;
  public to_ascii_buffer(): PackedByteArray;
  public to_utf8_buffer(): PackedByteArray;
  public to_utf16_buffer(): PackedByteArray;
  public to_utf32_buffer(): PackedByteArray;
  public hex_decode(): PackedByteArray;
  public to_wchar_buffer(): PackedByteArray;
  public num_scientific(_number: number): String;
  public num(_number: number, _decimals: number): String;
  public num_int64(_number: number, _base: number, _capitalize_hex: boolean): String;
  public num_uint64(_number: number, _base: number, _capitalize_hex: boolean): String;
  public chr(_char: number): String;
  public humanize_size(_size: number): String;
}
}

export {};