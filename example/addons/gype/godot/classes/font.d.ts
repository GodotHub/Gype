
import { Resource } from "@godot/classes/resource";
export declare class Font extends Resource{
  public set_fallbacks(_fallbacks: GDArray): void;
  public get_fallbacks(): GDArray;
  public find_variation(_variation_coordinates: Dictionary, _face_index: number = 0, _strength: number = 0.0, _transform: Transform2D = Transform2D(1, 0, 0, 1, 0, 0), _spacing_top: number = 0, _spacing_bottom: number = 0, _spacing_space: number = 0, _spacing_glyph: number = 0, _baseline_offset: number = 0.0): RID;
  public get_rids(): GDArray;
  public get_height(_font_size: number = 16): number;
  public get_ascent(_font_size: number = 16): number;
  public get_descent(_font_size: number = 16): number;
  public get_underline_position(_font_size: number = 16): number;
  public get_underline_thickness(_font_size: number = 16): number;
  public get_font_name(): String;
  public get_font_style_name(): String;
  public get_ot_name_strings(): Dictionary;
  public get_font_style(): number;
  public get_font_weight(): number;
  public get_font_stretch(): number;
  public get_spacing(_spacing: number): number;
  public get_opentype_features(): Dictionary;
  public set_cache_capacity(_single_line: number, _multi_line: number): void;
  public get_string_size(_text: GDString | StringName | string, _alignment: number = 0, _width: number = -1, _font_size: number = 16, _justification_flags: number = 3, _direction: number = 0, _orientation: number = 0): Vector2;
  public get_multiline_string_size(_text: GDString | StringName | string, _alignment: number = 0, _width: number = -1, _font_size: number = 16, _max_lines: number = -1, _brk_flags: number = 3, _justification_flags: number = 3, _direction: number = 0, _orientation: number = 0): Vector2;
  public draw_string(_canvas_item: RID, _pos: Vector2, _text: GDString | StringName | string, _alignment: number = 0, _width: number = -1, _font_size: number = 16, _modulate: Color = Color(1, 1, 1, 1), _justification_flags: number = 3, _direction: number = 0, _orientation: number = 0): void;
  public draw_multiline_string(_canvas_item: RID, _pos: Vector2, _text: GDString | StringName | string, _alignment: number = 0, _width: number = -1, _font_size: number = 16, _max_lines: number = -1, _modulate: Color = Color(1, 1, 1, 1), _brk_flags: number = 3, _justification_flags: number = 3, _direction: number = 0, _orientation: number = 0): void;
  public draw_string_outline(_canvas_item: RID, _pos: Vector2, _text: GDString | StringName | string, _alignment: number = 0, _width: number = -1, _font_size: number = 16, _size: number = 1, _modulate: Color = Color(1, 1, 1, 1), _justification_flags: number = 3, _direction: number = 0, _orientation: number = 0): void;
  public draw_multiline_string_outline(_canvas_item: RID, _pos: Vector2, _text: GDString | StringName | string, _alignment: number = 0, _width: number = -1, _font_size: number = 16, _max_lines: number = -1, _size: number = 1, _modulate: Color = Color(1, 1, 1, 1), _brk_flags: number = 3, _justification_flags: number = 3, _direction: number = 0, _orientation: number = 0): void;
  public get_char_size(_char: number, _font_size: number): Vector2;
  public draw_char(_canvas_item: RID, _pos: Vector2, _char: number, _font_size: number, _modulate: Color = Color(1, 1, 1, 1)): number;
  public draw_char_outline(_canvas_item: RID, _pos: Vector2, _char: number, _font_size: number, _size: number = -1, _modulate: Color = Color(1, 1, 1, 1)): number;
  public has_char(_char: number): boolean;
  public get_supported_chars(): String;
  public is_language_supported(_language: GDString | StringName | string): boolean;
  public is_script_supported(_script: GDString | StringName | string): boolean;
  public get_supported_feature_list(): Dictionary;
  public get_supported_variation_list(): Dictionary;
  public get_face_count(): number;
  public get fallbacks(): GDArray;
  public set fallbacks(value): void;
}