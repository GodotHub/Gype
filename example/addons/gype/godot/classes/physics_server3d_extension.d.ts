
import { PhysicsDirectSpaceState3D } from "@godot/classes/physics_direct_space_state3d";
import { PhysicsServer3DRenderingServerHandler } from "@godot/classes/physics_server3d_rendering_server_handler";
import { PhysicsDirectBodyState3D } from "@godot/classes/physics_direct_body_state3d";
import { PhysicsServer3D } from "@godot/classes/physics_server3d";

export declare class PhysicsServer3DExtension extends PhysicsServer3D{
  public _world_boundary_shape_create(): RID;
  public _separation_ray_shape_create(): RID;
  public _sphere_shape_create(): RID;
  public _box_shape_create(): RID;
  public _capsule_shape_create(): RID;
  public _cylinder_shape_create(): RID;
  public _convex_polygon_shape_create(): RID;
  public _concave_polygon_shape_create(): RID;
  public _heightmap_shape_create(): RID;
  public _custom_shape_create(): RID;
  public _shape_set_data(_shape: RID, _data: Variant): void;
  public _shape_set_custom_solver_bias(_shape: RID, _bias: number): void;
  public _shape_set_margin(_shape: RID, _margin: number): void;
  public _shape_get_margin(_shape: RID): number;
  public _shape_get_type(_shape: RID): number;
  public _shape_get_data(_shape: RID): Variant;
  public _shape_get_custom_solver_bias(_shape: RID): number;
  public _space_create(): RID;
  public _space_set_active(_space: RID, _active: boolean): void;
  public _space_is_active(_space: RID): boolean;
  public _space_set_param(_space: RID, _param: number, _value: number): void;
  public _space_get_param(_space: RID, _param: number): number;
  public _space_get_direct_state(_space: RID): PhysicsDirectSpaceState3D;
  public _space_set_debug_contacts(_space: RID, _max_contacts: number): void;
  public _space_get_contacts(_space: RID): PackedVector3Array;
  public _space_get_contact_count(_space: RID): number;
  public _area_create(): RID;
  public _area_set_space(_area: RID, _space: RID): void;
  public _area_get_space(_area: RID): RID;
  public _area_add_shape(_area: RID, _shape: RID, _transform: Transform3D, _disabled: boolean): void;
  public _area_set_shape(_area: RID, _shape_idx: number, _shape: RID): void;
  public _area_set_shape_transform(_area: RID, _shape_idx: number, _transform: Transform3D): void;
  public _area_set_shape_disabled(_area: RID, _shape_idx: number, _disabled: boolean): void;
  public _area_get_shape_count(_area: RID): number;
  public _area_get_shape(_area: RID, _shape_idx: number): RID;
  public _area_get_shape_transform(_area: RID, _shape_idx: number): Transform3D;
  public _area_remove_shape(_area: RID, _shape_idx: number): void;
  public _area_clear_shapes(_area: RID): void;
  public _area_attach_object_instance_id(_area: RID, _id: number): void;
  public _area_get_object_instance_id(_area: RID): number;
  public _area_set_param(_area: RID, _param: number, _value: Variant): void;
  public _area_set_transform(_area: RID, _transform: Transform3D): void;
  public _area_get_param(_area: RID, _param: number): Variant;
  public _area_get_transform(_area: RID): Transform3D;
  public _area_set_collision_layer(_area: RID, _layer: number): void;
  public _area_get_collision_layer(_area: RID): number;
  public _area_set_collision_mask(_area: RID, _mask: number): void;
  public _area_get_collision_mask(_area: RID): number;
  public _area_set_monitorable(_area: RID, _monitorable: boolean): void;
  public _area_set_ray_pickable(_area: RID, _enable: boolean): void;
  public _area_set_monitor_callback(_area: RID, _callback: Callable): void;
  public _area_set_area_monitor_callback(_area: RID, _callback: Callable): void;
  public _body_create(): RID;
  public _body_set_space(_body: RID, _space: RID): void;
  public _body_get_space(_body: RID): RID;
  public _body_set_mode(_body: RID, _mode: number): void;
  public _body_get_mode(_body: RID): number;
  public _body_add_shape(_body: RID, _shape: RID, _transform: Transform3D, _disabled: boolean): void;
  public _body_set_shape(_body: RID, _shape_idx: number, _shape: RID): void;
  public _body_set_shape_transform(_body: RID, _shape_idx: number, _transform: Transform3D): void;
  public _body_set_shape_disabled(_body: RID, _shape_idx: number, _disabled: boolean): void;
  public _body_get_shape_count(_body: RID): number;
  public _body_get_shape(_body: RID, _shape_idx: number): RID;
  public _body_get_shape_transform(_body: RID, _shape_idx: number): Transform3D;
  public _body_remove_shape(_body: RID, _shape_idx: number): void;
  public _body_clear_shapes(_body: RID): void;
  public _body_attach_object_instance_id(_body: RID, _id: number): void;
  public _body_get_object_instance_id(_body: RID): number;
  public _body_set_enable_continuous_collision_detection(_body: RID, _enable: boolean): void;
  public _body_is_continuous_collision_detection_enabled(_body: RID): boolean;
  public _body_set_collision_layer(_body: RID, _layer: number): void;
  public _body_get_collision_layer(_body: RID): number;
  public _body_set_collision_mask(_body: RID, _mask: number): void;
  public _body_get_collision_mask(_body: RID): number;
  public _body_set_collision_priority(_body: RID, _priority: number): void;
  public _body_get_collision_priority(_body: RID): number;
  public _body_set_user_flags(_body: RID, _flags: number): void;
  public _body_get_user_flags(_body: RID): number;
  public _body_set_param(_body: RID, _param: number, _value: Variant): void;
  public _body_get_param(_body: RID, _param: number): Variant;
  public _body_reset_mass_properties(_body: RID): void;
  public _body_set_state(_body: RID, _state: number, _value: Variant): void;
  public _body_get_state(_body: RID, _state: number): Variant;
  public _body_apply_central_impulse(_body: RID, _impulse: Vector3): void;
  public _body_apply_impulse(_body: RID, _impulse: Vector3, _position: Vector3): void;
  public _body_apply_torque_impulse(_body: RID, _impulse: Vector3): void;
  public _body_apply_central_force(_body: RID, _force: Vector3): void;
  public _body_apply_force(_body: RID, _force: Vector3, _position: Vector3): void;
  public _body_apply_torque(_body: RID, _torque: Vector3): void;
  public _body_add_constant_central_force(_body: RID, _force: Vector3): void;
  public _body_add_constant_force(_body: RID, _force: Vector3, _position: Vector3): void;
  public _body_add_constant_torque(_body: RID, _torque: Vector3): void;
  public _body_set_constant_force(_body: RID, _force: Vector3): void;
  public _body_get_constant_force(_body: RID): Vector3;
  public _body_set_constant_torque(_body: RID, _torque: Vector3): void;
  public _body_get_constant_torque(_body: RID): Vector3;
  public _body_set_axis_velocity(_body: RID, _axis_velocity: Vector3): void;
  public _body_set_axis_lock(_body: RID, _axis: number, _lock: boolean): void;
  public _body_is_axis_locked(_body: RID, _axis: number): boolean;
  public _body_add_collision_exception(_body: RID, _excepted_body: RID): void;
  public _body_remove_collision_exception(_body: RID, _excepted_body: RID): void;
  public _body_get_collision_exceptions(_body: RID): Array;
  public _body_set_max_contacts_reported(_body: RID, _amount: number): void;
  public _body_get_max_contacts_reported(_body: RID): number;
  public _body_set_contacts_reported_depth_threshold(_body: RID, _threshold: number): void;
  public _body_get_contacts_reported_depth_threshold(_body: RID): number;
  public _body_set_omit_force_integration(_body: RID, _enable: boolean): void;
  public _body_is_omitting_force_integration(_body: RID): boolean;
  public _body_set_state_sync_callback(_body: RID, _callable: Callable): void;
  public _body_set_force_integration_callback(_body: RID, _callable: Callable, _userdata: Variant): void;
  public _body_set_ray_pickable(_body: RID, _enable: boolean): void;
  public _body_test_motion(_body: RID, _from: Transform3D, _motion: Vector3, _margin: number, _max_collisions: number, _collide_separation_ray: boolean, _recovery_as_collision: boolean, _result: PhysicsServer3DExtensionMotionResult*): boolean;
  public _body_get_direct_state(_body: RID): PhysicsDirectBodyState3D;
  public _soft_body_create(): RID;
  public _soft_body_update_rendering_server(_body: RID, _rendering_server_handler: PhysicsServer3DRenderingServerHandler): void;
  public _soft_body_set_space(_body: RID, _space: RID): void;
  public _soft_body_get_space(_body: RID): RID;
  public _soft_body_set_ray_pickable(_body: RID, _enable: boolean): void;
  public _soft_body_set_collision_layer(_body: RID, _layer: number): void;
  public _soft_body_get_collision_layer(_body: RID): number;
  public _soft_body_set_collision_mask(_body: RID, _mask: number): void;
  public _soft_body_get_collision_mask(_body: RID): number;
  public _soft_body_add_collision_exception(_body: RID, _body_b: RID): void;
  public _soft_body_remove_collision_exception(_body: RID, _body_b: RID): void;
  public _soft_body_get_collision_exceptions(_body: RID): Array;
  public _soft_body_set_state(_body: RID, _state: number, _variant: Variant): void;
  public _soft_body_get_state(_body: RID, _state: number): Variant;
  public _soft_body_set_transform(_body: RID, _transform: Transform3D): void;
  public _soft_body_set_simulation_precision(_body: RID, _simulation_precision: number): void;
  public _soft_body_get_simulation_precision(_body: RID): number;
  public _soft_body_set_total_mass(_body: RID, _total_mass: number): void;
  public _soft_body_get_total_mass(_body: RID): number;
  public _soft_body_set_linear_stiffness(_body: RID, _linear_stiffness: number): void;
  public _soft_body_get_linear_stiffness(_body: RID): number;
  public _soft_body_set_pressure_coefficient(_body: RID, _pressure_coefficient: number): void;
  public _soft_body_get_pressure_coefficient(_body: RID): number;
  public _soft_body_set_damping_coefficient(_body: RID, _damping_coefficient: number): void;
  public _soft_body_get_damping_coefficient(_body: RID): number;
  public _soft_body_set_drag_coefficient(_body: RID, _drag_coefficient: number): void;
  public _soft_body_get_drag_coefficient(_body: RID): number;
  public _soft_body_set_mesh(_body: RID, _mesh: RID): void;
  public _soft_body_get_bounds(_body: RID): AABB;
  public _soft_body_move_point(_body: RID, _point_index: number, _global_position: Vector3): void;
  public _soft_body_get_point_global_position(_body: RID, _point_index: number): Vector3;
  public _soft_body_remove_all_pinned_points(_body: RID): void;
  public _soft_body_pin_point(_body: RID, _point_index: number, _pin: boolean): void;
  public _soft_body_is_point_pinned(_body: RID, _point_index: number): boolean;
  public _joint_create(): RID;
  public _joint_clear(_joint: RID): void;
  public _joint_make_pin(_joint: RID, _body_A: RID, _local_A: Vector3, _body_B: RID, _local_B: Vector3): void;
  public _pin_joint_set_param(_joint: RID, _param: number, _value: number): void;
  public _pin_joint_get_param(_joint: RID, _param: number): number;
  public _pin_joint_set_local_a(_joint: RID, _local_A: Vector3): void;
  public _pin_joint_get_local_a(_joint: RID): Vector3;
  public _pin_joint_set_local_b(_joint: RID, _local_B: Vector3): void;
  public _pin_joint_get_local_b(_joint: RID): Vector3;
  public _joint_make_hinge(_joint: RID, _body_A: RID, _hinge_A: Transform3D, _body_B: RID, _hinge_B: Transform3D): void;
  public _joint_make_hinge_simple(_joint: RID, _body_A: RID, _pivot_A: Vector3, _axis_A: Vector3, _body_B: RID, _pivot_B: Vector3, _axis_B: Vector3): void;
  public _hinge_joint_set_param(_joint: RID, _param: number, _value: number): void;
  public _hinge_joint_get_param(_joint: RID, _param: number): number;
  public _hinge_joint_set_flag(_joint: RID, _flag: number, _enabled: boolean): void;
  public _hinge_joint_get_flag(_joint: RID, _flag: number): boolean;
  public _joint_make_slider(_joint: RID, _body_A: RID, _local_ref_A: Transform3D, _body_B: RID, _local_ref_B: Transform3D): void;
  public _slider_joint_set_param(_joint: RID, _param: number, _value: number): void;
  public _slider_joint_get_param(_joint: RID, _param: number): number;
  public _joint_make_cone_twist(_joint: RID, _body_A: RID, _local_ref_A: Transform3D, _body_B: RID, _local_ref_B: Transform3D): void;
  public _cone_twist_joint_set_param(_joint: RID, _param: number, _value: number): void;
  public _cone_twist_joint_get_param(_joint: RID, _param: number): number;
  public _joint_make_generic_6dof(_joint: RID, _body_A: RID, _local_ref_A: Transform3D, _body_B: RID, _local_ref_B: Transform3D): void;
  public _generic_6dof_joint_set_param(_joint: RID, _axis: number, _param: number, _value: number): void;
  public _generic_6dof_joint_get_param(_joint: RID, _axis: number, _param: number): number;
  public _generic_6dof_joint_set_flag(_joint: RID, _axis: number, _flag: number, _enable: boolean): void;
  public _generic_6dof_joint_get_flag(_joint: RID, _axis: number, _flag: number): boolean;
  public _joint_get_type(_joint: RID): number;
  public _joint_set_solver_priority(_joint: RID, _priority: number): void;
  public _joint_get_solver_priority(_joint: RID): number;
  public _joint_disable_collisions_between_bodies(_joint: RID, _disable: boolean): void;
  public _joint_is_disabled_collisions_between_bodies(_joint: RID): boolean;
  public _free_rid(_rid: RID): void;
  public _set_active(_active: boolean): void;
  public _init(): void;
  public _step(_step: number): void;
  public _sync(): void;
  public _flush_queries(): void;
  public _end_sync(): void;
  public _finish(): void;
  public _is_flushing_queries(): boolean;
  public _get_process_info(_process_info: number): number;
  public body_test_motion_is_excluding_body(_body: RID): boolean;
  public body_test_motion_is_excluding_object(_object: number): boolean;
}