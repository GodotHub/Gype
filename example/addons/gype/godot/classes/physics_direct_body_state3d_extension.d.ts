
import { PhysicsDirectSpaceState3D } from "@godot/classes/physics_direct_space_state3d";
import { Object } from "@godot/classes/object";
import { PhysicsDirectBodyState3D } from "@godot/classes/physics_direct_body_state3d";

export declare class PhysicsDirectBodyState3DExtension extends PhysicsDirectBodyState3D{
  public _get_total_gravity(): Vector3;
  public _get_total_linear_damp(): number;
  public _get_total_angular_damp(): number;
  public _get_center_of_mass(): Vector3;
  public _get_center_of_mass_local(): Vector3;
  public _get_principal_inertia_axes(): Basis;
  public _get_inverse_mass(): number;
  public _get_inverse_inertia(): Vector3;
  public _get_inverse_inertia_tensor(): Basis;
  public _set_linear_velocity(_velocity: Vector3): void;
  public _get_linear_velocity(): Vector3;
  public _set_angular_velocity(_velocity: Vector3): void;
  public _get_angular_velocity(): Vector3;
  public _set_transform(_transform: Transform3D): void;
  public _get_transform(): Transform3D;
  public _get_velocity_at_local_position(_local_position: Vector3): Vector3;
  public _apply_central_impulse(_impulse: Vector3): void;
  public _apply_impulse(_impulse: Vector3, _position: Vector3): void;
  public _apply_torque_impulse(_impulse: Vector3): void;
  public _apply_central_force(_force: Vector3): void;
  public _apply_force(_force: Vector3, _position: Vector3): void;
  public _apply_torque(_torque: Vector3): void;
  public _add_constant_central_force(_force: Vector3): void;
  public _add_constant_force(_force: Vector3, _position: Vector3): void;
  public _add_constant_torque(_torque: Vector3): void;
  public _set_constant_force(_force: Vector3): void;
  public _get_constant_force(): Vector3;
  public _set_constant_torque(_torque: Vector3): void;
  public _get_constant_torque(): Vector3;
  public _set_sleep_state(_enabled: boolean): void;
  public _is_sleeping(): boolean;
  public _get_contact_count(): number;
  public _get_contact_local_position(_contact_idx: number): Vector3;
  public _get_contact_local_normal(_contact_idx: number): Vector3;
  public _get_contact_impulse(_contact_idx: number): Vector3;
  public _get_contact_local_shape(_contact_idx: number): number;
  public _get_contact_local_velocity_at_position(_contact_idx: number): Vector3;
  public _get_contact_collider(_contact_idx: number): RID;
  public _get_contact_collider_position(_contact_idx: number): Vector3;
  public _get_contact_collider_id(_contact_idx: number): number;
  public _get_contact_collider_object(_contact_idx: number): Object;
  public _get_contact_collider_shape(_contact_idx: number): number;
  public _get_contact_collider_velocity_at_position(_contact_idx: number): Vector3;
  public _get_step(): number;
  public _integrate_forces(): void;
  public _get_space_state(): PhysicsDirectSpaceState3D;
}