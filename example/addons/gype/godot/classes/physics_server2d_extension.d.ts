
import { PhysicsDirectSpaceState2D } from "@godot/classes/physics_direct_space_state2d";
import { PhysicsDirectBodyState2D } from "@godot/classes/physics_direct_body_state2d";
import { PhysicsServer2D } from "@godot/classes/physics_server2d";

export declare class PhysicsServer2DExtension extends PhysicsServer2D{
  public _world_boundary_shape_create(): RID;
  public _separation_ray_shape_create(): RID;
  public _segment_shape_create(): RID;
  public _circle_shape_create(): RID;
  public _rectangle_shape_create(): RID;
  public _capsule_shape_create(): RID;
  public _convex_polygon_shape_create(): RID;
  public _concave_polygon_shape_create(): RID;
  public _shape_set_data(_shape: RID, _data: Variant): void;
  public _shape_set_custom_solver_bias(_shape: RID, _bias: number): void;
  public _shape_get_type(_shape: RID): number;
  public _shape_get_data(_shape: RID): Variant;
  public _shape_get_custom_solver_bias(_shape: RID): number;
  public _shape_collide(_shape_A: RID, _xform_A: Transform2D, _motion_A: Vector2, _shape_B: RID, _xform_B: Transform2D, _motion_B: Vector2, _results: void*, _result_max: number, _result_count: int32_t*): boolean;
  public _space_create(): RID;
  public _space_set_active(_space: RID, _active: boolean): void;
  public _space_is_active(_space: RID): boolean;
  public _space_set_param(_space: RID, _param: number, _value: number): void;
  public _space_get_param(_space: RID, _param: number): number;
  public _space_get_direct_state(_space: RID): PhysicsDirectSpaceState2D;
  public _space_set_debug_contacts(_space: RID, _max_contacts: number): void;
  public _space_get_contacts(_space: RID): PackedVector2Array;
  public _space_get_contact_count(_space: RID): number;
  public _area_create(): RID;
  public _area_set_space(_area: RID, _space: RID): void;
  public _area_get_space(_area: RID): RID;
  public _area_add_shape(_area: RID, _shape: RID, _transform: Transform2D, _disabled: boolean): void;
  public _area_set_shape(_area: RID, _shape_idx: number, _shape: RID): void;
  public _area_set_shape_transform(_area: RID, _shape_idx: number, _transform: Transform2D): void;
  public _area_set_shape_disabled(_area: RID, _shape_idx: number, _disabled: boolean): void;
  public _area_get_shape_count(_area: RID): number;
  public _area_get_shape(_area: RID, _shape_idx: number): RID;
  public _area_get_shape_transform(_area: RID, _shape_idx: number): Transform2D;
  public _area_remove_shape(_area: RID, _shape_idx: number): void;
  public _area_clear_shapes(_area: RID): void;
  public _area_attach_object_instance_id(_area: RID, _id: number): void;
  public _area_get_object_instance_id(_area: RID): number;
  public _area_attach_canvas_instance_id(_area: RID, _id: number): void;
  public _area_get_canvas_instance_id(_area: RID): number;
  public _area_set_param(_area: RID, _param: number, _value: Variant): void;
  public _area_set_transform(_area: RID, _transform: Transform2D): void;
  public _area_get_param(_area: RID, _param: number): Variant;
  public _area_get_transform(_area: RID): Transform2D;
  public _area_set_collision_layer(_area: RID, _layer: number): void;
  public _area_get_collision_layer(_area: RID): number;
  public _area_set_collision_mask(_area: RID, _mask: number): void;
  public _area_get_collision_mask(_area: RID): number;
  public _area_set_monitorable(_area: RID, _monitorable: boolean): void;
  public _area_set_pickable(_area: RID, _pickable: boolean): void;
  public _area_set_monitor_callback(_area: RID, _callback: Callable): void;
  public _area_set_area_monitor_callback(_area: RID, _callback: Callable): void;
  public _body_create(): RID;
  public _body_set_space(_body: RID, _space: RID): void;
  public _body_get_space(_body: RID): RID;
  public _body_set_mode(_body: RID, _mode: number): void;
  public _body_get_mode(_body: RID): number;
  public _body_add_shape(_body: RID, _shape: RID, _transform: Transform2D, _disabled: boolean): void;
  public _body_set_shape(_body: RID, _shape_idx: number, _shape: RID): void;
  public _body_set_shape_transform(_body: RID, _shape_idx: number, _transform: Transform2D): void;
  public _body_get_shape_count(_body: RID): number;
  public _body_get_shape(_body: RID, _shape_idx: number): RID;
  public _body_get_shape_transform(_body: RID, _shape_idx: number): Transform2D;
  public _body_set_shape_disabled(_body: RID, _shape_idx: number, _disabled: boolean): void;
  public _body_set_shape_as_one_way_collision(_body: RID, _shape_idx: number, _enable: boolean, _margin: number): void;
  public _body_remove_shape(_body: RID, _shape_idx: number): void;
  public _body_clear_shapes(_body: RID): void;
  public _body_attach_object_instance_id(_body: RID, _id: number): void;
  public _body_get_object_instance_id(_body: RID): number;
  public _body_attach_canvas_instance_id(_body: RID, _id: number): void;
  public _body_get_canvas_instance_id(_body: RID): number;
  public _body_set_continuous_collision_detection_mode(_body: RID, _mode: number): void;
  public _body_get_continuous_collision_detection_mode(_body: RID): number;
  public _body_set_collision_layer(_body: RID, _layer: number): void;
  public _body_get_collision_layer(_body: RID): number;
  public _body_set_collision_mask(_body: RID, _mask: number): void;
  public _body_get_collision_mask(_body: RID): number;
  public _body_set_collision_priority(_body: RID, _priority: number): void;
  public _body_get_collision_priority(_body: RID): number;
  public _body_set_param(_body: RID, _param: number, _value: Variant): void;
  public _body_get_param(_body: RID, _param: number): Variant;
  public _body_reset_mass_properties(_body: RID): void;
  public _body_set_state(_body: RID, _state: number, _value: Variant): void;
  public _body_get_state(_body: RID, _state: number): Variant;
  public _body_apply_central_impulse(_body: RID, _impulse: Vector2): void;
  public _body_apply_torque_impulse(_body: RID, _impulse: number): void;
  public _body_apply_impulse(_body: RID, _impulse: Vector2, _position: Vector2): void;
  public _body_apply_central_force(_body: RID, _force: Vector2): void;
  public _body_apply_force(_body: RID, _force: Vector2, _position: Vector2): void;
  public _body_apply_torque(_body: RID, _torque: number): void;
  public _body_add_constant_central_force(_body: RID, _force: Vector2): void;
  public _body_add_constant_force(_body: RID, _force: Vector2, _position: Vector2): void;
  public _body_add_constant_torque(_body: RID, _torque: number): void;
  public _body_set_constant_force(_body: RID, _force: Vector2): void;
  public _body_get_constant_force(_body: RID): Vector2;
  public _body_set_constant_torque(_body: RID, _torque: number): void;
  public _body_get_constant_torque(_body: RID): number;
  public _body_set_axis_velocity(_body: RID, _axis_velocity: Vector2): void;
  public _body_add_collision_exception(_body: RID, _excepted_body: RID): void;
  public _body_remove_collision_exception(_body: RID, _excepted_body: RID): void;
  public _body_get_collision_exceptions(_body: RID): Array;
  public _body_set_max_contacts_reported(_body: RID, _amount: number): void;
  public _body_get_max_contacts_reported(_body: RID): number;
  public _body_set_contacts_reported_depth_threshold(_body: RID, _threshold: number): void;
  public _body_get_contacts_reported_depth_threshold(_body: RID): number;
  public _body_set_omit_force_integration(_body: RID, _enable: boolean): void;
  public _body_is_omitting_force_integration(_body: RID): boolean;
  public _body_set_state_sync_callback(_body: RID, _callable: Callable): void;
  public _body_set_force_integration_callback(_body: RID, _callable: Callable, _userdata: Variant): void;
  public _body_collide_shape(_body: RID, _body_shape: number, _shape: RID, _shape_xform: Transform2D, _motion: Vector2, _results: void*, _result_max: number, _result_count: int32_t*): boolean;
  public _body_set_pickable(_body: RID, _pickable: boolean): void;
  public _body_get_direct_state(_body: RID): PhysicsDirectBodyState2D;
  public _body_test_motion(_body: RID, _from: Transform2D, _motion: Vector2, _margin: number, _collide_separation_ray: boolean, _recovery_as_collision: boolean, _result: PhysicsServer2DExtensionMotionResult*): boolean;
  public _joint_create(): RID;
  public _joint_clear(_joint: RID): void;
  public _joint_set_param(_joint: RID, _param: number, _value: number): void;
  public _joint_get_param(_joint: RID, _param: number): number;
  public _joint_disable_collisions_between_bodies(_joint: RID, _disable: boolean): void;
  public _joint_is_disabled_collisions_between_bodies(_joint: RID): boolean;
  public _joint_make_pin(_joint: RID, _anchor: Vector2, _body_a: RID, _body_b: RID): void;
  public _joint_make_groove(_joint: RID, _a_groove1: Vector2, _a_groove2: Vector2, _b_anchor: Vector2, _body_a: RID, _body_b: RID): void;
  public _joint_make_damped_spring(_joint: RID, _anchor_a: Vector2, _anchor_b: Vector2, _body_a: RID, _body_b: RID): void;
  public _pin_joint_set_flag(_joint: RID, _flag: number, _enabled: boolean): void;
  public _pin_joint_get_flag(_joint: RID, _flag: number): boolean;
  public _pin_joint_set_param(_joint: RID, _param: number, _value: number): void;
  public _pin_joint_get_param(_joint: RID, _param: number): number;
  public _damped_spring_joint_set_param(_joint: RID, _param: number, _value: number): void;
  public _damped_spring_joint_get_param(_joint: RID, _param: number): number;
  public _joint_get_type(_joint: RID): number;
  public _free_rid(_rid: RID): void;
  public _set_active(_active: boolean): void;
  public _init(): void;
  public _step(_step: number): void;
  public _sync(): void;
  public _flush_queries(): void;
  public _end_sync(): void;
  public _finish(): void;
  public _is_flushing_queries(): boolean;
  public _get_process_info(_process_info: number): number;
  public body_test_motion_is_excluding_body(_body: RID): boolean;
  public body_test_motion_is_excluding_object(_object: number): boolean;
}