
import { TextServer } from "@godot/classes/text_server";
import { Image } from "@godot/classes/image";

export declare class TextServerExtension extends TextServer{
  public _has_feature(_feature: number): boolean;
  public _get_name(): String;
  public _get_features(): number;
  public _free_rid(_rid: RID): void;
  public _has(_rid: RID): boolean;
  public _load_support_data(_filename: String): boolean;
  public _get_support_data_filename(): String;
  public _get_support_data_info(): String;
  public _save_support_data(_filename: String): boolean;
  public _is_locale_right_to_left(_locale: String): boolean;
  public _name_to_tag(_name: String): number;
  public _tag_to_name(_tag: number): String;
  public _create_font(): RID;
  public _create_font_linked_variation(_font_rid: RID): RID;
  public _font_set_data(_font_rid: RID, _data: PackedByteArray): void;
  public _font_set_data_ptr(_font_rid: RID, _data_ptr: const uint8_t*, _data_size: number): void;
  public _font_set_face_index(_font_rid: RID, _face_index: number): void;
  public _font_get_face_index(_font_rid: RID): number;
  public _font_get_face_count(_font_rid: RID): number;
  public _font_set_style(_font_rid: RID, _style: number): void;
  public _font_get_style(_font_rid: RID): number;
  public _font_set_name(_font_rid: RID, _name: String): void;
  public _font_get_name(_font_rid: RID): String;
  public _font_get_ot_name_strings(_font_rid: RID): Dictionary;
  public _font_set_style_name(_font_rid: RID, _name_style: String): void;
  public _font_get_style_name(_font_rid: RID): String;
  public _font_set_weight(_font_rid: RID, _weight: number): void;
  public _font_get_weight(_font_rid: RID): number;
  public _font_set_stretch(_font_rid: RID, _stretch: number): void;
  public _font_get_stretch(_font_rid: RID): number;
  public _font_set_antialiasing(_font_rid: RID, _antialiasing: number): void;
  public _font_get_antialiasing(_font_rid: RID): number;
  public _font_set_disable_embedded_bitmaps(_font_rid: RID, _disable_embedded_bitmaps: boolean): void;
  public _font_get_disable_embedded_bitmaps(_font_rid: RID): boolean;
  public _font_set_generate_mipmaps(_font_rid: RID, _generate_mipmaps: boolean): void;
  public _font_get_generate_mipmaps(_font_rid: RID): boolean;
  public _font_set_multichannel_signed_distance_field(_font_rid: RID, _msdf: boolean): void;
  public _font_is_multichannel_signed_distance_field(_font_rid: RID): boolean;
  public _font_set_msdf_pixel_range(_font_rid: RID, _msdf_pixel_range: number): void;
  public _font_get_msdf_pixel_range(_font_rid: RID): number;
  public _font_set_msdf_size(_font_rid: RID, _msdf_size: number): void;
  public _font_get_msdf_size(_font_rid: RID): number;
  public _font_set_fixed_size(_font_rid: RID, _fixed_size: number): void;
  public _font_get_fixed_size(_font_rid: RID): number;
  public _font_set_fixed_size_scale_mode(_font_rid: RID, _fixed_size_scale_mode: number): void;
  public _font_get_fixed_size_scale_mode(_font_rid: RID): number;
  public _font_set_allow_system_fallback(_font_rid: RID, _allow_system_fallback: boolean): void;
  public _font_is_allow_system_fallback(_font_rid: RID): boolean;
  public _font_set_force_autohinter(_font_rid: RID, _force_autohinter: boolean): void;
  public _font_is_force_autohinter(_font_rid: RID): boolean;
  public _font_set_hinting(_font_rid: RID, _hinting: number): void;
  public _font_get_hinting(_font_rid: RID): number;
  public _font_set_subpixel_positioning(_font_rid: RID, _subpixel_positioning: number): void;
  public _font_get_subpixel_positioning(_font_rid: RID): number;
  public _font_set_embolden(_font_rid: RID, _strength: number): void;
  public _font_get_embolden(_font_rid: RID): number;
  public _font_set_spacing(_font_rid: RID, _spacing: number, _value: number): void;
  public _font_get_spacing(_font_rid: RID, _spacing: number): number;
  public _font_set_baseline_offset(_font_rid: RID, _baseline_offset: number): void;
  public _font_get_baseline_offset(_font_rid: RID): number;
  public _font_set_transform(_font_rid: RID, _transform: Transform2D): void;
  public _font_get_transform(_font_rid: RID): Transform2D;
  public _font_set_variation_coordinates(_font_rid: RID, _variation_coordinates: Dictionary): void;
  public _font_get_variation_coordinates(_font_rid: RID): Dictionary;
  public _font_set_oversampling(_font_rid: RID, _oversampling: number): void;
  public _font_get_oversampling(_font_rid: RID): number;
  public _font_get_size_cache_list(_font_rid: RID): Array;
  public _font_clear_size_cache(_font_rid: RID): void;
  public _font_remove_size_cache(_font_rid: RID, _size: Vector2i): void;
  public _font_set_ascent(_font_rid: RID, _size: number, _ascent: number): void;
  public _font_get_ascent(_font_rid: RID, _size: number): number;
  public _font_set_descent(_font_rid: RID, _size: number, _descent: number): void;
  public _font_get_descent(_font_rid: RID, _size: number): number;
  public _font_set_underline_position(_font_rid: RID, _size: number, _underline_position: number): void;
  public _font_get_underline_position(_font_rid: RID, _size: number): number;
  public _font_set_underline_thickness(_font_rid: RID, _size: number, _underline_thickness: number): void;
  public _font_get_underline_thickness(_font_rid: RID, _size: number): number;
  public _font_set_scale(_font_rid: RID, _size: number, _scale: number): void;
  public _font_get_scale(_font_rid: RID, _size: number): number;
  public _font_get_texture_count(_font_rid: RID, _size: Vector2i): number;
  public _font_clear_textures(_font_rid: RID, _size: Vector2i): void;
  public _font_remove_texture(_font_rid: RID, _size: Vector2i, _texture_index: number): void;
  public _font_set_texture_image(_font_rid: RID, _size: Vector2i, _texture_index: number, _image: Image): void;
  public _font_get_texture_image(_font_rid: RID, _size: Vector2i, _texture_index: number): Image;
  public _font_set_texture_offsets(_font_rid: RID, _size: Vector2i, _texture_index: number, _offset: PackedInt32Array): void;
  public _font_get_texture_offsets(_font_rid: RID, _size: Vector2i, _texture_index: number): PackedInt32Array;
  public _font_get_glyph_list(_font_rid: RID, _size: Vector2i): PackedInt32Array;
  public _font_clear_glyphs(_font_rid: RID, _size: Vector2i): void;
  public _font_remove_glyph(_font_rid: RID, _size: Vector2i, _glyph: number): void;
  public _font_get_glyph_advance(_font_rid: RID, _size: number, _glyph: number): Vector2;
  public _font_set_glyph_advance(_font_rid: RID, _size: number, _glyph: number, _advance: Vector2): void;
  public _font_get_glyph_offset(_font_rid: RID, _size: Vector2i, _glyph: number): Vector2;
  public _font_set_glyph_offset(_font_rid: RID, _size: Vector2i, _glyph: number, _offset: Vector2): void;
  public _font_get_glyph_size(_font_rid: RID, _size: Vector2i, _glyph: number): Vector2;
  public _font_set_glyph_size(_font_rid: RID, _size: Vector2i, _glyph: number, _gl_size: Vector2): void;
  public _font_get_glyph_uv_rect(_font_rid: RID, _size: Vector2i, _glyph: number): Rect2;
  public _font_set_glyph_uv_rect(_font_rid: RID, _size: Vector2i, _glyph: number, _uv_rect: Rect2): void;
  public _font_get_glyph_texture_idx(_font_rid: RID, _size: Vector2i, _glyph: number): number;
  public _font_set_glyph_texture_idx(_font_rid: RID, _size: Vector2i, _glyph: number, _texture_idx: number): void;
  public _font_get_glyph_texture_rid(_font_rid: RID, _size: Vector2i, _glyph: number): RID;
  public _font_get_glyph_texture_size(_font_rid: RID, _size: Vector2i, _glyph: number): Vector2;
  public _font_get_glyph_contours(_font_rid: RID, _size: number, _index: number): Dictionary;
  public _font_get_kerning_list(_font_rid: RID, _size: number): Array;
  public _font_clear_kerning_map(_font_rid: RID, _size: number): void;
  public _font_remove_kerning(_font_rid: RID, _size: number, _glyph_pair: Vector2i): void;
  public _font_set_kerning(_font_rid: RID, _size: number, _glyph_pair: Vector2i, _kerning: Vector2): void;
  public _font_get_kerning(_font_rid: RID, _size: number, _glyph_pair: Vector2i): Vector2;
  public _font_get_glyph_index(_font_rid: RID, _size: number, _char: number, _variation_selector: number): number;
  public _font_get_char_from_glyph_index(_font_rid: RID, _size: number, _glyph_index: number): number;
  public _font_has_char(_font_rid: RID, _char: number): boolean;
  public _font_get_supported_chars(_font_rid: RID): String;
  public _font_render_range(_font_rid: RID, _size: Vector2i, _start: number, _end: number): void;
  public _font_render_glyph(_font_rid: RID, _size: Vector2i, _index: number): void;
  public _font_draw_glyph(_font_rid: RID, _canvas: RID, _size: number, _pos: Vector2, _index: number, _color: Color): void;
  public _font_draw_glyph_outline(_font_rid: RID, _canvas: RID, _size: number, _outline_size: number, _pos: Vector2, _index: number, _color: Color): void;
  public _font_is_language_supported(_font_rid: RID, _language: String): boolean;
  public _font_set_language_support_override(_font_rid: RID, _language: String, _supported: boolean): void;
  public _font_get_language_support_override(_font_rid: RID, _language: String): boolean;
  public _font_remove_language_support_override(_font_rid: RID, _language: String): void;
  public _font_get_language_support_overrides(_font_rid: RID): PackedStringArray;
  public _font_is_script_supported(_font_rid: RID, _script: String): boolean;
  public _font_set_script_support_override(_font_rid: RID, _script: String, _supported: boolean): void;
  public _font_get_script_support_override(_font_rid: RID, _script: String): boolean;
  public _font_remove_script_support_override(_font_rid: RID, _script: String): void;
  public _font_get_script_support_overrides(_font_rid: RID): PackedStringArray;
  public _font_set_opentype_feature_overrides(_font_rid: RID, _overrides: Dictionary): void;
  public _font_get_opentype_feature_overrides(_font_rid: RID): Dictionary;
  public _font_supported_feature_list(_font_rid: RID): Dictionary;
  public _font_supported_variation_list(_font_rid: RID): Dictionary;
  public _font_get_global_oversampling(): number;
  public _font_set_global_oversampling(_oversampling: number): void;
  public _get_hex_code_box_size(_size: number, _index: number): Vector2;
  public _draw_hex_code_box(_canvas: RID, _size: number, _pos: Vector2, _index: number, _color: Color): void;
  public _create_shaped_text(_direction: number, _orientation: number): RID;
  public _shaped_text_clear(_shaped: RID): void;
  public _shaped_text_set_direction(_shaped: RID, _direction: number): void;
  public _shaped_text_get_direction(_shaped: RID): number;
  public _shaped_text_get_inferred_direction(_shaped: RID): number;
  public _shaped_text_set_bidi_override(_shaped: RID, _override: GDArray): void;
  public _shaped_text_set_custom_punctuation(_shaped: RID, _punct: String): void;
  public _shaped_text_get_custom_punctuation(_shaped: RID): String;
  public _shaped_text_set_custom_ellipsis(_shaped: RID, _char: number): void;
  public _shaped_text_get_custom_ellipsis(_shaped: RID): number;
  public _shaped_text_set_orientation(_shaped: RID, _orientation: number): void;
  public _shaped_text_get_orientation(_shaped: RID): number;
  public _shaped_text_set_preserve_invalid(_shaped: RID, _enabled: boolean): void;
  public _shaped_text_get_preserve_invalid(_shaped: RID): boolean;
  public _shaped_text_set_preserve_control(_shaped: RID, _enabled: boolean): void;
  public _shaped_text_get_preserve_control(_shaped: RID): boolean;
  public _shaped_text_set_spacing(_shaped: RID, _spacing: number, _value: number): void;
  public _shaped_text_get_spacing(_shaped: RID, _spacing: number): number;
  public _shaped_text_add_string(_shaped: RID, _text: String, _fonts: typedarray::RID, _size: number, _opentype_features: Dictionary, _language: String, _meta: Variant): boolean;
  public _shaped_text_add_object(_shaped: RID, _key: Variant, _size: Vector2, _inline_align: number, _length: number, _baseline: number): boolean;
  public _shaped_text_resize_object(_shaped: RID, _key: Variant, _size: Vector2, _inline_align: number, _baseline: number): boolean;
  public _shaped_get_span_count(_shaped: RID): number;
  public _shaped_get_span_meta(_shaped: RID, _index: number): Variant;
  public _shaped_set_span_update_font(_shaped: RID, _index: number, _fonts: typedarray::RID, _size: number, _opentype_features: Dictionary): void;
  public _shaped_text_substr(_shaped: RID, _start: number, _length: number): RID;
  public _shaped_text_get_parent(_shaped: RID): RID;
  public _shaped_text_fit_to_width(_shaped: RID, _width: number, _justification_flags: number): number;
  public _shaped_text_tab_align(_shaped: RID, _tab_stops: PackedFloat32Array): number;
  public _shaped_text_shape(_shaped: RID): boolean;
  public _shaped_text_update_breaks(_shaped: RID): boolean;
  public _shaped_text_update_justification_ops(_shaped: RID): boolean;
  public _shaped_text_is_ready(_shaped: RID): boolean;
  public _shaped_text_get_glyphs(_shaped: RID): const Glyph*;
  public _shaped_text_sort_logical(_shaped: RID): const Glyph*;
  public _shaped_text_get_glyph_count(_shaped: RID): number;
  public _shaped_text_get_range(_shaped: RID): Vector2i;
  public _shaped_text_get_line_breaks_adv(_shaped: RID, _width: PackedFloat32Array, _start: number, _once: boolean, _break_flags: number): PackedInt32Array;
  public _shaped_text_get_line_breaks(_shaped: RID, _width: number, _start: number, _break_flags: number): PackedInt32Array;
  public _shaped_text_get_word_breaks(_shaped: RID, _grapheme_flags: number, _skip_grapheme_flags: number): PackedInt32Array;
  public _shaped_text_get_trim_pos(_shaped: RID): number;
  public _shaped_text_get_ellipsis_pos(_shaped: RID): number;
  public _shaped_text_get_ellipsis_glyph_count(_shaped: RID): number;
  public _shaped_text_get_ellipsis_glyphs(_shaped: RID): const Glyph*;
  public _shaped_text_overrun_trim_to_width(_shaped: RID, _width: number, _trim_flags: number): void;
  public _shaped_text_get_objects(_shaped: RID): GDArray;
  public _shaped_text_get_object_rect(_shaped: RID, _key: Variant): Rect2;
  public _shaped_text_get_object_range(_shaped: RID, _key: Variant): Vector2i;
  public _shaped_text_get_object_glyph(_shaped: RID, _key: Variant): number;
  public _shaped_text_get_size(_shaped: RID): Vector2;
  public _shaped_text_get_ascent(_shaped: RID): number;
  public _shaped_text_get_descent(_shaped: RID): number;
  public _shaped_text_get_width(_shaped: RID): number;
  public _shaped_text_get_underline_position(_shaped: RID): number;
  public _shaped_text_get_underline_thickness(_shaped: RID): number;
  public _shaped_text_get_dominant_direction_in_range(_shaped: RID, _start: number, _end: number): number;
  public _shaped_text_get_carets(_shaped: RID, _position: number, _caret: CaretInfo*): void;
  public _shaped_text_get_selection(_shaped: RID, _start: number, _end: number): PackedVector2Array;
  public _shaped_text_hit_test_grapheme(_shaped: RID, _coord: number): number;
  public _shaped_text_hit_test_position(_shaped: RID, _coord: number): number;
  public _shaped_text_draw(_shaped: RID, _canvas: RID, _pos: Vector2, _clip_l: number, _clip_r: number, _color: Color): void;
  public _shaped_text_draw_outline(_shaped: RID, _canvas: RID, _pos: Vector2, _clip_l: number, _clip_r: number, _outline_size: number, _color: Color): void;
  public _shaped_text_get_grapheme_bounds(_shaped: RID, _pos: number): Vector2;
  public _shaped_text_next_grapheme_pos(_shaped: RID, _pos: number): number;
  public _shaped_text_prev_grapheme_pos(_shaped: RID, _pos: number): number;
  public _shaped_text_get_character_breaks(_shaped: RID): PackedInt32Array;
  public _shaped_text_next_character_pos(_shaped: RID, _pos: number): number;
  public _shaped_text_prev_character_pos(_shaped: RID, _pos: number): number;
  public _shaped_text_closest_character_pos(_shaped: RID, _pos: number): number;
  public _format_number(_number: String, _language: String): String;
  public _parse_number(_number: String, _language: String): String;
  public _percent_sign(_language: String): String;
  public _strip_diacritics(_string: String): String;
  public _is_valid_identifier(_string: String): boolean;
  public _is_valid_letter(_unicode: number): boolean;
  public _string_get_word_breaks(_string: String, _language: String, _chars_per_line: number): PackedInt32Array;
  public _string_get_character_breaks(_string: String, _language: String): PackedInt32Array;
  public _is_confusable(_string: String, _dict: PackedStringArray): number;
  public _spoof_check(_string: String): boolean;
  public _string_to_upper(_string: String, _language: String): String;
  public _string_to_lower(_string: String, _language: String): String;
  public _string_to_title(_string: String, _language: String): String;
  public _parse_structured_text(_parser_type: number, _args: GDArray, _text: String): Array;
  public _cleanup(): void;
}