import os

def get_sources(path):
    sources = []
    for root, dirs, files in os.walk(path):
        sources += Glob(os.path.join(root, '*.cpp'))
    for root, dirs, files in os.walk(path):
        sources += Glob(os.path.join(root, '*.c'))
    return sources

env = Environment(tools=["default"], PLATFORM="")
env.PrependENVPath("PATH", os.getenv("PATH"))

if os.name == 'nt':
    prebuilt_path = "windows-x86_64"
elif os.name == 'posix':
    prebuilt_path = "linux-x86_64"
else:
    raise OSError("Unsupported operating system")

env["ENV"]["ANDROID_HOME"] = os.getenv("ANDROID_HOME")
env["CC"] = f"{env['ENV']['ANDROID_HOME']}/ndk/23.2.8568313/toolchains/llvm/prebuilt/{prebuilt_path}/bin/aarch64-linux-android23-clang"
env["CXX"] = f"{env['ENV']['ANDROID_HOME']}/ndk/23.2.8568313/toolchains/llvm/prebuilt/{prebuilt_path}/bin/aarch64-linux-android23-clang++"


env.Append(CCFLAGS=['-O0', '-Wall', '-Wextra', '-Wno-unused-parameter', '-fPIC'])
env.Append(CPPPATH=['./include', './src'])

sources = get_sources('./src')

tree_sitter = env.StaticLibrary(target='./bin/tree-sitter', source=sources)

Export('tree_sitter')
Return('tree_sitter')